/*
 * MIT License
 *
 * Copyright (c) 2021 PHAST
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

package org.hl7.fhir.r4.model


import com.fasterxml.jackson.annotation.*
import kotlin.collections.List
import java.math.BigDecimal
import java.util.*

/**
 * @Author David Ouagne <david.ouagne@phast.fr>
 * @Generated on 11-05-2021 19:04:50
 */

/**
 * A financial tool for tracking value accrued for a particular purpose.  In the healthcare field, used to track charges for a patient, cost centers, etc.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class Account(
    val status: AccountStatus): DomainResource() {


    /**
     * Unique identifier used to reference the account.  Might or might not be intended for human use (e.g. credit card number).
     */
    var identifier: List<Identifier>? = null



    /**
     * Categorizes the account for reporting and searching purposes.
     */
    var type: CodeableConcept? = null



    /**
     * Name used for the account when displaying it to humans in reports, etc.
     */
    var name: StringType? = null



    /**
     * Identifies the entity which incurs the expenses. While the immediate recipients of services or goods might be entities related to the subject, the expenses were ultimately incurred by the subject of the Account.
     */
    var subject: List<Reference>? = null

    @JsonIgnore
    var subjectTarget: List<Resource>? = null

    /**
     * The date range of services associated with this account.
     */
    var servicePeriod: Period? = null



    /**
     * The party(s) that are responsible for covering the payment of this account, and what order should they be applied to the account.
     */
    var coverage: List<AccountCoverage>? = null



    /**
     * Indicates the service area, hospital, department, etc. with responsibility for managing the Account.
     */
    var owner: Reference? = null

    @JsonIgnore
    var ownerTarget: Resource? = null

    /**
     * Provides additional information about what the account tracks and how it is used.
     */
    var description: StringType? = null



    /**
     * The parties responsible for balancing the account if other payment options fall short.
     */
    var guarantor: List<AccountGuarantor>? = null



    /**
     * Reference to a parent Account.
     */
    var partOf: Reference? = null

    @JsonIgnore
    var partOfTarget: Resource? = null


}

/**
 * A financial tool for tracking value accrued for a particular purpose.  In the healthcare field, used to track charges for a patient, cost centers, etc.
 */
class AccountCoverage(
    val coverage: Reference): BackboneElement() {


    /**
     * The priority of the coverage in the context of this account.
     */
    var priority: PositiveIntType? = null




}

/**
 * A financial tool for tracking value accrued for a particular purpose.  In the healthcare field, used to track charges for a patient, cost centers, etc.
 */
class AccountGuarantor(
    val party: Reference): BackboneElement() {


    /**
     * A guarantor may be placed on credit hold or otherwise have their role temporarily suspended.
     */
    var onHold: BooleanType? = null



    /**
     * The timeframe during which the guarantor accepts responsibility for the account.
     */
    var period: Period? = null




}

/**
 * Indicates whether the account is available to be used.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class AccountStatus(
    @JsonValue val text: String) {
    ACTIVE("active"),
    INACTIVE("inactive"),
    ENTERED_IN_ERROR("entered-in-error"),
    ON_HOLD("on-hold"),
    UNKNOWN("unknown")
}




/**
 * Defines behavior for an action or a group for how many times that item may be repeated.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class ActionCardinalityBehavior(
    @JsonValue val text: String) {
    SINGLE("single"),
    MULTIPLE("multiple")
}




/**
 * Defines the kinds of conditions that can appear on actions.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class ActionConditionKind(
    @JsonValue val text: String) {
    APPLICABILITY("applicability"),
    START("start"),
    STOP("stop")
}




/**
 * Defines organization behavior of a group.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class ActionGroupingBehavior(
    @JsonValue val text: String) {
    VISUAL_GROUP("visual-group"),
    LOGICAL_GROUP("logical-group"),
    SENTENCE_GROUP("sentence-group")
}




/**
 * The type of participant in the activity.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class ActionParticipantType(
    @JsonValue val text: String) {
    PATIENT("patient"),
    PRACTITIONER("practitioner"),
    RELATED_PERSON("related-person"),
    DEVICE("device")
}




/**
 * Defines selection frequency behavior for an action or group.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class ActionPrecheckBehavior(
    @JsonValue val text: String) {
    YES("yes"),
    NO("no")
}




/**
 * Defines the types of relationships between actions.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class ActionRelationshipType(
    @JsonValue val text: String) {
    BEFORE_START("before-start"),
    BEFORE("before"),
    BEFORE_END("before-end"),
    CONCURRENT_WITH_START("concurrent-with-start"),
    CONCURRENT("concurrent"),
    CONCURRENT_WITH_END("concurrent-with-end"),
    AFTER_START("after-start"),
    AFTER("after"),
    AFTER_END("after-end")
}




/**
 * Defines expectations around whether an action or action group is required.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class ActionRequiredBehavior(
    @JsonValue val text: String) {
    MUST("must"),
    COULD("could"),
    MUST_UNLESS_DOCUMENTED("must-unless-documented")
}




/**
 * Defines selection behavior of a group.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class ActionSelectionBehavior(
    @JsonValue val text: String) {
    ANY("any"),
    ALL("all"),
    ALL_OR_NONE("all-or-none"),
    EXACTLY_ONE("exactly-one"),
    AT_MOST_ONE("at-most-one"),
    ONE_OR_MORE("one-or-more")
}




/**
 * This resource allows for the definition of some activity to be performed, independent of a particular patient, practitioner, or other performance context.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class ActivityDefinition(
    val status: PublicationStatus): DomainResource() {


    /**
     * An absolute URI that is used to identify this activity definition when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which at which an authoritative instance of this activity definition is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the activity definition is stored on different servers.
     */
    var url: UriType? = null



    /**
     * A formal identifier that is used to identify this activity definition when it is represented in other formats, or referenced in a specification, model, design or an instance.
     */
    var identifier: List<Identifier>? = null



    /**
     * The identifier that is used to identify this version of the activity definition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the activity definition author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence. To provide a version consistent with the Decision Support Service specification, use the format Major.Minor.Revision (e.g. 1.0.0). For more information on versioning knowledge assets, refer to the Decision Support Service specification. Note that a version is required for non-experimental active assets.
     */
    var version: StringType? = null



    /**
     * A natural language name identifying the activity definition. This name should be usable as an identifier for the module by machine processing applications such as code generation.
     */
    var name: StringType? = null



    /**
     * A short, descriptive, user-friendly title for the activity definition.
     */
    var title: StringType? = null



    /**
     * An explanatory or alternate title for the activity definition giving additional information about its content.
     */
    var subtitle: StringType? = null



    /**
     * A Boolean value to indicate that this activity definition is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
     */
    var experimental: BooleanType? = null



    /**
     *
     */
    var subjectCodeableConcept: CodeableConcept? = null



    /**
     *
     */
    var subjectReference: Reference? = null

    @JsonIgnore
    var subjectReferenceTarget: Resource? = null

    /**
     * The date  (and optionally time) when the activity definition was published. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the activity definition changes.
     */
    var date: DateTimeType? = null



    /**
     * The name of the organization or individual that published the activity definition.
     */
    var publisher: StringType? = null



    /**
     * Contact details to assist a user in finding and communicating with the publisher.
     */
    var contact: List<ContactDetail>? = null



    /**
     * A free text natural language description of the activity definition from a consumer's perspective.
     */
    var description: MarkdownType? = null



    /**
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate activity definition instances.
     */
    var useContext: List<UsageContext>? = null



    /**
     * A legal or geographic region in which the activity definition is intended to be used.
     */
    var jurisdiction: List<CodeableConcept>? = null



    /**
     * Explanation of why this activity definition is needed and why it has been designed as it has.
     */
    var purpose: MarkdownType? = null



    /**
     * A detailed description of how the activity definition is used from a clinical perspective.
     */
    var usage: StringType? = null



    /**
     * A copyright statement relating to the activity definition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the activity definition.
     */
    var copyright: MarkdownType? = null



    /**
     * The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage.
     */
    var approvalDate: DateType? = null



    /**
     * The date on which the resource content was last reviewed. Review happens periodically after approval but does not change the original approval date.
     */
    var lastReviewDate: DateType? = null



    /**
     * The period during which the activity definition content was or is planned to be in active use.
     */
    var effectivePeriod: Period? = null



    /**
     * Descriptive topics related to the content of the activity. Topics provide a high-level categorization of the activity that can be useful for filtering and searching.
     */
    var topic: List<CodeableConcept>? = null



    /**
     * An individiual or organization primarily involved in the creation and maintenance of the content.
     */
    var author: List<ContactDetail>? = null



    /**
     * An individual or organization primarily responsible for internal coherence of the content.
     */
    var editor: List<ContactDetail>? = null



    /**
     * An individual or organization primarily responsible for review of some aspect of the content.
     */
    var reviewer: List<ContactDetail>? = null



    /**
     * An individual or organization responsible for officially endorsing the content for use in some setting.
     */
    var endorser: List<ContactDetail>? = null



    /**
     * Related artifacts such as additional documentation, justification, or bibliographic references.
     */
    var relatedArtifact: List<RelatedArtifact>? = null



    /**
     * A reference to a Library resource containing any formal logic used by the activity definition.
     */
    var library: List<CanonicalType>? = null



    /**
     * A description of the kind of resource the activity definition is representing. For example, a MedicationRequest, a ServiceRequest, or a CommunicationRequest. Typically, but not always, this is a Request resource.
     */
    var kind: RequestResourceType? = null



    /**
     * A profile to which the target of the activity definition is expected to conform.
     */
    var profile: CanonicalType? = null



    /**
     * Detailed description of the type of activity; e.g. What lab test, what procedure, what kind of encounter.
     */
    var code: CodeableConcept? = null



    /**
     * Indicates the level of authority/intentionality associated with the activity and where the request should fit into the workflow chain.
     */
    var intent: RequestIntent? = null



    /**
     * Indicates how quickly the activity  should be addressed with respect to other requests.
     */
    var priority: RequestPriority? = null



    /**
     * Set this to true if the definition is to indicate that a particular activity should NOT be performed. If true, this element should be interpreted to reinforce a negative coding. For example NPO as a code with a doNotPerform of true would still indicate to NOT perform the action.
     */
    var doNotPerform: BooleanType? = null



    /**
     *
     */
    var timingTiming: Timing? = null



    /**
     *
     */
    var timingDateTime: DateTimeType? = null



    /**
     *
     */
    var timingAge: Age? = null



    /**
     *
     */
    var timingPeriod: Period? = null



    /**
     *
     */
    var timingRange: Range? = null



    /**
     *
     */
    var timingDuration: Duration? = null



    /**
     * Identifies the facility where the activity will occur; e.g. home, hospital, specific clinic, etc.
     */
    var location: Reference? = null

    @JsonIgnore
    var locationTarget: Resource? = null

    /**
     * Indicates who should participate in performing the action described.
     */
    var participant: List<ActivityDefinitionParticipant>? = null



    /**
     *
     */
    var productReference: Reference? = null

    @JsonIgnore
    var productReferenceTarget: Resource? = null

    /**
     *
     */
    var productCodeableConcept: CodeableConcept? = null



    /**
     * Identifies the quantity expected to be consumed at once (per dose, per meal, etc.).
     */
    var quantity: Quantity? = null



    /**
     * Provides detailed dosage instructions in the same way that they are described for MedicationRequest resources.
     */
    var dosage: List<Dosage>? = null



    /**
     * Indicates the sites on the subject's body where the procedure should be performed (I.e. the target sites).
     */
    var bodySite: List<CodeableConcept>? = null



    /**
     * Defines specimen requirements for the action to be performed, such as required specimens for a lab test.
     */
    var specimenRequirement: List<Reference>? = null

    @JsonIgnore
    var specimenRequirementTarget: List<Resource>? = null

    /**
     * Defines observation requirements for the action to be performed, such as body weight or surface area.
     */
    var observationRequirement: List<Reference>? = null

    @JsonIgnore
    var observationRequirementTarget: List<Resource>? = null

    /**
     * Defines the observations that are expected to be produced by the action.
     */
    var observationResultRequirement: List<Reference>? = null

    @JsonIgnore
    var observationResultRequirementTarget: List<Resource>? = null

    /**
     * A reference to a StructureMap resource that defines a transform that can be executed to produce the intent resource using the ActivityDefinition instance as the input.
     */
    var transform: CanonicalType? = null



    /**
     * Dynamic values that will be evaluated to produce values for elements of the resulting resource. For example, if the dosage of a medication must be computed based on the patient's weight, a dynamic value would be used to specify an expression that calculated the weight, and the path on the request resource that would contain the result.
     */
    var dynamicValue: List<ActivityDefinitionDynamicValue>? = null




}

/**
 * This resource allows for the definition of some activity to be performed, independent of a particular patient, practitioner, or other performance context.
 */
class ActivityDefinitionDynamicValue(
    val path: StringType,
    val expression: Expression): BackboneElement()

/**
 * This resource allows for the definition of some activity to be performed, independent of a particular patient, practitioner, or other performance context.
 */
class ActivityDefinitionParticipant(
    val type: ActionParticipantType): BackboneElement() {


    /**
     * The role the participant should play in performing the described action.
     */
    var role: CodeableConcept? = null




}

/**
 * An address expressed using postal conventions (as opposed to GPS or other location definition formats).  This data type may be used to convey addresses for use in delivering mail as well as for visiting locations which might not be valid for mail delivery.  There are a variety of postal address formats defined around the world.
 * If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions
 */
class Address: Element()
{


    /**
     * The purpose of this address.
     */
    var use: AddressUse? = null



    /**
     * Distinguishes between physical addresses (those you can visit) and mailing addresses (e.g. PO Boxes and care-of addresses). Most addresses are both.
     */
    var type: AddressType? = null



    /**
     * Specifies the entire address as it should be displayed e.g. on a postal label. This may be provided instead of or as well as the specific parts.
     */
    var text: StringType? = null



    /**
     * This component contains the house number, apartment number, street name, street direction,  P.O. Box number, delivery hints, and similar address information.
     */
    var line: List<StringType>? = null



    /**
     * The name of the city, town, suburb, village or other community or delivery center.
     */
    var city: StringType? = null



    /**
     * The name of the administrative area (county).
     */
    var district: StringType? = null



    /**
     * Sub-unit of a country with limited sovereignty in a federally organized country. A code may be used if codes are in common use (e.g. US 2 letter state codes).
     */
    var state: StringType? = null



    /**
     * A postal code designating a region defined by the postal service.
     */
    var postalCode: StringType? = null



    /**
     * Country - a nation as commonly understood or generally accepted.
     */
    var country: StringType? = null



    /**
     * Time period when address was/is in use.
     */
    var period: Period? = null




}

/**
 * The type of an address (physical / postal).
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class AddressType(
    @JsonValue val text: String) {
    POSTAL("postal"),
    PHYSICAL("physical"),
    BOTH("both")
}




/**
 * The use of an address.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class AddressUse(
    @JsonValue val text: String) {
    HOME("home"),
    WORK("work"),
    TEMP("temp"),
    OLD("old"),
    BILLING("billing")
}




/**
 *
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class AdministrativeGender(
    @JsonValue val text: String) {
    MALE("male"),
    FEMALE("female"),
    OTHER("other"),
    UNKNOWN("unknown")
}




/**
 * Actual or  potential/avoided event causing unintended physical injury resulting from or contributed to by medical care, a research study or other healthcare setting factors that requires additional monitoring, treatment, or hospitalization, or that results in death.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class AdverseEvent(
    val actuality: AdverseEventActuality,
    val subject: Reference): DomainResource() {


    /**
     * Business identifiers assigned to this adverse event by the performer or other systems which remain constant as the resource is updated and propagates from server to server.
     */
    var identifier: Identifier? = null



    /**
     * The overall type of event, intended for search and filtering purposes.
     */
    var category: List<CodeableConcept>? = null



    /**
     * This element defines the specific type of event that occurred or that was prevented from occurring.
     */
    var event: CodeableConcept? = null



    /**
     * The Encounter during which AdverseEvent was created or to which the creation of this record is tightly associated.
     */
    var encounter: Reference? = null

    @JsonIgnore
    var encounterTarget: Resource? = null

    /**
     * The date (and perhaps time) when the adverse event occurred.
     */
    var date: DateTimeType? = null



    /**
     * Estimated or actual date the AdverseEvent began, in the opinion of the reporter.
     */
    var detected: DateTimeType? = null



    /**
     * The date on which the existence of the AdverseEvent was first recorded.
     */
    var recordedDate: DateTimeType? = null



    /**
     * Includes information about the reaction that occurred as a result of exposure to a substance (for example, a drug or a chemical).
     */
    var resultingCondition: List<Reference>? = null

    @JsonIgnore
    var resultingConditionTarget: List<Resource>? = null

    /**
     * The information about where the adverse event occurred.
     */
    var location: Reference? = null

    @JsonIgnore
    var locationTarget: Resource? = null

    /**
     * Assessment whether this event was of real importance.
     */
    var seriousness: CodeableConcept? = null



    /**
     * Describes the severity of the adverse event, in relation to the subject. Contrast to AdverseEvent.seriousness - a severe rash might not be serious, but a mild heart problem is.
     */
    var severity: CodeableConcept? = null



    /**
     * Describes the type of outcome from the adverse event.
     */
    var outcome: CodeableConcept? = null



    /**
     * Information on who recorded the adverse event.  May be the patient or a practitioner.
     */
    var recorder: Reference? = null

    @JsonIgnore
    var recorderTarget: Resource? = null

    /**
     * Parties that may or should contribute or have contributed information to the adverse event, which can consist of one or more activities.  Such information includes information leading to the decision to perform the activity and how to perform the activity (e.g. consultant), information that the activity itself seeks to reveal (e.g. informant of clinical history), or information about what activity was performed (e.g. informant witness).
     */
    var contributor: List<Reference>? = null

    @JsonIgnore
    var contributorTarget: List<Resource>? = null

    /**
     * Describes the entity that is suspected to have caused the adverse event.
     */
    var suspectEntity: List<AdverseEventSuspectEntity>? = null



    /**
     * AdverseEvent.subjectMedicalHistory.
     */
    var subjectMedicalHistory: List<Reference>? = null

    @JsonIgnore
    var subjectMedicalHistoryTarget: List<Resource>? = null

    /**
     * AdverseEvent.referenceDocument.
     */
    var referenceDocument: List<Reference>? = null

    @JsonIgnore
    var referenceDocumentTarget: List<Resource>? = null

    /**
     * AdverseEvent.study.
     */
    var study: List<Reference>? = null

    @JsonIgnore
    var studyTarget: List<Resource>? = null


}

/**
 * Overall nature of the adverse event, e.g. real or potential.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class AdverseEventActuality(
    @JsonValue val text: String) {
    ACTUAL("actual"),
    POTENTIAL("potential")
}




/**
 * Actual or  potential/avoided event causing unintended physical injury resulting from or contributed to by medical care, a research study or other healthcare setting factors that requires additional monitoring, treatment, or hospitalization, or that results in death.
 */
class AdverseEventCausality: BackboneElement()
{


    /**
     * Assessment of if the entity caused the event.
     */
    var assessment: CodeableConcept? = null



    /**
     * AdverseEvent.suspectEntity.causalityProductRelatedness.
     */
    var productRelatedness: StringType? = null



    /**
     * AdverseEvent.suspectEntity.causalityAuthor.
     */
    var author: Reference? = null

    @JsonIgnore
    var authorTarget: Resource? = null

    /**
     * ProbabilityScale | Bayesian | Checklist.
     */
    var method: CodeableConcept? = null




}

/**
 * Actual or  potential/avoided event causing unintended physical injury resulting from or contributed to by medical care, a research study or other healthcare setting factors that requires additional monitoring, treatment, or hospitalization, or that results in death.
 */
class AdverseEventSuspectEntity(
    val instance: Reference): BackboneElement() {


    /**
     * Information on the possible cause of the event.
     */
    var causality: List<AdverseEventCausality>? = null




}

/**
 * A duration of time during which an organism (or a process) has existed.
 * If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions
 */
class Age: Quantity()


/**
 * How resource references can be aggregated.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class AggregationMode(
    @JsonValue val text: String) {
    CONTAINED("contained"),
    REFERENCED("referenced"),
    BUNDLED("bundled")
}




/**
 * Risk of harmful or undesirable, physiological response which is unique to an individual and associated with exposure to a substance.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class AllergyIntolerance(
    val patient: Reference): DomainResource() {


    /**
     * Business identifiers assigned to this AllergyIntolerance by the performer or other systems which remain constant as the resource is updated and propagates from server to server.
     */
    var identifier: List<Identifier>? = null



    /**
     * The clinical status of the allergy or intolerance.
     */
    var clinicalStatus: CodeableConcept? = null



    /**
     * Assertion about certainty associated with the propensity, or potential risk, of a reaction to the identified substance (including pharmaceutical product).
     */
    var verificationStatus: CodeableConcept? = null



    /**
     * Identification of the underlying physiological mechanism for the reaction risk.
     */
    var type: AllergyIntoleranceType? = null



    /**
     * Category of the identified substance.
     */
    var category: List<AllergyIntoleranceCategory>? = null



    /**
     * Estimate of the potential clinical harm, or seriousness, of the reaction to the identified substance.
     */
    var criticality: AllergyIntoleranceCriticality? = null



    /**
     * Code for an allergy or intolerance statement (either a positive or a negated/excluded statement).  This may be a code for a substance or pharmaceutical product that is considered to be responsible for the adverse reaction risk (e.g., "Latex"), an allergy or intolerance condition (e.g., "Latex allergy"), or a negated/excluded code for a specific substance or class (e.g., "No latex allergy") or a general or categorical negated statement (e.g.,  "No known allergy", "No known drug allergies").  Note: the substance for a specific reaction may be different from the substance identified as the cause of the risk, but it must be consistent with it. For instance, it may be a more specific substance (e.g. a brand medication) or a composite product that includes the identified substance. It must be clinically safe to only process the 'code' and ignore the 'reaction.substance'.  If a receiving system is unable to confirm that AllergyIntolerance.reaction.substance falls within the semantic scope of AllergyIntolerance.code, then the receiving system should ignore AllergyIntolerance.reaction.substance.
     */
    var code: CodeableConcept? = null



    /**
     * The encounter when the allergy or intolerance was asserted.
     */
    var encounter: Reference? = null

    @JsonIgnore
    var encounterTarget: Resource? = null

    /**
     *
     */
    var onsetDateTime: DateTimeType? = null



    /**
     *
     */
    var onsetAge: Age? = null



    /**
     *
     */
    var onsetPeriod: Period? = null



    /**
     *
     */
    var onsetRange: Range? = null



    /**
     *
     */
    var onsetString: StringType? = null



    /**
     * The recordedDate represents when this particular AllergyIntolerance record was created in the system, which is often a system-generated date.
     */
    var recordedDate: DateTimeType? = null



    /**
     * Individual who recorded the record and takes responsibility for its content.
     */
    var recorder: Reference? = null

    @JsonIgnore
    var recorderTarget: Resource? = null

    /**
     * The source of the information about the allergy that is recorded.
     */
    var asserter: Reference? = null

    @JsonIgnore
    var asserterTarget: Resource? = null

    /**
     * Represents the date and/or time of the last known occurrence of a reaction event.
     */
    var lastOccurrence: DateTimeType? = null



    /**
     * Additional narrative about the propensity for the Adverse Reaction, not captured in other fields.
     */
    var note: List<Annotation>? = null



    /**
     * Details about each adverse reaction event linked to exposure to the identified substance.
     */
    var reaction: List<AllergyIntoleranceReaction>? = null




}

/**
 * Category of an identified substance associated with allergies or intolerances.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class AllergyIntoleranceCategory(
    @JsonValue val text: String) {
    FOOD("food"),
    MEDICATION("medication"),
    ENVIRONMENT("environment"),
    BIOLOGIC("biologic")
}




/**
 * Estimate of the potential clinical harm, or seriousness, of a reaction to an identified substance.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class AllergyIntoleranceCriticality(
    @JsonValue val text: String) {
    LOW("low"),
    HIGH("high"),
    UNABLE_TO_ASSESS("unable-to-assess")
}




/**
 * Risk of harmful or undesirable, physiological response which is unique to an individual and associated with exposure to a substance.
 */
class AllergyIntoleranceReaction(
    val manifestation: List<CodeableConcept>): BackboneElement() {


    /**
     * Identification of the specific substance (or pharmaceutical product) considered to be responsible for the Adverse Reaction event. Note: the substance for a specific reaction may be different from the substance identified as the cause of the risk, but it must be consistent with it. For instance, it may be a more specific substance (e.g. a brand medication) or a composite product that includes the identified substance. It must be clinically safe to only process the 'code' and ignore the 'reaction.substance'.  If a receiving system is unable to confirm that AllergyIntolerance.reaction.substance falls within the semantic scope of AllergyIntolerance.code, then the receiving system should ignore AllergyIntolerance.reaction.substance.
     */
    var substance: CodeableConcept? = null



    /**
     * Text description about the reaction as a whole, including details of the manifestation if required.
     */
    var description: StringType? = null



    /**
     * Record of the date and/or time of the onset of the Reaction.
     */
    var onset: DateTimeType? = null



    /**
     * Clinical assessment of the severity of the reaction event as a whole, potentially considering multiple different manifestations.
     */
    var severity: AllergyIntoleranceSeverity? = null



    /**
     * Identification of the route by which the subject was exposed to the substance.
     */
    var exposureRoute: CodeableConcept? = null



    /**
     * Additional text about the adverse reaction event not captured in other fields.
     */
    var note: List<Annotation>? = null




}

/**
 * Clinical assessment of the severity of a reaction event as a whole, potentially considering multiple different manifestations.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class AllergyIntoleranceSeverity(
    @JsonValue val text: String) {
    MILD("mild"),
    MODERATE("moderate"),
    SEVERE("severe")
}




/**
 * Identification of the underlying physiological mechanism for a Reaction Risk.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class AllergyIntoleranceType(
    @JsonValue val text: String) {
    ALLERGY("allergy"),
    INTOLERANCE("intolerance")
}




/**
 * A  text note which also  contains information about who made the statement and when.
 * If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions
 */
class Annotation(
    val text: MarkdownType): Element() {


    /**
     *
     */
    var authorReference: Reference? = null

    @JsonIgnore
    var authorReferenceTarget: Resource? = null

    /**
     *
     */
    var authorString: StringType? = null



    /**
     * Indicates when this particular annotation was made.
     */
    var time: DateTimeType? = null




}

/**
 * A booking of a healthcare event among patient(s), practitioner(s), related person(s) and/or device(s) for a specific date/time. This may result in one or more Encounter(s).
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class Appointment(
    val status: AppointmentStatus,
    val participant: List<AppointmentParticipant>): DomainResource() {


    /**
     * This records identifiers associated with this appointment concern that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate (e.g. in CDA documents, or in written / printed documentation).
     */
    var identifier: List<Identifier>? = null



    /**
     * The coded reason for the appointment being cancelled. This is often used in reporting/billing/futher processing to determine if further actions are required, or specific fees apply.
     */
    var cancelationReason: CodeableConcept? = null



    /**
     * A broad categorization of the service that is to be performed during this appointment.
     */
    var serviceCategory: List<CodeableConcept>? = null



    /**
     * The specific service that is to be performed during this appointment.
     */
    var serviceType: List<CodeableConcept>? = null



    /**
     * The specialty of a practitioner that would be required to perform the service requested in this appointment.
     */
    var specialty: List<CodeableConcept>? = null



    /**
     * The style of appointment or patient that has been booked in the slot (not service type).
     */
    var appointmentType: CodeableConcept? = null



    /**
     * The coded reason that this appointment is being scheduled. This is more clinical than administrative.
     */
    var reasonCode: List<CodeableConcept>? = null



    /**
     * Reason the appointment has been scheduled to take place, as specified using information from another resource. When the patient arrives and the encounter begins it may be used as the admission diagnosis. The indication will typically be a Condition (with other resources referenced in the evidence.detail), or a Procedure.
     */
    var reasonReference: List<Reference>? = null

    @JsonIgnore
    var reasonReferenceTarget: List<Resource>? = null

    /**
     * The priority of the appointment. Can be used to make informed decisions if needing to re-prioritize appointments. (The iCal Standard specifies 0 as undefined, 1 as highest, 9 as lowest priority).
     */
    var priority: UnsignedIntType? = null



    /**
     * The brief description of the appointment as would be shown on a subject line in a meeting request, or appointment list. Detailed or expanded information should be put in the comment field.
     */
    var description: StringType? = null



    /**
     * Additional information to support the appointment provided when making the appointment.
     */
    var supportingInformation: List<Reference>? = null

    @JsonIgnore
    var supportingInformationTarget: List<Resource>? = null

    /**
     * Date/Time that the appointment is to take place.
     */
    var start: InstantType? = null



    /**
     * Date/Time that the appointment is to conclude.
     */
    var end: InstantType? = null



    /**
     * Number of minutes that the appointment is to take. This can be less than the duration between the start and end times.  For example, where the actual time of appointment is only an estimate or if a 30 minute appointment is being requested, but any time would work.  Also, if there is, for example, a planned 15 minute break in the middle of a long appointment, the duration may be 15 minutes less than the difference between the start and end.
     */
    var minutesDuration: PositiveIntType? = null



    /**
     * The slots from the participants' schedules that will be filled by the appointment.
     */
    var slot: List<Reference>? = null

    @JsonIgnore
    var slotTarget: List<Resource>? = null

    /**
     * The date that this appointment was initially created. This could be different to the meta.lastModified value on the initial entry, as this could have been before the resource was created on the FHIR server, and should remain unchanged over the lifespan of the appointment.
     */
    var created: DateTimeType? = null



    /**
     * Additional comments about the appointment.
     */
    var comment: StringType? = null



    /**
     * While Appointment.comment contains information for internal use, Appointment.patientInstructions is used to capture patient facing information about the Appointment (e.g. please bring your referral or fast from 8pm night before).
     */
    var patientInstruction: StringType? = null



    /**
     * The service request this appointment is allocated to assess (e.g. incoming referral or procedure request).
     */
    var basedOn: List<Reference>? = null

    @JsonIgnore
    var basedOnTarget: List<Resource>? = null

    /**
     * A set of date ranges (potentially including times) that the appointment is preferred to be scheduled within.
     *
     * The duration (usually in minutes) could also be provided to indicate the length of the appointment to fill and populate the start/end times for the actual allocated time. However, in other situations the duration may be calculated by the scheduling system.
     */
    var requestedPeriod: List<Period>? = null




}

/**
 * A booking of a healthcare event among patient(s), practitioner(s), related person(s) and/or device(s) for a specific date/time. This may result in one or more Encounter(s).
 */
class AppointmentParticipant(
    val status: ParticipationStatus): BackboneElement() {


    /**
     * Role of participant in the appointment.
     */
    var type: List<CodeableConcept>? = null



    /**
     * A Person, Location/HealthcareService or Device that is participating in the appointment.
     */
    var actor: Reference? = null

    @JsonIgnore
    var actorTarget: Resource? = null

    /**
     * Whether this participant is required to be present at the meeting. This covers a use-case where two doctors need to meet to discuss the results for a specific patient, and the patient is not required to be present.
     */
    var required: ParticipantRequired? = null



    /**
     * Participation period of the actor.
     */
    var period: Period? = null




}

/**
 * A reply to an appointment request for a patient and/or practitioner(s), such as a confirmation or rejection.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class AppointmentResponse(
    val appointment: Reference,
    val participantStatus: ParticipationStatus): DomainResource() {


    /**
     * This records identifiers associated with this appointment response concern that are defined by business processes and/ or used to refer to it when a direct URL reference to the resource itself is not appropriate.
     */
    var identifier: List<Identifier>? = null



    /**
     * Date/Time that the appointment is to take place, or requested new start time.
     */
    var start: InstantType? = null



    /**
     * This may be either the same as the appointment request to confirm the details of the appointment, or alternately a new time to request a re-negotiation of the end time.
     */
    var end: InstantType? = null



    /**
     * Role of participant in the appointment.
     */
    var participantType: List<CodeableConcept>? = null



    /**
     * A Person, Location, HealthcareService, or Device that is participating in the appointment.
     */
    var actor: Reference? = null

    @JsonIgnore
    var actorTarget: Resource? = null

    /**
     * Additional comments about the appointment.
     */
    var comment: StringType? = null




}

/**
 * The free/busy status of an appointment.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class AppointmentStatus(
    @JsonValue val text: String) {
    PROPOSED("proposed"),
    PENDING("pending"),
    BOOKED("booked"),
    ARRIVED("arrived"),
    FULFILLED("fulfilled"),
    CANCELLED("cancelled"),
    NOSHOW("noshow"),
    ENTERED_IN_ERROR("entered-in-error"),
    CHECKED_IN("checked-in"),
    WAITLIST("waitlist")
}




/**
 * The type of direction to use for assertion.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class AssertionDirectionType(
    @JsonValue val text: String) {
    RESPONSE("response"),
    REQUEST("request")
}




/**
 * The type of operator to use for assertion.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class AssertionOperatorType(
    @JsonValue val text: String) {
    EQUALS("equals"),
    NOT_EQUALS("notEquals"),
    IN("in"),
    NOT_IN("notIn"),
    GREATER_THAN("greaterThan"),
    LESS_THAN("lessThan"),
    EMPTY("empty"),
    NOT_EMPTY("notEmpty"),
    CONTAINS("contains"),
    NOT_CONTAINS("notContains"),
    EVAL("eval")
}




/**
 * The type of response code to use for assertion.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class AssertionResponseTypes(
    @JsonValue val text: String) {
    OKAY("okay"),
    CREATED("created"),
    NO_CONTENT("noContent"),
    NOT_MODIFIED("notModified"),
    BAD("bad"),
    FORBIDDEN("forbidden"),
    NOT_FOUND("notFound"),
    METHOD_NOT_ALLOWED("methodNotAllowed"),
    CONFLICT("conflict"),
    GONE("gone"),
    PRECONDITION_FAILED("preconditionFailed"),
    UNPROCESSABLE("unprocessable")
}




/**
 * For referring to data content defined in other formats.
 * If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions
 */
class Attachment: Element()
{


    /**
     * Identifies the type of the data in the attachment and allows a method to be chosen to interpret or render the data. Includes mime type parameters such as charset where appropriate.
     */
    var contentType: CodeType? = null



    /**
     * The human language of the content. The value can be any valid value according to BCP 47.
     */
    var language: CodeType? = null



    /**
     * The actual data of the attachment - a sequence of bytes, base64 encoded.
     */
    var data: Base64BinaryType? = null



    /**
     * A location where the data can be accessed.
     */
    var url: UrlType? = null



    /**
     * The number of bytes of data that make up this attachment (before base64 encoding, if that is done).
     */
    var size: UnsignedIntType? = null



    /**
     * The calculated hash of the data using SHA-1. Represented using base64.
     */
    var hash: Base64BinaryType? = null



    /**
     * A label or set of text to display in place of the data.
     */
    var title: StringType? = null



    /**
     * The date that the attachment was first created.
     */
    var creation: DateTimeType? = null




}

/**
 * A record of an event made for purposes of maintaining a security log. Typical uses include detection of intrusion attempts and monitoring for inappropriate usage.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class AuditEvent(
    val type: Coding,
    val recorded: InstantType,
    val agent: List<AuditEventAgent>,
    val source: AuditEventSource): DomainResource() {


    /**
     * Identifier for the category of event.
     */
    var subtype: List<Coding>? = null



    /**
     * Indicator for type of action performed during the event that generated the audit.
     */
    var action: AuditEventAction? = null



    /**
     * The period during which the activity occurred.
     */
    var period: Period? = null



    /**
     * Indicates whether the event succeeded or failed.
     */
    var outcome: AuditEventOutcome? = null



    /**
     * A free text description of the outcome of the event.
     */
    var outcomeDesc: StringType? = null



    /**
     * The purposeOfUse (reason) that was used during the event being recorded.
     */
    var purposeOfEvent: List<CodeableConcept>? = null



    /**
     * Specific instances of data or objects that have been accessed.
     */
    var entity: List<AuditEventEntity>? = null




}

/**
 * Indicator for type of action performed during the event that generated the event.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class AuditEventAction(
    @JsonValue val text: String) {
    C("C"),
    R("R"),
    U("U"),
    D("D"),
    E("E")
}




/**
 * A record of an event made for purposes of maintaining a security log. Typical uses include detection of intrusion attempts and monitoring for inappropriate usage.
 */
class AuditEventAgent(
    val requestor: BooleanType): BackboneElement() {


    /**
     * Specification of the participation type the user plays when performing the event.
     */
    var type: CodeableConcept? = null



    /**
     * The security role that the user was acting under, that come from local codes defined by the access control security system (e.g. RBAC, ABAC) used in the local context.
     */
    var role: List<CodeableConcept>? = null



    /**
     * Reference to who this agent is that was involved in the event.
     */
    var who: Reference? = null

    @JsonIgnore
    var whoTarget: Resource? = null

    /**
     * Alternative agent Identifier. For a human, this should be a user identifier text string from authentication system. This identifier would be one known to a common authentication system (e.g. single sign-on), if available.
     */
    var altId: StringType? = null



    /**
     * Human-meaningful name for the agent.
     */
    var name: StringType? = null



    /**
     * Where the event occurred.
     */
    var location: Reference? = null

    @JsonIgnore
    var locationTarget: Resource? = null

    /**
     * The policy or plan that authorized the activity being recorded. Typically, a single activity may have multiple applicable policies, such as patient consent, guarantor funding, etc. The policy would also indicate the security token used.
     */
    var policy: List<UriType>? = null



    /**
     * Type of media involved. Used when the event is about exporting/importing onto media.
     */
    var media: Coding? = null



    /**
     * Logical network location for application activity, if the activity has a network location.
     */
    var network: AuditEventNetwork? = null



    /**
     * The reason (purpose of use), specific to this agent, that was used during the event being recorded.
     */
    var purposeOfUse: List<CodeableConcept>? = null




}

/**
 * The type of network access point of this agent in the audit event.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class AuditEventAgentNetworkType(
    @JsonValue val text: String) {
    UNDERSCORE_1("1"),
    UNDERSCORE_2("2"),
    UNDERSCORE_3("3"),
    UNDERSCORE_4("4"),
    UNDERSCORE_5("5")
}




/**
 * A record of an event made for purposes of maintaining a security log. Typical uses include detection of intrusion attempts and monitoring for inappropriate usage.
 */
class AuditEventDetail(
    val type: StringType): BackboneElement() {


    /**
     *
     */
    var valueString: StringType? = null



    /**
     *
     */
    var valueBase64Binary: Base64BinaryType? = null




}

/**
 * A record of an event made for purposes of maintaining a security log. Typical uses include detection of intrusion attempts and monitoring for inappropriate usage.
 */
class AuditEventEntity: BackboneElement()
{


    /**
     * Identifies a specific instance of the entity. The reference should be version specific.
     */
    var what: Reference? = null

    @JsonIgnore
    var whatTarget: Resource? = null

    /**
     * The type of the object that was involved in this audit event.
     */
    var type: Coding? = null



    /**
     * Code representing the role the entity played in the event being audited.
     */
    var role: Coding? = null



    /**
     * Identifier for the data life-cycle stage for the entity.
     */
    var lifecycle: Coding? = null



    /**
     * Security labels for the identified entity.
     */
    var securityLabel: List<Coding>? = null



    /**
     * A name of the entity in the audit event.
     */
    var name: StringType? = null



    /**
     * Text that describes the entity in more detail.
     */
    var description: StringType? = null



    /**
     * The query parameters for a query-type entities.
     */
    var query: Base64BinaryType? = null



    /**
     * Tagged value pairs for conveying additional information about the entity.
     */
    var detail: List<AuditEventDetail>? = null




}

/**
 * A record of an event made for purposes of maintaining a security log. Typical uses include detection of intrusion attempts and monitoring for inappropriate usage.
 */
class AuditEventNetwork: BackboneElement()
{


    /**
     * An identifier for the network access point of the user device for the audit event.
     */
    var address: StringType? = null



    /**
     * An identifier for the type of network access point that originated the audit event.
     */
    var type: AuditEventAgentNetworkType? = null




}

/**
 * Indicates whether the event succeeded or failed.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class AuditEventOutcome(
    @JsonValue val text: String) {
    UNDERSCORE_0("0"),
    UNDERSCORE_4("4"),
    UNDERSCORE_8("8"),
    UNDERSCORE_12("12")
}




/**
 * A record of an event made for purposes of maintaining a security log. Typical uses include detection of intrusion attempts and monitoring for inappropriate usage.
 */
class AuditEventSource(
    val observer: Reference): BackboneElement() {


    /**
     * Logical source location within the healthcare enterprise network.  For example, a hospital or other provider location within a multi-entity provider group.
     */
    var site: StringType? = null



    /**
     * Code specifying the type of source where event originated.
     */
    var type: List<Coding>? = null




}

/**
 * Base definition for all elements that are defined inside a resource - but not those in a data type.
 * If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions
 */
open class BackboneElement: Element()
{


    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    var modifierExtension: List<Extension>? = null




}

/**
 * A stream of bytes
 * A stream of bytes, base64 encoded
 * If the element is present, it must have either a @value, an @id, or extensions
 */
data class Base64BinaryType(@JsonValue val value: String) {
    companion object {
        @JvmStatic
        @JsonCreator
        fun create(value: String) = Base64BinaryType(value)
    }
    fun toByteArray(): ByteArray = Base64.getDecoder().decode(value.toByteArray())
}



/**
 * Basic is used for handling concepts not yet defined in FHIR, narrative-only resources that don't map to an existing resource, and custom resources not appropriate for inclusion in the FHIR specification.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class Basic(
    val code: CodeableConcept): DomainResource() {


    /**
     * Identifier assigned to the resource for business purposes, outside the context of FHIR.
     */
    var identifier: List<Identifier>? = null



    /**
     * Identifies the patient, practitioner, device or any other resource that is the "focus" of this resource.
     */
    var subject: Reference? = null

    @JsonIgnore
    var subjectTarget: Resource? = null

    /**
     * Identifies when the resource was first created.
     */
    var created: DateType? = null



    /**
     * Indicates who was responsible for creating the resource instance.
     */
    var author: Reference? = null

    @JsonIgnore
    var authorTarget: Resource? = null


}

/**
 * A resource that represents the data of a single raw artifact as digital content accessible in its native format.  A Binary resource can contain any content, whether text, image, pdf, zip archive, etc.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class Binary(
    val contentType: CodeType): Resource() {


    /**
     * This element identifies another resource that can be used as a proxy of the security sensitivity to use when deciding and enforcing access control rules for the Binary resource. Given that the Binary resource contains very few elements that can be used to determine the sensitivity of the data and relationships to individuals, the referenced resource stands in as a proxy equivalent for this purpose. This referenced resource may be related to the Binary (e.g. Media, DocumentReference), or may be some non-related Resource purely as a security proxy. E.g. to identify that the binary resource relates to a patient, and access should only be granted to applications that have access to the patient.
     */
    var securityContext: Reference? = null

    @JsonIgnore
    var securityContextTarget: Resource? = null

    /**
     * The actual content, base64 encoded.
     */
    var data: Base64BinaryType? = null




}

/**
 * Indication of the degree of conformance expectations associated with a binding.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class BindingStrength(
    @JsonValue val text: String) {
    REQUIRED("required"),
    EXTENSIBLE("extensible"),
    PREFERRED("preferred"),
    EXAMPLE("example")
}




/**
 * A material substance originating from a biological entity intended to be transplanted or infused
 * into another (possibly the same) biological entity.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class BiologicallyDerivedProduct: DomainResource()
{


    /**
     * This records identifiers associated with this biologically derived product instance that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate (e.g. in CDA documents, or in written / printed documentation).
     */
    var identifier: List<Identifier>? = null



    /**
     * Broad category of this product.
     */
    var productCategory: BiologicallyDerivedProductCategory? = null



    /**
     * A code that identifies the kind of this biologically derived product (SNOMED Ctcode).
     */
    var productCode: CodeableConcept? = null



    /**
     * Whether the product is currently available.
     */
    var status: BiologicallyDerivedProductStatus? = null



    /**
     * Procedure request to obtain this biologically derived product.
     */
    var request: List<Reference>? = null

    @JsonIgnore
    var requestTarget: List<Resource>? = null

    /**
     * Number of discrete units within this product.
     */
    var quantity: IntegerType? = null



    /**
     * Parent product (if any).
     */
    var parent: List<Reference>? = null

    @JsonIgnore
    var parentTarget: List<Resource>? = null

    /**
     * How this product was collected.
     */
    var collection: BiologicallyDerivedProductCollection? = null



    /**
     * Any processing of the product during collection that does not change the fundamental nature of the product. For example adding anti-coagulants during the collection of Peripheral Blood Stem Cells.
     */
    var processing: List<BiologicallyDerivedProductProcessing>? = null



    /**
     * Any manipulation of product post-collection that is intended to alter the product.  For example a buffy-coat enrichment or CD8 reduction of Peripheral Blood Stem Cells to make it more suitable for infusion.
     */
    var manipulation: BiologicallyDerivedProductManipulation? = null



    /**
     * Product storage.
     */
    var storage: List<BiologicallyDerivedProductStorage>? = null




}

/**
 * Biologically Derived Product Category.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class BiologicallyDerivedProductCategory(
    @JsonValue val text: String) {
    ORGAN("organ"),
    TISSUE("tissue"),
    FLUID("fluid"),
    CELLS("cells"),
    BIOLOGICAL_AGENT("biologicalAgent")
}




/**
 * A material substance originating from a biological entity intended to be transplanted or infused
 * into another (possibly the same) biological entity.
 */
class BiologicallyDerivedProductCollection: BackboneElement()
{


    /**
     * Healthcare professional who is performing the collection.
     */
    var collector: Reference? = null

    @JsonIgnore
    var collectorTarget: Resource? = null

    /**
     * The patient or entity, such as a hospital or vendor in the case of a processed/manipulated/manufactured product, providing the product.
     */
    var source: Reference? = null

    @JsonIgnore
    var sourceTarget: Resource? = null

    /**
     *
     */
    var collectedDateTime: DateTimeType? = null



    /**
     *
     */
    var collectedPeriod: Period? = null




}

/**
 * A material substance originating from a biological entity intended to be transplanted or infused
 * into another (possibly the same) biological entity.
 */
class BiologicallyDerivedProductManipulation: BackboneElement()
{


    /**
     * Description of manipulation.
     */
    var description: StringType? = null



    /**
     *
     */
    var timeDateTime: DateTimeType? = null



    /**
     *
     */
    var timePeriod: Period? = null




}

/**
 * A material substance originating from a biological entity intended to be transplanted or infused
 * into another (possibly the same) biological entity.
 */
class BiologicallyDerivedProductProcessing: BackboneElement()
{


    /**
     * Description of of processing.
     */
    var description: StringType? = null



    /**
     * Procesing code.
     */
    var procedure: CodeableConcept? = null



    /**
     * Substance added during processing.
     */
    var additive: Reference? = null

    @JsonIgnore
    var additiveTarget: Resource? = null

    /**
     *
     */
    var timeDateTime: DateTimeType? = null



    /**
     *
     */
    var timePeriod: Period? = null




}

/**
 * Biologically Derived Product Status.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class BiologicallyDerivedProductStatus(
    @JsonValue val text: String) {
    AVAILABLE("available"),
    UNAVAILABLE("unavailable")
}




/**
 * A material substance originating from a biological entity intended to be transplanted or infused
 * into another (possibly the same) biological entity.
 */
class BiologicallyDerivedProductStorage: BackboneElement()
{


    /**
     * Description of storage.
     */
    var description: StringType? = null



    /**
     * Storage temperature.
     */
    var temperature: DecimalType? = null



    /**
     * Temperature scale used.
     */
    var scale: BiologicallyDerivedProductStorageScale? = null



    /**
     * Storage timeperiod.
     */
    var duration: Period? = null




}

/**
 * BiologicallyDerived Product Storage Scale.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class BiologicallyDerivedProductStorageScale(
    @JsonValue val text: String) {
    FARENHEIT("farenheit"),
    CELSIUS("celsius"),
    KELVIN("kelvin")
}




/**
 * Record details about an anatomical structure.  This resource may be used when a coded concept does not provide the necessary detail needed for the use case.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class BodyStructure(
    val patient: Reference): DomainResource() {


    /**
     * Identifier for this instance of the anatomical structure.
     */
    var identifier: List<Identifier>? = null



    /**
     * Whether this body site is in active use.
     */
    var active: BooleanType? = null



    /**
     * The kind of structure being represented by the body structure at `BodyStructure.location`.  This can define both normal and abnormal morphologies.
     */
    var morphology: CodeableConcept? = null



    /**
     * The anatomical location or region of the specimen, lesion, or body structure.
     */
    var location: CodeableConcept? = null



    /**
     * Qualifier to refine the anatomical location.  These include qualifiers for laterality, relative location, directionality, number, and plane.
     */
    var locationQualifier: List<CodeableConcept>? = null



    /**
     * A summary, characterization or explanation of the body structure.
     */
    var description: StringType? = null



    /**
     * Image or images used to identify a location.
     */
    var image: List<Attachment>? = null




}

/**
 * Value of "true" or "false"
 * If the element is present, it must have either a @value, an @id, or extensions
 */
data class BooleanType(@JsonValue val value: Boolean) {
    companion object {
        @JvmStatic
        @JsonCreator
        fun create(value: Boolean) = BooleanType(value)
    }
}




/**
 * A container for a collection of resources.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class Bundle(
    val type: BundleType): Resource() {


    /**
     * A persistent identifier for the bundle that won't change as a bundle is copied from server to server.
     */
    var identifier: Identifier? = null



    /**
     * The date/time that the bundle was assembled - i.e. when the resources were placed in the bundle.
     */
    var timestamp: InstantType? = null



    /**
     * If a set of search matches, this is the total number of entries of type 'match' across all pages in the search.  It does not include search.mode = 'include' or 'outcome' entries and it does not provide a count of the number of entries in the Bundle.
     */
    var total: UnsignedIntType? = null



    /**
     * A series of links that provide context to this bundle.
     */
    var link: List<BundleLink>? = null



    /**
     * An entry in a bundle resource - will either contain a resource or information about a resource (transactions and history only).
     */
    var entry: List<BundleEntry>? = null



    /**
     * Digital Signature - base64 encoded. XML-DSig or a JWT.
     */
    var signature: Signature? = null




}

/**
 * A container for a collection of resources.
 */
class BundleEntry: BackboneElement()
{


    /**
     * A series of links that provide context to this entry.
     */
    var link: List<BundleLink>? = null



    /**
     * The Absolute URL for the resource.  The fullUrl SHALL NOT disagree with the id in the resource - i.e. if the fullUrl is not a urn:uuid, the URL shall be version-independent URL consistent with the Resource.id. The fullUrl is a version independent reference to the resource. The fullUrl element SHALL have a value except that:
     * * fullUrl can be empty on a POST (although it does not need to when specifying a temporary id for reference in the bundle)
     * * Results from operations might involve resources that are not identified.
     */
    var fullUrl: UriType? = null



    /**
     * The Resource for the entry. The purpose/meaning of the resource is determined by the Bundle.type.
     */
    var resource: Resource? = null



    /**
     * Information about the search process that lead to the creation of this entry.
     */
    var search: BundleSearch? = null



    /**
     * Additional information about how this entry should be processed as part of a transaction or batch.  For history, it shows how the entry was processed to create the version contained in the entry.
     */
    var request: BundleRequest? = null



    /**
     * Indicates the results of processing the corresponding 'request' entry in the batch or transaction being responded to or what the results of an operation where when returning history.
     */
    var response: BundleResponse? = null




}

/**
 * A container for a collection of resources.
 */
class BundleLink(
    val relation: StringType,
    val url: UriType): BackboneElement()

/**
 * A container for a collection of resources.
 */
class BundleRequest(
    val method: HTTPVerb,
    val url: UriType): BackboneElement() {


    /**
     * If the ETag values match, return a 304 Not Modified status. See the API documentation for ["Conditional Read"](http.html#cread).
     */
    var ifNoneMatch: StringType? = null



    /**
     * Only perform the operation if the last updated date matches. See the API documentation for ["Conditional Read"](http.html#cread).
     */
    var ifModifiedSince: InstantType? = null



    /**
     * Only perform the operation if the Etag value matches. For more information, see the API section ["Managing Resource Contention"](http.html#concurrency).
     */
    var ifMatch: StringType? = null



    /**
     * Instruct the server not to perform the create if a specified resource already exists. For further information, see the API documentation for ["Conditional Create"](http.html#ccreate). This is just the query portion of the URL - what follows the "?" (not including the "?").
     */
    var ifNoneExist: StringType? = null




}

/**
 * A container for a collection of resources.
 */
class BundleResponse(
    val status: StringType): BackboneElement() {


    /**
     * The location header created by processing this operation, populated if the operation returns a location.
     */
    var location: UriType? = null



    /**
     * The Etag for the resource, if the operation for the entry produced a versioned resource (see [Resource Metadata and Versioning](http.html#versioning) and [Managing Resource Contention](http.html#concurrency)).
     */
    var etag: StringType? = null



    /**
     * The date/time that the resource was modified on the server.
     */
    var lastModified: InstantType? = null



    /**
     * An OperationOutcome containing hints and warnings produced as part of processing this entry in a batch or transaction.
     */
    var outcome: Resource? = null




}

/**
 * A container for a collection of resources.
 */
class BundleSearch: BackboneElement()
{


    /**
     * Why this entry is in the result set - whether it's included as a match or because of an _include requirement, or to convey information or warning information about the search process.
     */
    var mode: SearchEntryMode? = null



    /**
     * When searching, the server's search ranking score for the entry.
     */
    var score: DecimalType? = null




}

/**
 * Indicates the purpose of a bundle - how it is intended to be used.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class BundleType(
    @JsonValue val text: String) {
    DOCUMENT("document"),
    MESSAGE("message"),
    TRANSACTION("transaction"),
    TRANSACTION_RESPONSE("transaction-response"),
    BATCH("batch"),
    BATCH_RESPONSE("batch-response"),
    HISTORY("history"),
    SEARCHSET("searchset"),
    COLLECTION("collection")
}




/**
 * A URI that is a reference to a canonical URL on a FHIR resource
 * see [Canonical References](references.html#canonical)
 * If the element is present, it must have either a @value, an @id referenced from the Narrative, or extensions
 */
data class CanonicalType(@JsonValue val value: String) {
    companion object {
        @JvmStatic
        @JsonCreator
        fun create(value: String) = CanonicalType(value)
    }
}



/**
 * A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server for a particular version of FHIR that may be used as a statement of actual server functionality or a statement of required or desired server implementation.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class CapabilityStatement(
    val status: PublicationStatus,
    val date: DateTimeType,
    val kind: CapabilityStatementKind,
    val fhirVersion: FHIRVersion,
    val format: List<CodeType>): DomainResource() {


    /**
     * An absolute URI that is used to identify this capability statement when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which at which an authoritative instance of this capability statement is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the capability statement is stored on different servers.
     */
    var url: UriType? = null



    /**
     * The identifier that is used to identify this version of the capability statement when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the capability statement author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
     */
    var version: StringType? = null



    /**
     * A natural language name identifying the capability statement. This name should be usable as an identifier for the module by machine processing applications such as code generation.
     */
    var name: StringType? = null



    /**
     * A short, descriptive, user-friendly title for the capability statement.
     */
    var title: StringType? = null



    /**
     * A Boolean value to indicate that this capability statement is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
     */
    var experimental: BooleanType? = null



    /**
     * The name of the organization or individual that published the capability statement.
     */
    var publisher: StringType? = null



    /**
     * Contact details to assist a user in finding and communicating with the publisher.
     */
    var contact: List<ContactDetail>? = null



    /**
     * A free text natural language description of the capability statement from a consumer's perspective. Typically, this is used when the capability statement describes a desired rather than an actual solution, for example as a formal expression of requirements as part of an RFP.
     */
    var description: MarkdownType? = null



    /**
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate capability statement instances.
     */
    var useContext: List<UsageContext>? = null



    /**
     * A legal or geographic region in which the capability statement is intended to be used.
     */
    var jurisdiction: List<CodeableConcept>? = null



    /**
     * Explanation of why this capability statement is needed and why it has been designed as it has.
     */
    var purpose: MarkdownType? = null



    /**
     * A copyright statement relating to the capability statement and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the capability statement.
     */
    var copyright: MarkdownType? = null



    /**
     * Reference to a canonical URL of another CapabilityStatement that this software implements. This capability statement is a published API description that corresponds to a business service. The server may actually implement a subset of the capability statement it claims to implement, so the capability statement must specify the full capability details.
     */
    var instantiates: List<CanonicalType>? = null



    /**
     * Reference to a canonical URL of another CapabilityStatement that this software adds to. The capability statement automatically includes everything in the other statement, and it is not duplicated, though the server may repeat the same resources, interactions and operations to add additional details to them.
     */
    var imports: List<CanonicalType>? = null



    /**
     * Software that is covered by this capability statement.  It is used when the capability statement describes the capabilities of a particular software version, independent of an installation.
     */
    var software: CapabilityStatementSoftware? = null



    /**
     * Identifies a specific implementation instance that is described by the capability statement - i.e. a particular installation, rather than the capabilities of a software program.
     */
    var implementation: CapabilityStatementImplementation? = null



    /**
     * A list of the patch formats supported by this implementation using their content types.
     */
    var patchFormat: List<CodeType>? = null



    /**
     * A list of implementation guides that the server does (or should) support in their entirety.
     */
    var implementationGuide: List<CanonicalType>? = null



    /**
     * A definition of the restful capabilities of the solution, if any.
     */
    var rest: List<CapabilityStatementRest>? = null



    /**
     * A description of the messaging capabilities of the solution.
     */
    var messaging: List<CapabilityStatementMessaging>? = null



    /**
     * A document definition.
     */
    var document: List<CapabilityStatementDocument>? = null




}

/**
 * A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server for a particular version of FHIR that may be used as a statement of actual server functionality or a statement of required or desired server implementation.
 */
class CapabilityStatementDocument(
    val mode: DocumentMode,
    val profile: CanonicalType): BackboneElement() {


    /**
     * A description of how the application supports or uses the specified document profile.  For example, when documents are created, what action is taken with consumed documents, etc.
     */
    var documentation: MarkdownType? = null




}

/**
 * A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server for a particular version of FHIR that may be used as a statement of actual server functionality or a statement of required or desired server implementation.
 */
class CapabilityStatementEndpoint(
    val protocol: Coding,
    val address: UrlType): BackboneElement()

/**
 * A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server for a particular version of FHIR that may be used as a statement of actual server functionality or a statement of required or desired server implementation.
 */
class CapabilityStatementImplementation(
    val description: StringType): BackboneElement() {


    /**
     * An absolute base URL for the implementation.  This forms the base for REST interfaces as well as the mailbox and document interfaces.
     */
    var url: UrlType? = null



    /**
     * The organization responsible for the management of the instance and oversight of the data on the server at the specified URL.
     */
    var custodian: Reference? = null

    @JsonIgnore
    var custodianTarget: Resource? = null


}

/**
 * A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server for a particular version of FHIR that may be used as a statement of actual server functionality or a statement of required or desired server implementation.
 */
class CapabilityStatementInteraction(
    val code: TypeRestfulInteraction): BackboneElement() {


    /**
     * Guidance specific to the implementation of this operation, such as 'delete is a logical delete' or 'updates are only allowed with version id' or 'creates permitted from pre-authorized certificates only'.
     */
    var documentation: MarkdownType? = null




}

/**
 * A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server for a particular version of FHIR that may be used as a statement of actual server functionality or a statement of required or desired server implementation.
 */
class CapabilityStatementInteraction1(
    val code: SystemRestfulInteraction): BackboneElement() {


    /**
     * Guidance specific to the implementation of this operation, such as limitations on the kind of transactions allowed, or information about system wide search is implemented.
     */
    var documentation: MarkdownType? = null




}

/**
 * How a capability statement is intended to be used.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class CapabilityStatementKind(
    @JsonValue val text: String) {
    INSTANCE("instance"),
    CAPABILITY("capability"),
    REQUIREMENTS("requirements")
}




/**
 * A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server for a particular version of FHIR that may be used as a statement of actual server functionality or a statement of required or desired server implementation.
 */
class CapabilityStatementMessaging: BackboneElement()
{


    /**
     * An endpoint (network accessible address) to which messages and/or replies are to be sent.
     */
    var endpoint: List<CapabilityStatementEndpoint>? = null



    /**
     * Length if the receiver's reliable messaging cache in minutes (if a receiver) or how long the cache length on the receiver should be (if a sender).
     */
    var reliableCache: UnsignedIntType? = null



    /**
     * Documentation about the system's messaging capabilities for this endpoint not otherwise documented by the capability statement.  For example, the process for becoming an authorized messaging exchange partner.
     */
    var documentation: MarkdownType? = null



    /**
     * References to message definitions for messages this system can send or receive.
     */
    var supportedMessage: List<CapabilityStatementSupportedMessage>? = null




}

/**
 * A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server for a particular version of FHIR that may be used as a statement of actual server functionality or a statement of required or desired server implementation.
 */
class CapabilityStatementOperation(
    val name: StringType,
    val definition: CanonicalType): BackboneElement() {


    /**
     * Documentation that describes anything special about the operation behavior, possibly detailing different behavior for system, type and instance-level invocation of the operation.
     */
    var documentation: MarkdownType? = null




}

/**
 * A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server for a particular version of FHIR that may be used as a statement of actual server functionality or a statement of required or desired server implementation.
 */
class CapabilityStatementResource(
    val type: CodeType): BackboneElement() {


    /**
     * A specification of the profile that describes the solution's overall support for the resource, including any constraints on cardinality, bindings, lengths or other limitations. See further discussion in [Using Profiles](profiling.html#profile-uses).
     */
    var profile: CanonicalType? = null



    /**
     * A list of profiles that represent different use cases supported by the system. For a server, "supported by the system" means the system hosts/produces a set of resources that are conformant to a particular profile, and allows clients that use its services to search using this profile and to find appropriate data. For a client, it means the system will search by this profile and process data according to the guidance implicit in the profile. See further discussion in [Using Profiles](profiling.html#profile-uses).
     */
    var supportedProfile: List<CanonicalType>? = null



    /**
     * Additional information about the resource type used by the system.
     */
    var documentation: MarkdownType? = null



    /**
     * Identifies a restful operation supported by the solution.
     */
    var interaction: List<CapabilityStatementInteraction>? = null



    /**
     * This field is set to no-version to specify that the system does not support (server) or use (client) versioning for this resource type. If this has some other value, the server must at least correctly track and populate the versionId meta-property on resources. If the value is 'versioned-update', then the server supports all the versioning features, including using e-tags for version integrity in the API.
     */
    var versioning: ResourceVersionPolicy? = null



    /**
     * A flag for whether the server is able to return past versions as part of the vRead operation.
     */
    var readHistory: BooleanType? = null



    /**
     * A flag to indicate that the server allows or needs to allow the client to create new identities on the server (that is, the client PUTs to a location where there is no existing resource). Allowing this operation means that the server allows the client to create new identities on the server.
     */
    var updateCreate: BooleanType? = null



    /**
     * A flag that indicates that the server supports conditional create.
     */
    var conditionalCreate: BooleanType? = null



    /**
     * A code that indicates how the server supports conditional read.
     */
    var conditionalRead: ConditionalReadStatus? = null



    /**
     * A flag that indicates that the server supports conditional update.
     */
    var conditionalUpdate: BooleanType? = null



    /**
     * A code that indicates how the server supports conditional delete.
     */
    var conditionalDelete: ConditionalDeleteStatus? = null



    /**
     * A set of flags that defines how references are supported.
     */
    var referencePolicy: List<ReferenceHandlingPolicy>? = null



    /**
     * A list of _include values supported by the server.
     */
    var searchInclude: List<StringType>? = null



    /**
     * A list of _revinclude (reverse include) values supported by the server.
     */
    var searchRevInclude: List<StringType>? = null



    /**
     * Search parameters for implementations to support and/or make use of - either references to ones defined in the specification, or additional ones defined for/by the implementation.
     */
    var searchParam: List<CapabilityStatementSearchParam>? = null



    /**
     * Definition of an operation or a named query together with its parameters and their meaning and type. Consult the definition of the operation for details about how to invoke the operation, and the parameters.
     */
    var operation: List<CapabilityStatementOperation>? = null




}

/**
 * A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server for a particular version of FHIR that may be used as a statement of actual server functionality or a statement of required or desired server implementation.
 */
class CapabilityStatementRest(
    val mode: RestfulCapabilityMode): BackboneElement() {


    /**
     * Information about the system's restful capabilities that apply across all applications, such as security.
     */
    var documentation: MarkdownType? = null



    /**
     * Information about security implementation from an interface perspective - what a client needs to know.
     */
    var security: CapabilityStatementSecurity? = null



    /**
     * A specification of the restful capabilities of the solution for a specific resource type.
     */
    var resource: List<CapabilityStatementResource>? = null



    /**
     * A specification of restful operations supported by the system.
     */
    var interaction: List<CapabilityStatementInteraction1>? = null



    /**
     * Search parameters that are supported for searching all resources for implementations to support and/or make use of - either references to ones defined in the specification, or additional ones defined for/by the implementation.
     */
    var searchParam: List<CapabilityStatementSearchParam>? = null



    /**
     * Definition of an operation or a named query together with its parameters and their meaning and type.
     */
    var operation: List<CapabilityStatementOperation>? = null



    /**
     * An absolute URI which is a reference to the definition of a compartment that the system supports. The reference is to a CompartmentDefinition resource by its canonical URL .
     */
    var compartment: List<CanonicalType>? = null




}

/**
 * A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server for a particular version of FHIR that may be used as a statement of actual server functionality or a statement of required or desired server implementation.
 */
class CapabilityStatementSearchParam(
    val name: StringType,
    val type: SearchParamType): BackboneElement() {


    /**
     * An absolute URI that is a formal reference to where this parameter was first defined, so that a client can be confident of the meaning of the search parameter (a reference to [[[SearchParameter.url]]]). This element SHALL be populated if the search parameter refers to a SearchParameter defined by the FHIR core specification or externally defined IGs.
     */
    var definition: CanonicalType? = null



    /**
     * This allows documentation of any distinct behaviors about how the search parameter is used.  For example, text matching algorithms.
     */
    var documentation: MarkdownType? = null




}

/**
 * A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server for a particular version of FHIR that may be used as a statement of actual server functionality or a statement of required or desired server implementation.
 */
class CapabilityStatementSecurity: BackboneElement()
{


    /**
     * Server adds CORS headers when responding to requests - this enables Javascript applications to use the server.
     */
    var cors: BooleanType? = null



    /**
     * Types of security services that are supported/required by the system.
     */
    var service: List<CodeableConcept>? = null



    /**
     * General description of how security works.
     */
    var description: MarkdownType? = null




}

/**
 * A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server for a particular version of FHIR that may be used as a statement of actual server functionality or a statement of required or desired server implementation.
 */
class CapabilityStatementSoftware(
    val name: StringType): BackboneElement() {


    /**
     * The version identifier for the software covered by this statement.
     */
    var version: StringType? = null



    /**
     * Date this version of the software was released.
     */
    var releaseDate: DateTimeType? = null




}

/**
 * A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server for a particular version of FHIR that may be used as a statement of actual server functionality or a statement of required or desired server implementation.
 */
class CapabilityStatementSupportedMessage(
    val mode: EventCapabilityMode,
    val definition: CanonicalType): BackboneElement()

/**
 * Describes the intention of how one or more practitioners intend to deliver care for a particular patient, group or community for a period of time, possibly limited to care for a specific condition or set of conditions.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class CarePlan(
    val status: RequestStatus,
    val intent: CarePlanIntent,
    val subject: Reference): DomainResource() {


    /**
     * Business identifiers assigned to this care plan by the performer or other systems which remain constant as the resource is updated and propagates from server to server.
     */
    var identifier: List<Identifier>? = null



    /**
     * The URL pointing to a FHIR-defined protocol, guideline, questionnaire or other definition that is adhered to in whole or in part by this CarePlan.
     */
    var instantiatesCanonical: List<CanonicalType>? = null



    /**
     * The URL pointing to an externally maintained protocol, guideline, questionnaire or other definition that is adhered to in whole or in part by this CarePlan.
     */
    var instantiatesUri: List<UriType>? = null



    /**
     * A care plan that is fulfilled in whole or in part by this care plan.
     */
    var basedOn: List<Reference>? = null

    @JsonIgnore
    var basedOnTarget: List<Resource>? = null

    /**
     * Completed or terminated care plan whose function is taken by this new care plan.
     */
    var replaces: List<Reference>? = null

    @JsonIgnore
    var replacesTarget: List<Resource>? = null

    /**
     * A larger care plan of which this particular care plan is a component or step.
     */
    var partOf: List<Reference>? = null

    @JsonIgnore
    var partOfTarget: List<Resource>? = null

    /**
     * Identifies what "kind" of plan this is to support differentiation between multiple co-existing plans; e.g. "Home health", "psychiatric", "asthma", "disease management", "wellness plan", etc.
     */
    var category: List<CodeableConcept>? = null



    /**
     * Human-friendly name for the care plan.
     */
    var title: StringType? = null



    /**
     * A description of the scope and nature of the plan.
     */
    var description: StringType? = null



    /**
     * The Encounter during which this CarePlan was created or to which the creation of this record is tightly associated.
     */
    var encounter: Reference? = null

    @JsonIgnore
    var encounterTarget: Resource? = null

    /**
     * Indicates when the plan did (or is intended to) come into effect and end.
     */
    var period: Period? = null



    /**
     * Represents when this particular CarePlan record was created in the system, which is often a system-generated date.
     */
    var created: DateTimeType? = null



    /**
     * When populated, the author is responsible for the care plan.  The care plan is attributed to the author.
     */
    var author: Reference? = null

    @JsonIgnore
    var authorTarget: Resource? = null

    /**
     * Identifies the individual(s) or organization who provided the contents of the care plan.
     */
    var contributor: List<Reference>? = null

    @JsonIgnore
    var contributorTarget: List<Resource>? = null

    /**
     * Identifies all people and organizations who are expected to be involved in the care envisioned by this plan.
     */
    var careTeam: List<Reference>? = null

    @JsonIgnore
    var careTeamTarget: List<Resource>? = null

    /**
     * Identifies the conditions/problems/concerns/diagnoses/etc. whose management and/or mitigation are handled by this plan.
     */
    var addresses: List<Reference>? = null

    @JsonIgnore
    var addressesTarget: List<Resource>? = null

    /**
     * Identifies portions of the patient's record that specifically influenced the formation of the plan.  These might include comorbidities, recent procedures, limitations, recent assessments, etc.
     */
    var supportingInfo: List<Reference>? = null

    @JsonIgnore
    var supportingInfoTarget: List<Resource>? = null

    /**
     * Describes the intended objective(s) of carrying out the care plan.
     */
    var goal: List<Reference>? = null

    @JsonIgnore
    var goalTarget: List<Resource>? = null

    /**
     * Identifies a planned action to occur as part of the plan.  For example, a medication to be used, lab tests to perform, self-monitoring, education, etc.
     */
    var activity: List<CarePlanActivity>? = null



    /**
     * General notes about the care plan not covered elsewhere.
     */
    var note: List<Annotation>? = null




}

/**
 * Describes the intention of how one or more practitioners intend to deliver care for a particular patient, group or community for a period of time, possibly limited to care for a specific condition or set of conditions.
 */
class CarePlanActivity: BackboneElement()
{


    /**
     * Identifies the outcome at the point when the status of the activity is assessed.  For example, the outcome of an education activity could be patient understands (or not).
     */
    var outcomeCodeableConcept: List<CodeableConcept>? = null



    /**
     * Details of the outcome or action resulting from the activity.  The reference to an "event" resource, such as Procedure or Encounter or Observation, is the result/outcome of the activity itself.  The activity can be conveyed using CarePlan.activity.detail OR using the CarePlan.activity.reference (a reference to a “request” resource).
     */
    var outcomeReference: List<Reference>? = null

    @JsonIgnore
    var outcomeReferenceTarget: List<Resource>? = null

    /**
     * Notes about the adherence/status/progress of the activity.
     */
    var progress: List<Annotation>? = null



    /**
     * The details of the proposed activity represented in a specific resource.
     */
    var reference: Reference? = null

    @JsonIgnore
    var referenceTarget: Resource? = null

    /**
     * A simple summary of a planned activity suitable for a general care plan system (e.g. form driven) that doesn't know about specific resources such as procedure etc.
     */
    var detail: CarePlanDetail? = null




}

/**
 * Resource types defined as part of FHIR that can be represented as in-line definitions of a care plan activity.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class CarePlanActivityKind(
    @JsonValue val text: String) {
    APPOINTMENT("Appointment"),
    COMMUNICATION_REQUEST("CommunicationRequest"),
    DEVICE_REQUEST("DeviceRequest"),
    MEDICATION_REQUEST("MedicationRequest"),
    NUTRITION_ORDER("NutritionOrder"),
    TASK("Task"),
    SERVICE_REQUEST("ServiceRequest"),
    VISION_PRESCRIPTION("VisionPrescription")
}




/**
 * Codes that reflect the current state of a care plan activity within its overall life cycle.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class CarePlanActivityStatus(
    @JsonValue val text: String) {
    NOT_STARTED("not-started"),
    SCHEDULED("scheduled"),
    IN_PROGRESS("in-progress"),
    ON_HOLD("on-hold"),
    COMPLETED("completed"),
    CANCELLED("cancelled"),
    STOPPED("stopped"),
    UNKNOWN("unknown"),
    ENTERED_IN_ERROR("entered-in-error")
}




/**
 * Describes the intention of how one or more practitioners intend to deliver care for a particular patient, group or community for a period of time, possibly limited to care for a specific condition or set of conditions.
 */
class CarePlanDetail(
    val status: CarePlanActivityStatus): BackboneElement() {


    /**
     * A description of the kind of resource the in-line definition of a care plan activity is representing.  The CarePlan.activity.detail is an in-line definition when a resource is not referenced using CarePlan.activity.reference.  For example, a MedicationRequest, a ServiceRequest, or a CommunicationRequest.
     */
    var kind: CarePlanActivityKind? = null



    /**
     * The URL pointing to a FHIR-defined protocol, guideline, questionnaire or other definition that is adhered to in whole or in part by this CarePlan activity.
     */
    var instantiatesCanonical: List<CanonicalType>? = null



    /**
     * The URL pointing to an externally maintained protocol, guideline, questionnaire or other definition that is adhered to in whole or in part by this CarePlan activity.
     */
    var instantiatesUri: List<UriType>? = null



    /**
     * Detailed description of the type of planned activity; e.g. what lab test, what procedure, what kind of encounter.
     */
    var code: CodeableConcept? = null



    /**
     * Provides the rationale that drove the inclusion of this particular activity as part of the plan or the reason why the activity was prohibited.
     */
    var reasonCode: List<CodeableConcept>? = null



    /**
     * Indicates another resource, such as the health condition(s), whose existence justifies this request and drove the inclusion of this particular activity as part of the plan.
     */
    var reasonReference: List<Reference>? = null

    @JsonIgnore
    var reasonReferenceTarget: List<Resource>? = null

    /**
     * Internal reference that identifies the goals that this activity is intended to contribute towards meeting.
     */
    var goal: List<Reference>? = null

    @JsonIgnore
    var goalTarget: List<Resource>? = null

    /**
     * Provides reason why the activity isn't yet started, is on hold, was cancelled, etc.
     */
    var statusReason: CodeableConcept? = null



    /**
     * If true, indicates that the described activity is one that must NOT be engaged in when following the plan.  If false, or missing, indicates that the described activity is one that should be engaged in when following the plan.
     */
    var doNotPerform: BooleanType? = null



    /**
     *
     */
    var scheduledTiming: Timing? = null



    /**
     *
     */
    var scheduledPeriod: Period? = null



    /**
     *
     */
    var scheduledString: StringType? = null



    /**
     * Identifies the facility where the activity will occur; e.g. home, hospital, specific clinic, etc.
     */
    var location: Reference? = null

    @JsonIgnore
    var locationTarget: Resource? = null

    /**
     * Identifies who's expected to be involved in the activity.
     */
    var performer: List<Reference>? = null

    @JsonIgnore
    var performerTarget: List<Resource>? = null

    /**
     *
     */
    var productCodeableConcept: CodeableConcept? = null



    /**
     *
     */
    var productReference: Reference? = null

    @JsonIgnore
    var productReferenceTarget: Resource? = null

    /**
     * Identifies the quantity expected to be consumed in a given day.
     */
    var dailyAmount: Quantity? = null



    /**
     * Identifies the quantity expected to be supplied, administered or consumed by the subject.
     */
    var quantity: Quantity? = null



    /**
     * This provides a textual description of constraints on the intended activity occurrence, including relation to other activities.  It may also include objectives, pre-conditions and end-conditions.  Finally, it may convey specifics about the activity such as body site, method, route, etc.
     */
    var description: StringType? = null




}

/**
 * Codes indicating the degree of authority/intentionality associated with a care plan.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class CarePlanIntent(
    @JsonValue val text: String) {
    PROPOSAL("proposal"),
    PLAN("plan"),
    ORDER("order"),
    OPTION("option")
}




/**
 * The Care Team includes all the people and organizations who plan to participate in the coordination and delivery of care for a patient.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class CareTeam: DomainResource()
{


    /**
     * Business identifiers assigned to this care team by the performer or other systems which remain constant as the resource is updated and propagates from server to server.
     */
    var identifier: List<Identifier>? = null



    /**
     * Indicates the current state of the care team.
     */
    var status: CareTeamStatus? = null



    /**
     * Identifies what kind of team.  This is to support differentiation between multiple co-existing teams, such as care plan team, episode of care team, longitudinal care team.
     */
    var category: List<CodeableConcept>? = null



    /**
     * A label for human use intended to distinguish like teams.  E.g. the "red" vs. "green" trauma teams.
     */
    var name: StringType? = null



    /**
     * Identifies the patient or group whose intended care is handled by the team.
     */
    var subject: Reference? = null

    @JsonIgnore
    var subjectTarget: Resource? = null

    /**
     * The Encounter during which this CareTeam was created or to which the creation of this record is tightly associated.
     */
    var encounter: Reference? = null

    @JsonIgnore
    var encounterTarget: Resource? = null

    /**
     * Indicates when the team did (or is intended to) come into effect and end.
     */
    var period: Period? = null



    /**
     * Identifies all people and organizations who are expected to be involved in the care team.
     */
    var participant: List<CareTeamParticipant>? = null



    /**
     * Describes why the care team exists.
     */
    var reasonCode: List<CodeableConcept>? = null



    /**
     * Condition(s) that this care team addresses.
     */
    var reasonReference: List<Reference>? = null

    @JsonIgnore
    var reasonReferenceTarget: List<Resource>? = null

    /**
     * The organization responsible for the care team.
     */
    var managingOrganization: List<Reference>? = null

    @JsonIgnore
    var managingOrganizationTarget: List<Resource>? = null

    /**
     * A central contact detail for the care team (that applies to all members).
     */
    var telecom: List<ContactPoint>? = null



    /**
     * Comments made about the CareTeam.
     */
    var note: List<Annotation>? = null




}

/**
 * The Care Team includes all the people and organizations who plan to participate in the coordination and delivery of care for a patient.
 */
class CareTeamParticipant: BackboneElement()
{


    /**
     * Indicates specific responsibility of an individual within the care team, such as "Primary care physician", "Trained social worker counselor", "Caregiver", etc.
     */
    var role: List<CodeableConcept>? = null



    /**
     * The specific person or organization who is participating/expected to participate in the care team.
     */
    var member: Reference? = null

    @JsonIgnore
    var memberTarget: Resource? = null

    /**
     * The organization of the practitioner.
     */
    var onBehalfOf: Reference? = null

    @JsonIgnore
    var onBehalfOfTarget: Resource? = null

    /**
     * Indicates when the specific member or organization did (or is intended to) come into effect and end.
     */
    var period: Period? = null




}

/**
 * Indicates the status of the care team.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class CareTeamStatus(
    @JsonValue val text: String) {
    PROPOSED("proposed"),
    ACTIVE("active"),
    SUSPENDED("suspended"),
    INACTIVE("inactive"),
    ENTERED_IN_ERROR("entered-in-error")
}




/**
 * Catalog entries are wrappers that contextualize items included in a catalog.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class CatalogEntry(
    val orderable: BooleanType,
    val referencedItem: Reference): DomainResource() {


    /**
     * Used in supporting different identifiers for the same product, e.g. manufacturer code and retailer code.
     */
    var identifier: List<Identifier>? = null



    /**
     * The type of item - medication, device, service, protocol or other.
     */
    var type: CodeableConcept? = null



    /**
     * Used in supporting related concepts, e.g. NDC to RxNorm.
     */
    var additionalIdentifier: List<Identifier>? = null



    /**
     * Classes of devices, or ATC for medication.
     */
    var classification: List<CodeableConcept>? = null



    /**
     * Used to support catalog exchange even for unsupported products, e.g. getting list of medications even if not prescribable.
     */
    var status: PublicationStatus? = null



    /**
     * The time period in which this catalog entry is expected to be active.
     */
    var validityPeriod: Period? = null



    /**
     * The date until which this catalog entry is expected to be active.
     */
    var validTo: DateTimeType? = null



    /**
     * Typically date of issue is different from the beginning of the validity. This can be used to see when an item was last updated.
     */
    var lastUpdated: DateTimeType? = null



    /**
     * Used for examplefor Out of Formulary, or any specifics.
     */
    var additionalCharacteristic: List<CodeableConcept>? = null



    /**
     * User for example for ATC classification, or.
     */
    var additionalClassification: List<CodeableConcept>? = null



    /**
     * Used for example, to point to a substance, or to a device used to administer a medication.
     */
    var relatedEntry: List<CatalogEntryRelatedEntry>? = null




}

/**
 * Catalog entries are wrappers that contextualize items included in a catalog.
 */
class CatalogEntryRelatedEntry(
    val relationtype: CatalogEntryRelationType,
    val item: Reference): BackboneElement()

/**
 * The type of relations between entries.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class CatalogEntryRelationType(
    @JsonValue val text: String) {
    TRIGGERS("triggers"),
    IS_REPLACED_BY("is-replaced-by")
}




/**
 * The resource ChargeItem describes the provision of healthcare provider products for a certain patient, therefore referring not only to the product, but containing in addition details of the provision, like date, time, amounts and participating organizations and persons. Main Usage of the ChargeItem is to enable the billing process and internal cost allocation.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class ChargeItem(
    val status: ChargeItemStatus,
    val code: CodeableConcept,
    val subject: Reference): DomainResource() {


    /**
     * Identifiers assigned to this event performer or other systems.
     */
    var identifier: List<Identifier>? = null



    /**
     * References the (external) source of pricing information, rules of application for the code this ChargeItem uses.
     */
    var definitionUri: List<UriType>? = null



    /**
     * References the source of pricing information, rules of application for the code this ChargeItem uses.
     */
    var definitionCanonical: List<CanonicalType>? = null



    /**
     * ChargeItems can be grouped to larger ChargeItems covering the whole set.
     */
    var partOf: List<Reference>? = null

    @JsonIgnore
    var partOfTarget: List<Resource>? = null

    /**
     * The encounter or episode of care that establishes the context for this event.
     */
    var context: Reference? = null

    @JsonIgnore
    var contextTarget: Resource? = null

    /**
     *
     */
    var occurrenceDateTime: DateTimeType? = null



    /**
     *
     */
    var occurrencePeriod: Period? = null



    /**
     *
     */
    var occurrenceTiming: Timing? = null



    /**
     * Indicates who or what performed or participated in the charged service.
     */
    var performer: List<ChargeItemPerformer>? = null



    /**
     * The organization requesting the service.
     */
    var performingOrganization: Reference? = null

    @JsonIgnore
    var performingOrganizationTarget: Resource? = null

    /**
     * The organization performing the service.
     */
    var requestingOrganization: Reference? = null

    @JsonIgnore
    var requestingOrganizationTarget: Resource? = null

    /**
     * The financial cost center permits the tracking of charge attribution.
     */
    var costCenter: Reference? = null

    @JsonIgnore
    var costCenterTarget: Resource? = null

    /**
     * Quantity of which the charge item has been serviced.
     */
    var quantity: Quantity? = null



    /**
     * The anatomical location where the related service has been applied.
     */
    var bodysite: List<CodeableConcept>? = null



    /**
     * Factor overriding the factor determined by the rules associated with the code.
     */
    var factorOverride: DecimalType? = null



    /**
     * Total price of the charge overriding the list price associated with the code.
     */
    var priceOverride: Money? = null



    /**
     * If the list price or the rule-based factor associated with the code is overridden, this attribute can capture a text to indicate the  reason for this action.
     */
    var overrideReason: StringType? = null



    /**
     * The device, practitioner, etc. who entered the charge item.
     */
    var enterer: Reference? = null

    @JsonIgnore
    var entererTarget: Resource? = null

    /**
     * Date the charge item was entered.
     */
    var enteredDate: DateTimeType? = null



    /**
     * Describes why the event occurred in coded or textual form.
     */
    var reason: List<CodeableConcept>? = null



    /**
     * Indicated the rendered service that caused this charge.
     */
    var service: List<Reference>? = null

    @JsonIgnore
    var serviceTarget: List<Resource>? = null

    /**
     *
     */
    var productReference: Reference? = null

    @JsonIgnore
    var productReferenceTarget: Resource? = null

    /**
     *
     */
    var productCodeableConcept: CodeableConcept? = null



    /**
     * Account into which this ChargeItems belongs.
     */
    var account: List<Reference>? = null

    @JsonIgnore
    var accountTarget: List<Resource>? = null

    /**
     * Comments made about the event by the performer, subject or other participants.
     */
    var note: List<Annotation>? = null



    /**
     * Further information supporting this charge.
     */
    var supportingInformation: List<Reference>? = null

    @JsonIgnore
    var supportingInformationTarget: List<Resource>? = null


}

/**
 * The ChargeItemDefinition resource provides the properties that apply to the (billing) codes necessary to calculate costs and prices. The properties may differ largely depending on type and realm, therefore this resource gives only a rough structure and requires profiling for each type of billing code system.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class ChargeItemDefinition(
    val url: UriType,
    val status: PublicationStatus): DomainResource() {


    /**
     * A formal identifier that is used to identify this charge item definition when it is represented in other formats, or referenced in a specification, model, design or an instance.
     */
    var identifier: List<Identifier>? = null



    /**
     * The identifier that is used to identify this version of the charge item definition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the charge item definition author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence. To provide a version consistent with the Decision Support Service specification, use the format Major.Minor.Revision (e.g. 1.0.0). For more information on versioning knowledge assets, refer to the Decision Support Service specification. Note that a version is required for non-experimental active assets.
     */
    var version: StringType? = null



    /**
     * A short, descriptive, user-friendly title for the charge item definition.
     */
    var title: StringType? = null



    /**
     * The URL pointing to an externally-defined charge item definition that is adhered to in whole or in part by this definition.
     */
    var derivedFromUri: List<UriType>? = null



    /**
     * A larger definition of which this particular definition is a component or step.
     */
    var partOf: List<CanonicalType>? = null



    /**
     * As new versions of a protocol or guideline are defined, allows identification of what versions are replaced by a new instance.
     */
    var replaces: List<CanonicalType>? = null



    /**
     * A Boolean value to indicate that this charge item definition is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
     */
    var experimental: BooleanType? = null



    /**
     * The date  (and optionally time) when the charge item definition was published. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the charge item definition changes.
     */
    var date: DateTimeType? = null



    /**
     * The name of the organization or individual that published the charge item definition.
     */
    var publisher: StringType? = null



    /**
     * Contact details to assist a user in finding and communicating with the publisher.
     */
    var contact: List<ContactDetail>? = null



    /**
     * A free text natural language description of the charge item definition from a consumer's perspective.
     */
    var description: MarkdownType? = null



    /**
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate charge item definition instances.
     */
    var useContext: List<UsageContext>? = null



    /**
     * A legal or geographic region in which the charge item definition is intended to be used.
     */
    var jurisdiction: List<CodeableConcept>? = null



    /**
     * A copyright statement relating to the charge item definition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the charge item definition.
     */
    var copyright: MarkdownType? = null



    /**
     * The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage.
     */
    var approvalDate: DateType? = null



    /**
     * The date on which the resource content was last reviewed. Review happens periodically after approval but does not change the original approval date.
     */
    var lastReviewDate: DateType? = null



    /**
     * The period during which the charge item definition content was or is planned to be in active use.
     */
    var effectivePeriod: Period? = null



    /**
     * The defined billing details in this resource pertain to the given billing code.
     */
    var code: CodeableConcept? = null



    /**
     * The defined billing details in this resource pertain to the given product instance(s).
     */
    var instance: List<Reference>? = null

    @JsonIgnore
    var instanceTarget: List<Resource>? = null

    /**
     * Expressions that describe applicability criteria for the billing code.
     */
    var applicability: List<ChargeItemDefinitionApplicability>? = null



    /**
     * Group of properties which are applicable under the same conditions. If no applicability rules are established for the group, then all properties always apply.
     */
    var propertyGroup: List<ChargeItemDefinitionPropertyGroup>? = null




}

/**
 * The ChargeItemDefinition resource provides the properties that apply to the (billing) codes necessary to calculate costs and prices. The properties may differ largely depending on type and realm, therefore this resource gives only a rough structure and requires profiling for each type of billing code system.
 */
class ChargeItemDefinitionApplicability: BackboneElement()
{


    /**
     * A brief, natural language description of the condition that effectively communicates the intended semantics.
     */
    var description: StringType? = null



    /**
     * The media type of the language for the expression, e.g. "text/cql" for Clinical Query Language expressions or "text/fhirpath" for FHIRPath expressions.
     */
    var language: StringType? = null



    /**
     * An expression that returns true or false, indicating whether the condition is satisfied. When using FHIRPath expressions, the %context environment variable must be replaced at runtime with the ChargeItem resource to which this definition is applied.
     */
    var expression: StringType? = null




}

/**
 * The ChargeItemDefinition resource provides the properties that apply to the (billing) codes necessary to calculate costs and prices. The properties may differ largely depending on type and realm, therefore this resource gives only a rough structure and requires profiling for each type of billing code system.
 */
class ChargeItemDefinitionPriceComponent(
    val type: InvoicePriceComponentType): BackboneElement() {


    /**
     * A code that identifies the component. Codes may be used to differentiate between kinds of taxes, surcharges, discounts etc.
     */
    var code: CodeableConcept? = null



    /**
     * The factor that has been applied on the base price for calculating this component.
     */
    var factor: DecimalType? = null



    /**
     * The amount calculated for this component.
     */
    var amount: Money? = null




}

/**
 * The ChargeItemDefinition resource provides the properties that apply to the (billing) codes necessary to calculate costs and prices. The properties may differ largely depending on type and realm, therefore this resource gives only a rough structure and requires profiling for each type of billing code system.
 */
class ChargeItemDefinitionPropertyGroup: BackboneElement()
{


    /**
     * Expressions that describe applicability criteria for the priceComponent.
     */
    var applicability: List<ChargeItemDefinitionApplicability>? = null



    /**
     * The price for a ChargeItem may be calculated as a base price with surcharges/deductions that apply in certain conditions. A ChargeItemDefinition resource that defines the prices, factors and conditions that apply to a billing code is currently under development. The priceComponent element can be used to offer transparency to the recipient of the Invoice of how the prices have been calculated.
     */
    var priceComponent: List<ChargeItemDefinitionPriceComponent>? = null




}

/**
 * The resource ChargeItem describes the provision of healthcare provider products for a certain patient, therefore referring not only to the product, but containing in addition details of the provision, like date, time, amounts and participating organizations and persons. Main Usage of the ChargeItem is to enable the billing process and internal cost allocation.
 */
class ChargeItemPerformer(
    val actor: Reference): BackboneElement() {


    /**
     * Describes the type of performance or participation(e.g. primary surgeon, anesthesiologiest, etc.).
     */
    var function: CodeableConcept? = null




}

/**
 * Codes identifying the lifecycle stage of a ChargeItem.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class ChargeItemStatus(
    @JsonValue val text: String) {
    PLANNED("planned"),
    BILLABLE("billable"),
    NOT_BILLABLE("not-billable"),
    ABORTED("aborted"),
    BILLED("billed"),
    ENTERED_IN_ERROR("entered-in-error"),
    UNKNOWN("unknown")
}




/**
 * A provider issued list of professional services and products which have been provided, or are to be provided, to a patient which is sent to an insurer for reimbursement.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class Claim(
    val status: FinancialResourceStatusCodes,
    val type: CodeableConcept,
    val use: Use,
    val patient: Reference,
    val created: DateTimeType,
    val provider: Reference,
    val priority: CodeableConcept,
    val insurance: List<ClaimInsurance>): DomainResource() {


    /**
     * A unique identifier assigned to this claim.
     */
    var identifier: List<Identifier>? = null



    /**
     * A finer grained suite of claim type codes which may convey additional information such as Inpatient vs Outpatient and/or a specialty service.
     */
    var subType: CodeableConcept? = null



    /**
     * The period for which charges are being submitted.
     */
    var billablePeriod: Period? = null



    /**
     * Individual who created the claim, predetermination or preauthorization.
     */
    var enterer: Reference? = null

    @JsonIgnore
    var entererTarget: Resource? = null

    /**
     * The Insurer who is target of the request.
     */
    var insurer: Reference? = null

    @JsonIgnore
    var insurerTarget: Resource? = null

    /**
     * A code to indicate whether and for whom funds are to be reserved for future claims.
     */
    var fundsReserve: CodeableConcept? = null



    /**
     * Other claims which are related to this claim such as prior submissions or claims for related services or for the same event.
     */
    var related: List<ClaimRelated>? = null



    /**
     * Prescription to support the dispensing of pharmacy, device or vision products.
     */
    var prescription: Reference? = null

    @JsonIgnore
    var prescriptionTarget: Resource? = null

    /**
     * Original prescription which has been superseded by this prescription to support the dispensing of pharmacy services, medications or products.
     */
    var originalPrescription: Reference? = null

    @JsonIgnore
    var originalPrescriptionTarget: Resource? = null

    /**
     * The party to be reimbursed for cost of the products and services according to the terms of the policy.
     */
    var payee: ClaimPayee? = null



    /**
     * A reference to a referral resource.
     */
    var referral: Reference? = null

    @JsonIgnore
    var referralTarget: Resource? = null

    /**
     * Facility where the services were provided.
     */
    var facility: Reference? = null

    @JsonIgnore
    var facilityTarget: Resource? = null

    /**
     * The members of the team who provided the products and services.
     */
    var careTeam: List<ClaimCareTeam>? = null



    /**
     * Additional information codes regarding exceptions, special considerations, the condition, situation, prior or concurrent issues.
     */
    var supportingInfo: List<ClaimSupportingInfo>? = null



    /**
     * Information about diagnoses relevant to the claim items.
     */
    var diagnosis: List<ClaimDiagnosis>? = null



    /**
     * Procedures performed on the patient relevant to the billing items with the claim.
     */
    var procedure: List<ClaimProcedure>? = null



    /**
     * Details of an accident which resulted in injuries which required the products and services listed in the claim.
     */
    var accident: ClaimAccident? = null



    /**
     * A claim line. Either a simple  product or service or a 'group' of details which can each be a simple items or groups of sub-details.
     */
    var item: List<ClaimItem>? = null



    /**
     * The total value of the all the items in the claim.
     */
    var total: Money? = null




}

/**
 * A provider issued list of professional services and products which have been provided, or are to be provided, to a patient which is sent to an insurer for reimbursement.
 */
class ClaimAccident(
    val date: DateType): BackboneElement() {


    /**
     * The type or context of the accident event for the purposes of selection of potential insurance coverages and determination of coordination between insurers.
     */
    var type: CodeableConcept? = null



    /**
     *
     */
    var locationAddress: Address? = null



    /**
     *
     */
    var locationReference: Reference? = null

    @JsonIgnore
    var locationReferenceTarget: Resource? = null


}

/**
 * A provider issued list of professional services and products which have been provided, or are to be provided, to a patient which is sent to an insurer for reimbursement.
 */
class ClaimCareTeam(
    val sequence: PositiveIntType,
    val provider: Reference): BackboneElement() {


    /**
     * The party who is billing and/or responsible for the claimed products or services.
     */
    var responsible: BooleanType? = null



    /**
     * The lead, assisting or supervising practitioner and their discipline if a multidisciplinary team.
     */
    var role: CodeableConcept? = null



    /**
     * The qualification of the practitioner which is applicable for this service.
     */
    var qualification: CodeableConcept? = null




}

/**
 * A provider issued list of professional services and products which have been provided, or are to be provided, to a patient which is sent to an insurer for reimbursement.
 */
class ClaimDetail(
    val sequence: PositiveIntType,
    val productOrService: CodeableConcept): BackboneElement() {


    /**
     * The type of revenue or cost center providing the product and/or service.
     */
    var revenue: CodeableConcept? = null



    /**
     * Code to identify the general type of benefits under which products and services are provided.
     */
    var category: CodeableConcept? = null



    /**
     * Item typification or modifiers codes to convey additional context for the product or service.
     */
    var modifier: List<CodeableConcept>? = null



    /**
     * Identifies the program under which this may be recovered.
     */
    var programCode: List<CodeableConcept>? = null



    /**
     * The number of repetitions of a service or product.
     */
    var quantity: Quantity? = null



    /**
     * If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
     */
    var unitPrice: Money? = null



    /**
     * A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.
     */
    var factor: DecimalType? = null



    /**
     * The quantity times the unit price for an additional service or product or charge.
     */
    var net: Money? = null



    /**
     * Unique Device Identifiers associated with this line item.
     */
    var udi: List<Reference>? = null

    @JsonIgnore
    var udiTarget: List<Resource>? = null

    /**
     * A claim detail line. Either a simple (a product or service) or a 'group' of sub-details which are simple items.
     */
    var subDetail: List<ClaimSubDetail>? = null




}

/**
 * A provider issued list of professional services and products which have been provided, or are to be provided, to a patient which is sent to an insurer for reimbursement.
 */
class ClaimDiagnosis(
    val sequence: PositiveIntType): BackboneElement() {


    /**
     *
     */
    var diagnosisCodeableConcept: CodeableConcept? = null



    /**
     *
     */
    var diagnosisReference: Reference? = null

    @JsonIgnore
    var diagnosisReferenceTarget: Resource? = null

    /**
     * When the condition was observed or the relative ranking.
     */
    var type: List<CodeableConcept>? = null



    /**
     * Indication of whether the diagnosis was present on admission to a facility.
     */
    var onAdmission: CodeableConcept? = null



    /**
     * A package billing code or bundle code used to group products and services to a particular health condition (such as heart attack) which is based on a predetermined grouping code system.
     */
    var packageCode: CodeableConcept? = null




}

/**
 * A provider issued list of professional services and products which have been provided, or are to be provided, to a patient which is sent to an insurer for reimbursement.
 */
class ClaimInsurance(
    val sequence: PositiveIntType,
    val focal: BooleanType,
    val coverage: Reference): BackboneElement() {


    /**
     * The business identifier to be used when the claim is sent for adjudication against this insurance policy.
     */
    var identifier: Identifier? = null



    /**
     * A business agreement number established between the provider and the insurer for special business processing purposes.
     */
    var businessArrangement: StringType? = null



    /**
     * Reference numbers previously provided by the insurer to the provider to be quoted on subsequent claims containing services or products related to the prior authorization.
     */
    var preAuthRef: List<StringType>? = null



    /**
     * The result of the adjudication of the line items for the Coverage specified in this insurance.
     */
    var claimResponse: Reference? = null

    @JsonIgnore
    var claimResponseTarget: Resource? = null


}

/**
 * A provider issued list of professional services and products which have been provided, or are to be provided, to a patient which is sent to an insurer for reimbursement.
 */
class ClaimItem(
    val sequence: PositiveIntType,
    val productOrService: CodeableConcept): BackboneElement() {


    /**
     * CareTeam members related to this service or product.
     */
    var careTeamSequence: List<PositiveIntType>? = null



    /**
     * Diagnosis applicable for this service or product.
     */
    var diagnosisSequence: List<PositiveIntType>? = null



    /**
     * Procedures applicable for this service or product.
     */
    var procedureSequence: List<PositiveIntType>? = null



    /**
     * Exceptions, special conditions and supporting information applicable for this service or product.
     */
    var informationSequence: List<PositiveIntType>? = null



    /**
     * The type of revenue or cost center providing the product and/or service.
     */
    var revenue: CodeableConcept? = null



    /**
     * Code to identify the general type of benefits under which products and services are provided.
     */
    var category: CodeableConcept? = null



    /**
     * Item typification or modifiers codes to convey additional context for the product or service.
     */
    var modifier: List<CodeableConcept>? = null



    /**
     * Identifies the program under which this may be recovered.
     */
    var programCode: List<CodeableConcept>? = null



    /**
     *
     */
    var servicedDate: DateType? = null



    /**
     *
     */
    var servicedPeriod: Period? = null



    /**
     *
     */
    var locationCodeableConcept: CodeableConcept? = null



    /**
     *
     */
    var locationAddress: Address? = null



    /**
     *
     */
    var locationReference: Reference? = null

    @JsonIgnore
    var locationReferenceTarget: Resource? = null

    /**
     * The number of repetitions of a service or product.
     */
    var quantity: Quantity? = null



    /**
     * If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
     */
    var unitPrice: Money? = null



    /**
     * A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.
     */
    var factor: DecimalType? = null



    /**
     * The quantity times the unit price for an additional service or product or charge.
     */
    var net: Money? = null



    /**
     * Unique Device Identifiers associated with this line item.
     */
    var udi: List<Reference>? = null

    @JsonIgnore
    var udiTarget: List<Resource>? = null

    /**
     * Physical service site on the patient (limb, tooth, etc.).
     */
    var bodySite: CodeableConcept? = null



    /**
     * A region or surface of the bodySite, e.g. limb region or tooth surface(s).
     */
    var subSite: List<CodeableConcept>? = null



    /**
     * The Encounters during which this Claim was created or to which the creation of this record is tightly associated.
     */
    var encounter: List<Reference>? = null

    @JsonIgnore
    var encounterTarget: List<Resource>? = null

    /**
     * A claim detail line. Either a simple (a product or service) or a 'group' of sub-details which are simple items.
     */
    var detail: List<ClaimDetail>? = null




}

/**
 * A provider issued list of professional services and products which have been provided, or are to be provided, to a patient which is sent to an insurer for reimbursement.
 */
class ClaimPayee(
    val type: CodeableConcept): BackboneElement() {


    /**
     * Reference to the individual or organization to whom any payment will be made.
     */
    var party: Reference? = null

    @JsonIgnore
    var partyTarget: Resource? = null


}

/**
 * A provider issued list of professional services and products which have been provided, or are to be provided, to a patient which is sent to an insurer for reimbursement.
 */
class ClaimProcedure(
    val sequence: PositiveIntType): BackboneElement() {


    /**
     * When the condition was observed or the relative ranking.
     */
    var type: List<CodeableConcept>? = null



    /**
     * Date and optionally time the procedure was performed.
     */
    var date: DateTimeType? = null



    /**
     *
     */
    var procedureCodeableConcept: CodeableConcept? = null



    /**
     *
     */
    var procedureReference: Reference? = null

    @JsonIgnore
    var procedureReferenceTarget: Resource? = null

    /**
     * Unique Device Identifiers associated with this line item.
     */
    var udi: List<Reference>? = null

    @JsonIgnore
    var udiTarget: List<Resource>? = null


}

/**
 * The result of the claim processing.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class ClaimProcessingCodes(
    @JsonValue val text: String) {
    QUEUED("queued"),
    COMPLETE("complete"),
    ERROR("error"),
    PARTIAL("partial")
}




/**
 * A provider issued list of professional services and products which have been provided, or are to be provided, to a patient which is sent to an insurer for reimbursement.
 */
class ClaimRelated: BackboneElement()
{


    /**
     * Reference to a related claim.
     */
    var claim: Reference? = null

    @JsonIgnore
    var claimTarget: Resource? = null

    /**
     * A code to convey how the claims are related.
     */
    var relationship: CodeableConcept? = null



    /**
     * An alternate organizational reference to the case or file to which this particular claim pertains.
     */
    var reference: Identifier? = null




}

/**
 * This resource provides the adjudication details from the processing of a Claim resource.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class ClaimResponse(
    val status: FinancialResourceStatusCodes,
    val type: CodeableConcept,
    val use: Use,
    val patient: Reference,
    val created: DateTimeType,
    val insurer: Reference,
    val outcome: ClaimProcessingCodes): DomainResource() {


    /**
     * A unique identifier assigned to this claim response.
     */
    var identifier: List<Identifier>? = null



    /**
     * A finer grained suite of claim type codes which may convey additional information such as Inpatient vs Outpatient and/or a specialty service.
     */
    var subType: CodeableConcept? = null



    /**
     * The provider which is responsible for the claim, predetermination or preauthorization.
     */
    var requestor: Reference? = null

    @JsonIgnore
    var requestorTarget: Resource? = null

    /**
     * Original request resource reference.
     */
    var request: Reference? = null

    @JsonIgnore
    var requestTarget: Resource? = null

    /**
     * A human readable description of the status of the adjudication.
     */
    var disposition: StringType? = null



    /**
     * Reference from the Insurer which is used in later communications which refers to this adjudication.
     */
    var preAuthRef: StringType? = null



    /**
     * The time frame during which this authorization is effective.
     */
    var preAuthPeriod: Period? = null



    /**
     * Type of Party to be reimbursed: subscriber, provider, other.
     */
    var payeeType: CodeableConcept? = null



    /**
     * A claim line. Either a simple (a product or service) or a 'group' of details which can also be a simple items or groups of sub-details.
     */
    var item: List<ClaimResponseItem>? = null



    /**
     * The first-tier service adjudications for payor added product or service lines.
     */
    var addItem: List<ClaimResponseAddItem>? = null



    /**
     * The adjudication results which are presented at the header level rather than at the line-item or add-item levels.
     */
    var adjudication: List<ClaimResponseAdjudication>? = null



    /**
     * Categorized monetary totals for the adjudication.
     */
    var total: List<ClaimResponseTotal>? = null



    /**
     * Payment details for the adjudication of the claim.
     */
    var payment: ClaimResponsePayment? = null



    /**
     * A code, used only on a response to a preauthorization, to indicate whether the benefits payable have been reserved and for whom.
     */
    var fundsReserve: CodeableConcept? = null



    /**
     * A code for the form to be used for printing the content.
     */
    var formCode: CodeableConcept? = null



    /**
     * The actual form, by reference or inclusion, for printing the content or an EOB.
     */
    var form: Attachment? = null



    /**
     * A note that describes or explains adjudication results in a human readable form.
     */
    var processNote: List<ClaimResponseProcessNote>? = null



    /**
     * Request for additional supporting or authorizing information.
     */
    var communicationRequest: List<Reference>? = null

    @JsonIgnore
    var communicationRequestTarget: List<Resource>? = null

    /**
     * Financial instruments for reimbursement for the health care products and services specified on the claim.
     */
    var insurance: List<ClaimResponseInsurance>? = null



    /**
     * Errors encountered during the processing of the adjudication.
     */
    var error: List<ClaimResponseError>? = null




}

/**
 * This resource provides the adjudication details from the processing of a Claim resource.
 */
class ClaimResponseAddItem(
    val productOrService: CodeableConcept,
    val adjudication: List<ClaimResponseAdjudication>): BackboneElement() {


    /**
     * Claim items which this service line is intended to replace.
     */
    var itemSequence: List<PositiveIntType>? = null



    /**
     * The sequence number of the details within the claim item which this line is intended to replace.
     */
    var detailSequence: List<PositiveIntType>? = null



    /**
     * The sequence number of the sub-details within the details within the claim item which this line is intended to replace.
     */
    var subdetailSequence: List<PositiveIntType>? = null



    /**
     * The providers who are authorized for the services rendered to the patient.
     */
    var provider: List<Reference>? = null

    @JsonIgnore
    var providerTarget: List<Resource>? = null

    /**
     * Item typification or modifiers codes to convey additional context for the product or service.
     */
    var modifier: List<CodeableConcept>? = null



    /**
     * Identifies the program under which this may be recovered.
     */
    var programCode: List<CodeableConcept>? = null



    /**
     *
     */
    var servicedDate: DateType? = null



    /**
     *
     */
    var servicedPeriod: Period? = null



    /**
     *
     */
    var locationCodeableConcept: CodeableConcept? = null



    /**
     *
     */
    var locationAddress: Address? = null



    /**
     *
     */
    var locationReference: Reference? = null

    @JsonIgnore
    var locationReferenceTarget: Resource? = null

    /**
     * The number of repetitions of a service or product.
     */
    var quantity: Quantity? = null



    /**
     * If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
     */
    var unitPrice: Money? = null



    /**
     * A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.
     */
    var factor: DecimalType? = null



    /**
     * The quantity times the unit price for an additional service or product or charge.
     */
    var net: Money? = null



    /**
     * Physical service site on the patient (limb, tooth, etc.).
     */
    var bodySite: CodeableConcept? = null



    /**
     * A region or surface of the bodySite, e.g. limb region or tooth surface(s).
     */
    var subSite: List<CodeableConcept>? = null



    /**
     * The numbers associated with notes below which apply to the adjudication of this item.
     */
    var noteNumber: List<PositiveIntType>? = null



    /**
     * The second-tier service adjudications for payor added services.
     */
    var detail: List<ClaimResponseDetail1>? = null




}

/**
 * This resource provides the adjudication details from the processing of a Claim resource.
 */
class ClaimResponseAdjudication(
    val category: CodeableConcept): BackboneElement() {


    /**
     * A code supporting the understanding of the adjudication result and explaining variance from expected amount.
     */
    var reason: CodeableConcept? = null



    /**
     * Monetary amount associated with the category.
     */
    var amount: Money? = null



    /**
     * A non-monetary value associated with the category. Mutually exclusive to the amount element above.
     */
    var value: DecimalType? = null




}

/**
 * This resource provides the adjudication details from the processing of a Claim resource.
 */
class ClaimResponseDetail(
    val detailSequence: PositiveIntType,
    val adjudication: List<ClaimResponseAdjudication>): BackboneElement() {


    /**
     * The numbers associated with notes below which apply to the adjudication of this item.
     */
    var noteNumber: List<PositiveIntType>? = null



    /**
     * A sub-detail adjudication of a simple product or service.
     */
    var subDetail: List<ClaimResponseSubDetail>? = null




}

/**
 * This resource provides the adjudication details from the processing of a Claim resource.
 */
class ClaimResponseDetail1(
    val productOrService: CodeableConcept,
    val adjudication: List<ClaimResponseAdjudication>): BackboneElement() {


    /**
     * Item typification or modifiers codes to convey additional context for the product or service.
     */
    var modifier: List<CodeableConcept>? = null



    /**
     * The number of repetitions of a service or product.
     */
    var quantity: Quantity? = null



    /**
     * If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
     */
    var unitPrice: Money? = null



    /**
     * A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.
     */
    var factor: DecimalType? = null



    /**
     * The quantity times the unit price for an additional service or product or charge.
     */
    var net: Money? = null



    /**
     * The numbers associated with notes below which apply to the adjudication of this item.
     */
    var noteNumber: List<PositiveIntType>? = null



    /**
     * The third-tier service adjudications for payor added services.
     */
    var subDetail: List<ClaimResponseSubDetail1>? = null




}

/**
 * This resource provides the adjudication details from the processing of a Claim resource.
 */
class ClaimResponseError(
    val code: CodeableConcept): BackboneElement() {


    /**
     * The sequence number of the line item submitted which contains the error. This value is omitted when the error occurs outside of the item structure.
     */
    var itemSequence: PositiveIntType? = null



    /**
     * The sequence number of the detail within the line item submitted which contains the error. This value is omitted when the error occurs outside of the item structure.
     */
    var detailSequence: PositiveIntType? = null



    /**
     * The sequence number of the sub-detail within the detail within the line item submitted which contains the error. This value is omitted when the error occurs outside of the item structure.
     */
    var subDetailSequence: PositiveIntType? = null




}

/**
 * This resource provides the adjudication details from the processing of a Claim resource.
 */
class ClaimResponseInsurance(
    val sequence: PositiveIntType,
    val focal: BooleanType,
    val coverage: Reference): BackboneElement() {


    /**
     * A business agreement number established between the provider and the insurer for special business processing purposes.
     */
    var businessArrangement: StringType? = null



    /**
     * The result of the adjudication of the line items for the Coverage specified in this insurance.
     */
    var claimResponse: Reference? = null

    @JsonIgnore
    var claimResponseTarget: Resource? = null


}

/**
 * This resource provides the adjudication details from the processing of a Claim resource.
 */
class ClaimResponseItem(
    val itemSequence: PositiveIntType,
    val adjudication: List<ClaimResponseAdjudication>): BackboneElement() {


    /**
     * The numbers associated with notes below which apply to the adjudication of this item.
     */
    var noteNumber: List<PositiveIntType>? = null



    /**
     * A claim detail. Either a simple (a product or service) or a 'group' of sub-details which are simple items.
     */
    var detail: List<ClaimResponseDetail>? = null




}

/**
 * This resource provides the adjudication details from the processing of a Claim resource.
 */
class ClaimResponsePayment(
    val type: CodeableConcept,
    val amount: Money): BackboneElement() {


    /**
     * Total amount of all adjustments to this payment included in this transaction which are not related to this claim's adjudication.
     */
    var adjustment: Money? = null



    /**
     * Reason for the payment adjustment.
     */
    var adjustmentReason: CodeableConcept? = null



    /**
     * Estimated date the payment will be issued or the actual issue date of payment.
     */
    var date: DateType? = null



    /**
     * Issuer's unique identifier for the payment instrument.
     */
    var identifier: Identifier? = null




}

/**
 * This resource provides the adjudication details from the processing of a Claim resource.
 */
class ClaimResponseProcessNote(
    val text: StringType): BackboneElement() {


    /**
     * A number to uniquely identify a note entry.
     */
    var number: PositiveIntType? = null



    /**
     * The business purpose of the note text.
     */
    var type: NoteType? = null



    /**
     * A code to define the language used in the text of the note.
     */
    var language: CodeableConcept? = null




}

/**
 * This resource provides the adjudication details from the processing of a Claim resource.
 */
class ClaimResponseSubDetail(
    val subDetailSequence: PositiveIntType): BackboneElement() {


    /**
     * The numbers associated with notes below which apply to the adjudication of this item.
     */
    var noteNumber: List<PositiveIntType>? = null



    /**
     * The adjudication results.
     */
    var adjudication: List<ClaimResponseAdjudication>? = null




}

/**
 * This resource provides the adjudication details from the processing of a Claim resource.
 */
class ClaimResponseSubDetail1(
    val productOrService: CodeableConcept,
    val adjudication: List<ClaimResponseAdjudication>): BackboneElement() {


    /**
     * Item typification or modifiers codes to convey additional context for the product or service.
     */
    var modifier: List<CodeableConcept>? = null



    /**
     * The number of repetitions of a service or product.
     */
    var quantity: Quantity? = null



    /**
     * If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
     */
    var unitPrice: Money? = null



    /**
     * A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.
     */
    var factor: DecimalType? = null



    /**
     * The quantity times the unit price for an additional service or product or charge.
     */
    var net: Money? = null



    /**
     * The numbers associated with notes below which apply to the adjudication of this item.
     */
    var noteNumber: List<PositiveIntType>? = null




}

/**
 * This resource provides the adjudication details from the processing of a Claim resource.
 */
class ClaimResponseTotal(
    val category: CodeableConcept,
    val amount: Money): BackboneElement()

/**
 * A provider issued list of professional services and products which have been provided, or are to be provided, to a patient which is sent to an insurer for reimbursement.
 */
class ClaimSubDetail(
    val sequence: PositiveIntType,
    val productOrService: CodeableConcept): BackboneElement() {


    /**
     * The type of revenue or cost center providing the product and/or service.
     */
    var revenue: CodeableConcept? = null



    /**
     * Code to identify the general type of benefits under which products and services are provided.
     */
    var category: CodeableConcept? = null



    /**
     * Item typification or modifiers codes to convey additional context for the product or service.
     */
    var modifier: List<CodeableConcept>? = null



    /**
     * Identifies the program under which this may be recovered.
     */
    var programCode: List<CodeableConcept>? = null



    /**
     * The number of repetitions of a service or product.
     */
    var quantity: Quantity? = null



    /**
     * If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
     */
    var unitPrice: Money? = null



    /**
     * A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.
     */
    var factor: DecimalType? = null



    /**
     * The quantity times the unit price for an additional service or product or charge.
     */
    var net: Money? = null



    /**
     * Unique Device Identifiers associated with this line item.
     */
    var udi: List<Reference>? = null

    @JsonIgnore
    var udiTarget: List<Resource>? = null


}

/**
 * A provider issued list of professional services and products which have been provided, or are to be provided, to a patient which is sent to an insurer for reimbursement.
 */
class ClaimSupportingInfo(
    val sequence: PositiveIntType,
    val category: CodeableConcept): BackboneElement() {


    /**
     * System and code pertaining to the specific information regarding special conditions relating to the setting, treatment or patient  for which care is sought.
     */
    var code: CodeableConcept? = null



    /**
     *
     */
    var timingDate: DateType? = null



    /**
     *
     */
    var timingPeriod: Period? = null



    /**
     *
     */
    var valueBoolean: BooleanType? = null



    /**
     *
     */
    var valueString: StringType? = null



    /**
     *
     */
    var valueQuantity: Quantity? = null



    /**
     *
     */
    var valueAttachment: Attachment? = null



    /**
     *
     */
    var valueReference: Reference? = null

    @JsonIgnore
    var valueReferenceTarget: Resource? = null

    /**
     * Provides the reason in the situation where a reason code is required in addition to the content.
     */
    var reason: CodeableConcept? = null




}

/**
 * A record of a clinical assessment performed to determine what problem(s) may affect the patient and before planning the treatments or management strategies that are best to manage a patient's condition. Assessments are often 1:1 with a clinical consultation / encounter,  but this varies greatly depending on the clinical workflow. This resource is called "ClinicalImpression" rather than "ClinicalAssessment" to avoid confusion with the recording of assessment tools such as Apgar score.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class ClinicalImpression(
    val status: ClinicalImpressionStatus,
    val subject: Reference): DomainResource() {


    /**
     * Business identifiers assigned to this clinical impression by the performer or other systems which remain constant as the resource is updated and propagates from server to server.
     */
    var identifier: List<Identifier>? = null



    /**
     * Captures the reason for the current state of the ClinicalImpression.
     */
    var statusReason: CodeableConcept? = null



    /**
     * Categorizes the type of clinical assessment performed.
     */
    var code: CodeableConcept? = null



    /**
     * A summary of the context and/or cause of the assessment - why / where it was performed, and what patient events/status prompted it.
     */
    var description: StringType? = null



    /**
     * The Encounter during which this ClinicalImpression was created or to which the creation of this record is tightly associated.
     */
    var encounter: Reference? = null

    @JsonIgnore
    var encounterTarget: Resource? = null

    /**
     *
     */
    var effectiveDateTime: DateTimeType? = null



    /**
     *
     */
    var effectivePeriod: Period? = null



    /**
     * Indicates when the documentation of the assessment was complete.
     */
    var date: DateTimeType? = null



    /**
     * The clinician performing the assessment.
     */
    var assessor: Reference? = null

    @JsonIgnore
    var assessorTarget: Resource? = null

    /**
     * A reference to the last assessment that was conducted on this patient. Assessments are often/usually ongoing in nature; a care provider (practitioner or team) will make new assessments on an ongoing basis as new data arises or the patient's conditions changes.
     */
    var previous: Reference? = null

    @JsonIgnore
    var previousTarget: Resource? = null

    /**
     * A list of the relevant problems/conditions for a patient.
     */
    var problem: List<Reference>? = null

    @JsonIgnore
    var problemTarget: List<Resource>? = null

    /**
     * One or more sets of investigations (signs, symptoms, etc.). The actual grouping of investigations varies greatly depending on the type and context of the assessment. These investigations may include data generated during the assessment process, or data previously generated and recorded that is pertinent to the outcomes.
     */
    var investigation: List<ClinicalImpressionInvestigation>? = null



    /**
     * Reference to a specific published clinical protocol that was followed during this assessment, and/or that provides evidence in support of the diagnosis.
     */
    var protocol: List<UriType>? = null



    /**
     * A text summary of the investigations and the diagnosis.
     */
    var summary: StringType? = null



    /**
     * Specific findings or diagnoses that were considered likely or relevant to ongoing treatment.
     */
    var finding: List<ClinicalImpressionFinding>? = null



    /**
     * Estimate of likely outcome.
     */
    var prognosisCodeableConcept: List<CodeableConcept>? = null



    /**
     * RiskAssessment expressing likely outcome.
     */
    var prognosisReference: List<Reference>? = null

    @JsonIgnore
    var prognosisReferenceTarget: List<Resource>? = null

    /**
     * Information supporting the clinical impression.
     */
    var supportingInfo: List<Reference>? = null

    @JsonIgnore
    var supportingInfoTarget: List<Resource>? = null

    /**
     * Commentary about the impression, typically recorded after the impression itself was made, though supplemental notes by the original author could also appear.
     */
    var note: List<Annotation>? = null




}

/**
 * A record of a clinical assessment performed to determine what problem(s) may affect the patient and before planning the treatments or management strategies that are best to manage a patient's condition. Assessments are often 1:1 with a clinical consultation / encounter,  but this varies greatly depending on the clinical workflow. This resource is called "ClinicalImpression" rather than "ClinicalAssessment" to avoid confusion with the recording of assessment tools such as Apgar score.
 */
class ClinicalImpressionFinding: BackboneElement()
{


    /**
     * Specific text or code for finding or diagnosis, which may include ruled-out or resolved conditions.
     */
    var itemCodeableConcept: CodeableConcept? = null



    /**
     * Specific reference for finding or diagnosis, which may include ruled-out or resolved conditions.
     */
    var itemReference: Reference? = null

    @JsonIgnore
    var itemReferenceTarget: Resource? = null

    /**
     * Which investigations support finding or diagnosis.
     */
    var basis: StringType? = null




}

/**
 * A record of a clinical assessment performed to determine what problem(s) may affect the patient and before planning the treatments or management strategies that are best to manage a patient's condition. Assessments are often 1:1 with a clinical consultation / encounter,  but this varies greatly depending on the clinical workflow. This resource is called "ClinicalImpression" rather than "ClinicalAssessment" to avoid confusion with the recording of assessment tools such as Apgar score.
 */
class ClinicalImpressionInvestigation(
    val code: CodeableConcept): BackboneElement() {


    /**
     * A record of a specific investigation that was undertaken.
     */
    var item: List<Reference>? = null

    @JsonIgnore
    var itemTarget: List<Resource>? = null


}

/**
 * The workflow state of a clinical impression.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class ClinicalImpressionStatus(
    @JsonValue val text: String) {
    IN_PROGRESS("in-progress"),
    COMPLETED("completed"),
    ENTERED_IN_ERROR("entered-in-error")
}




/**
 * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
 * If the element is present, it must have either a @value, an @id referenced from the Narrative, or extensions
 */
data class CodeType(@JsonValue val value: String) {
    companion object {
        @JvmStatic
        @JsonCreator
        fun create(value: String) = CodeType(value)
    }
}


/**
 * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
 * If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions
 */
class CodeableConcept: Element()
{


    /**
     * A reference to a code defined by a terminology system.
     */
    var coding: List<Coding>? = null



    /**
     * A human language representation of the concept as seen/selected/uttered by the user who entered the data and/or which represents the intended meaning of the user.
     */
    var text: StringType? = null




}


/**
 * The degree to which the server supports the code search parameter on ValueSet, if it is supported.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class CodeSearchSupport(
    @JsonValue val text: String) {
    EXPLICIT("explicit"),
    ALL("all")
}




/**
 * The CodeSystem resource is used to declare the existence of and describe a code system or code system supplement and its key properties, and optionally define a part or all of its content.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class CodeSystem(
    val status: PublicationStatus,
    val content: CodeSystemContentMode): DomainResource() {


    /**
     * An absolute URI that is used to identify this code system when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which at which an authoritative instance of this code system is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the code system is stored on different servers. This is used in [Coding](datatypes.html#Coding).system.
     */
    var url: UriType? = null



    /**
     * A formal identifier that is used to identify this code system when it is represented in other formats, or referenced in a specification, model, design or an instance.
     */
    var identifier: List<Identifier>? = null



    /**
     * The identifier that is used to identify this version of the code system when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the code system author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence. This is used in [Coding](datatypes.html#Coding).version.
     */
    var version: StringType? = null



    /**
     * A natural language name identifying the code system. This name should be usable as an identifier for the module by machine processing applications such as code generation.
     */
    var name: StringType? = null



    /**
     * A short, descriptive, user-friendly title for the code system.
     */
    var title: StringType? = null



    /**
     * A Boolean value to indicate that this code system is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
     */
    var experimental: BooleanType? = null



    /**
     * The date  (and optionally time) when the code system was published. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the code system changes.
     */
    var date: DateTimeType? = null



    /**
     * The name of the organization or individual that published the code system.
     */
    var publisher: StringType? = null



    /**
     * Contact details to assist a user in finding and communicating with the publisher.
     */
    var contact: List<ContactDetail>? = null



    /**
     * A free text natural language description of the code system from a consumer's perspective.
     */
    var description: MarkdownType? = null



    /**
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate code system instances.
     */
    var useContext: List<UsageContext>? = null



    /**
     * A legal or geographic region in which the code system is intended to be used.
     */
    var jurisdiction: List<CodeableConcept>? = null



    /**
     * Explanation of why this code system is needed and why it has been designed as it has.
     */
    var purpose: MarkdownType? = null



    /**
     * A copyright statement relating to the code system and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the code system.
     */
    var copyright: MarkdownType? = null



    /**
     * If code comparison is case sensitive when codes within this system are compared to each other.
     */
    var caseSensitive: BooleanType? = null



    /**
     * Canonical reference to the value set that contains the entire code system.
     */
    var valueSet: CanonicalType? = null



    /**
     * The meaning of the hierarchy of concepts as represented in this resource.
     */
    var hierarchyMeaning: CodeSystemHierarchyMeaning? = null



    /**
     * The code system defines a compositional (post-coordination) grammar.
     */
    var compositional: BooleanType? = null



    /**
     * This flag is used to signify that the code system does not commit to concept permanence across versions. If true, a version must be specified when referencing this code system.
     */
    var versionNeeded: BooleanType? = null



    /**
     * The canonical URL of the code system that this code system supplement is adding designations and properties to.
     */
    var supplements: CanonicalType? = null



    /**
     * The total number of concepts defined by the code system. Where the code system has a compositional grammar, the basis of this count is defined by the system steward.
     */
    var count: UnsignedIntType? = null



    /**
     * A filter that can be used in a value set compose statement when selecting concepts using a filter.
     */
    var filter: List<CodeSystemFilter>? = null



    /**
     * A property defines an additional slot through which additional information can be provided about a concept.
     */
    var property: List<CodeSystemProperty>? = null



    /**
     * Concepts that are in the code system. The concept definitions are inherently hierarchical, but the definitions must be consulted to determine what the meanings of the hierarchical relationships are.
     */
    var concept: List<CodeSystemConcept>? = null




}

/**
 * The CodeSystem resource is used to declare the existence of and describe a code system or code system supplement and its key properties, and optionally define a part or all of its content.
 */
class CodeSystemConcept(
    val code: CodeType): BackboneElement() {


    /**
     * A human readable string that is the recommended default way to present this concept to a user.
     */
    var display: StringType? = null



    /**
     * The formal definition of the concept. The code system resource does not make formal definitions required, because of the prevalence of legacy systems. However, they are highly recommended, as without them there is no formal meaning associated with the concept.
     */
    var definition: StringType? = null



    /**
     * Additional representations for the concept - other languages, aliases, specialized purposes, used for particular purposes, etc.
     */
    var designation: List<CodeSystemDesignation>? = null



    /**
     * A property value for this concept.
     */
    var property: List<CodeSystemProperty1>? = null



    /**
     * Defines children of a concept to produce a hierarchy of concepts. The nature of the relationships is variable (is-a/contains/categorizes) - see hierarchyMeaning.
     */
    var concept: List<CodeSystemConcept>? = null




}

/**
 * The extent of the content of the code system (the concepts and codes it defines) are represented in a code system resource.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class CodeSystemContentMode(
    @JsonValue val text: String) {
    NOT_PRESENT("not-present"),
    EXAMPLE("example"),
    FRAGMENT("fragment"),
    COMPLETE("complete"),
    SUPPLEMENT("supplement")
}




/**
 * The CodeSystem resource is used to declare the existence of and describe a code system or code system supplement and its key properties, and optionally define a part or all of its content.
 */
class CodeSystemDesignation(
    val value: StringType): BackboneElement() {


    /**
     * The language this designation is defined for.
     */
    var language: CodeType? = null



    /**
     * A code that details how this designation would be used.
     */
    var use: Coding? = null




}

/**
 * The CodeSystem resource is used to declare the existence of and describe a code system or code system supplement and its key properties, and optionally define a part or all of its content.
 */
class CodeSystemFilter(
    val code: CodeType,
    val operator: List<FilterOperator>,
    val value: StringType): BackboneElement() {


    /**
     * A description of how or why the filter is used.
     */
    var description: StringType? = null




}

/**
 * The meaning of the hierarchy of concepts in a code system.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class CodeSystemHierarchyMeaning(
    @JsonValue val text: String) {
    GROUPED_BY("grouped-by"),
    IS_A("is-a"),
    PART_OF("part-of"),
    CLASSIFIED_WITH("classified-with")
}




/**
 * The CodeSystem resource is used to declare the existence of and describe a code system or code system supplement and its key properties, and optionally define a part or all of its content.
 */
class CodeSystemProperty(
    val code: CodeType,
    val type: PropertyType): BackboneElement() {


    /**
     * Reference to the formal meaning of the property. One possible source of meaning is the [Concept Properties](codesystem-concept-properties.html) code system.
     */
    var uri: UriType? = null



    /**
     * A description of the property- why it is defined, and how its value might be used.
     */
    var description: StringType? = null




}

/**
 * The CodeSystem resource is used to declare the existence of and describe a code system or code system supplement and its key properties, and optionally define a part or all of its content.
 */
class CodeSystemProperty1(
    val code: CodeType): BackboneElement() {


    /**
     *
     */
    var valueCode: CodeType? = null



    /**
     *
     */
    var valueCoding: Coding? = null



    /**
     *
     */
    var valueString: StringType? = null



    /**
     *
     */
    var valueInteger: IntegerType? = null



    /**
     *
     */
    var valueBoolean: BooleanType? = null



    /**
     *
     */
    var valueDateTime: DateTimeType? = null



    /**
     *
     */
    var valueDecimal: DecimalType? = null




}

/**
 * A reference to a code defined by a terminology system.
 * If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions
 */
class Coding: Element()
{


    /**
     * The identification of the code system that defines the meaning of the symbol in the code.
     */
    var system: UriType? = null



    /**
     * The version of the code system which was used when choosing this code. Note that a well-maintained code system does not need the version reported, because the meaning of codes is consistent across versions. However this cannot consistently be assured, and when the meaning is not guaranteed to be consistent, the version SHOULD be exchanged.
     */
    var version: StringType? = null



    /**
     * A symbol in syntax defined by the system. The symbol may be a predefined code or an expression in a syntax defined by the coding system (e.g. post-coordination).
     */
    var code: CodeType? = null



    /**
     * A representation of the meaning of the code in the system, following the rules of the system.
     */
    var display: StringType? = null



    /**
     * Indicates that this coding was chosen by a user directly - e.g. off a pick list of available items (codes or displays).
     */
    var userSelected: BooleanType? = null




}

/**
 * An occurrence of information being transmitted; e.g. an alert that was sent to a responsible provider, a public health agency that was notified about a reportable condition.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class Communication(
    val status: EventStatus): DomainResource() {


    /**
     * Business identifiers assigned to this communication by the performer or other systems which remain constant as the resource is updated and propagates from server to server.
     */
    var identifier: List<Identifier>? = null



    /**
     * The URL pointing to a FHIR-defined protocol, guideline, orderset or other definition that is adhered to in whole or in part by this Communication.
     */
    var instantiatesCanonical: List<CanonicalType>? = null



    /**
     * The URL pointing to an externally maintained protocol, guideline, orderset or other definition that is adhered to in whole or in part by this Communication.
     */
    var instantiatesUri: List<UriType>? = null



    /**
     * An order, proposal or plan fulfilled in whole or in part by this Communication.
     */
    var basedOn: List<Reference>? = null

    @JsonIgnore
    var basedOnTarget: List<Resource>? = null

    /**
     * Part of this action.
     */
    var partOf: List<Reference>? = null

    @JsonIgnore
    var partOfTarget: List<Resource>? = null

    /**
     * Prior communication that this communication is in response to.
     */
    var inResponseTo: List<Reference>? = null

    @JsonIgnore
    var inResponseToTarget: List<Resource>? = null

    /**
     * Captures the reason for the current state of the Communication.
     */
    var statusReason: CodeableConcept? = null



    /**
     * The type of message conveyed such as alert, notification, reminder, instruction, etc.
     */
    var category: List<CodeableConcept>? = null



    /**
     * Characterizes how quickly the planned or in progress communication must be addressed. Includes concepts such as stat, urgent, routine.
     */
    var priority: RequestPriority? = null



    /**
     * A channel that was used for this communication (e.g. email, fax).
     */
    var medium: List<CodeableConcept>? = null



    /**
     * The patient or group that was the focus of this communication.
     */
    var subject: Reference? = null

    @JsonIgnore
    var subjectTarget: Resource? = null

    /**
     * Description of the purpose/content, similar to a subject line in an email.
     */
    var topic: CodeableConcept? = null



    /**
     * Other resources that pertain to this communication and to which this communication should be associated.
     */
    var about: List<Reference>? = null

    @JsonIgnore
    var aboutTarget: List<Resource>? = null

    /**
     * The Encounter during which this Communication was created or to which the creation of this record is tightly associated.
     */
    var encounter: Reference? = null

    @JsonIgnore
    var encounterTarget: Resource? = null

    /**
     * The time when this communication was sent.
     */
    var sent: DateTimeType? = null



    /**
     * The time when this communication arrived at the destination.
     */
    var received: DateTimeType? = null



    /**
     * The entity (e.g. person, organization, clinical information system, care team or device) which was the target of the communication. If receipts need to be tracked by an individual, a separate resource instance will need to be created for each recipient.  Multiple recipient communications are intended where either receipts are not tracked (e.g. a mass mail-out) or a receipt is captured in aggregate (all emails confirmed received by a particular time).
     */
    var recipient: List<Reference>? = null

    @JsonIgnore
    var recipientTarget: List<Resource>? = null

    /**
     * The entity (e.g. person, organization, clinical information system, or device) which was the source of the communication.
     */
    var sender: Reference? = null

    @JsonIgnore
    var senderTarget: Resource? = null

    /**
     * The reason or justification for the communication.
     */
    var reasonCode: List<CodeableConcept>? = null



    /**
     * Indicates another resource whose existence justifies this communication.
     */
    var reasonReference: List<Reference>? = null

    @JsonIgnore
    var reasonReferenceTarget: List<Resource>? = null

    /**
     * Text, attachment(s), or resource(s) that was communicated to the recipient.
     */
    var payload: List<CommunicationPayload>? = null



    /**
     * Additional notes or commentary about the communication by the sender, receiver or other interested parties.
     */
    var note: List<Annotation>? = null




}

/**
 * An occurrence of information being transmitted; e.g. an alert that was sent to a responsible provider, a public health agency that was notified about a reportable condition.
 */
class CommunicationPayload: BackboneElement()
{


    /**
     *
     */
    var contentString: StringType? = null



    /**
     *
     */
    var contentAttachment: Attachment? = null



    /**
     *
     */
    var contentReference: Reference? = null

    @JsonIgnore
    var contentReferenceTarget: Resource? = null


}

/**
 * A request to convey information; e.g. the CDS system proposes that an alert be sent to a responsible provider, the CDS system proposes that the public health agency be notified about a reportable condition.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class CommunicationRequest(
    val status: RequestStatus): DomainResource() {


    /**
     * Business identifiers assigned to this communication request by the performer or other systems which remain constant as the resource is updated and propagates from server to server.
     */
    var identifier: List<Identifier>? = null



    /**
     * A plan or proposal that is fulfilled in whole or in part by this request.
     */
    var basedOn: List<Reference>? = null

    @JsonIgnore
    var basedOnTarget: List<Resource>? = null

    /**
     * Completed or terminated request(s) whose function is taken by this new request.
     */
    var replaces: List<Reference>? = null

    @JsonIgnore
    var replacesTarget: List<Resource>? = null

    /**
     * A shared identifier common to all requests that were authorized more or less simultaneously by a single author, representing the identifier of the requisition, prescription or similar form.
     */
    var groupIdentifier: Identifier? = null



    /**
     * Captures the reason for the current state of the CommunicationRequest.
     */
    var statusReason: CodeableConcept? = null



    /**
     * The type of message to be sent such as alert, notification, reminder, instruction, etc.
     */
    var category: List<CodeableConcept>? = null



    /**
     * Characterizes how quickly the proposed act must be initiated. Includes concepts such as stat, urgent, routine.
     */
    var priority: RequestPriority? = null



    /**
     * If true indicates that the CommunicationRequest is asking for the specified action to *not* occur.
     */
    var doNotPerform: BooleanType? = null



    /**
     * A channel that was used for this communication (e.g. email, fax).
     */
    var medium: List<CodeableConcept>? = null



    /**
     * The patient or group that is the focus of this communication request.
     */
    var subject: Reference? = null

    @JsonIgnore
    var subjectTarget: Resource? = null

    /**
     * Other resources that pertain to this communication request and to which this communication request should be associated.
     */
    var about: List<Reference>? = null

    @JsonIgnore
    var aboutTarget: List<Resource>? = null

    /**
     * The Encounter during which this CommunicationRequest was created or to which the creation of this record is tightly associated.
     */
    var encounter: Reference? = null

    @JsonIgnore
    var encounterTarget: Resource? = null

    /**
     * Text, attachment(s), or resource(s) to be communicated to the recipient.
     */
    var payload: List<CommunicationRequestPayload>? = null



    /**
     *
     */
    var occurrenceDateTime: DateTimeType? = null



    /**
     *
     */
    var occurrencePeriod: Period? = null



    /**
     * For draft requests, indicates the date of initial creation.  For requests with other statuses, indicates the date of activation.
     */
    var authoredOn: DateTimeType? = null



    /**
     * The device, individual, or organization who initiated the request and has responsibility for its activation.
     */
    var requester: Reference? = null

    @JsonIgnore
    var requesterTarget: Resource? = null

    /**
     * The entity (e.g. person, organization, clinical information system, device, group, or care team) which is the intended target of the communication.
     */
    var recipient: List<Reference>? = null

    @JsonIgnore
    var recipientTarget: List<Resource>? = null

    /**
     * The entity (e.g. person, organization, clinical information system, or device) which is to be the source of the communication.
     */
    var sender: Reference? = null

    @JsonIgnore
    var senderTarget: Resource? = null

    /**
     * Describes why the request is being made in coded or textual form.
     */
    var reasonCode: List<CodeableConcept>? = null



    /**
     * Indicates another resource whose existence justifies this request.
     */
    var reasonReference: List<Reference>? = null

    @JsonIgnore
    var reasonReferenceTarget: List<Resource>? = null

    /**
     * Comments made about the request by the requester, sender, recipient, subject or other participants.
     */
    var note: List<Annotation>? = null




}

/**
 * A request to convey information; e.g. the CDS system proposes that an alert be sent to a responsible provider, the CDS system proposes that the public health agency be notified about a reportable condition.
 */
class CommunicationRequestPayload: BackboneElement()
{


    /**
     *
     */
    var contentString: StringType? = null



    /**
     *
     */
    var contentAttachment: Attachment? = null



    /**
     *
     */
    var contentReference: Reference? = null

    @JsonIgnore
    var contentReferenceTarget: Resource? = null


}

/**
 * A compartment definition that defines how resources are accessed on a server.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class CompartmentDefinition(
    val url: UriType,
    val name: StringType,
    val status: PublicationStatus,
    val code: CompartmentType,
    val search: BooleanType): DomainResource() {


    /**
     * The identifier that is used to identify this version of the compartment definition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the compartment definition author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
     */
    var version: StringType? = null



    /**
     * A Boolean value to indicate that this compartment definition is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
     */
    var experimental: BooleanType? = null



    /**
     * The date  (and optionally time) when the compartment definition was published. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the compartment definition changes.
     */
    var date: DateTimeType? = null



    /**
     * The name of the organization or individual that published the compartment definition.
     */
    var publisher: StringType? = null



    /**
     * Contact details to assist a user in finding and communicating with the publisher.
     */
    var contact: List<ContactDetail>? = null



    /**
     * A free text natural language description of the compartment definition from a consumer's perspective.
     */
    var description: MarkdownType? = null



    /**
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate compartment definition instances.
     */
    var useContext: List<UsageContext>? = null



    /**
     * Explanation of why this compartment definition is needed and why it has been designed as it has.
     */
    var purpose: MarkdownType? = null



    /**
     * Information about how a resource is related to the compartment.
     */
    var resource: List<CompartmentDefinitionResource>? = null




}

/**
 * A compartment definition that defines how resources are accessed on a server.
 */
class CompartmentDefinitionResource(
    val code: CodeType): BackboneElement() {


    /**
     * The name of a search parameter that represents the link to the compartment. More than one may be listed because a resource may be linked to a compartment in more than one way,.
     */
    var param: List<StringType>? = null



    /**
     * Additional documentation about the resource and compartment.
     */
    var documentation: StringType? = null




}

/**
 * Which type a compartment definition describes.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class CompartmentType(
    @JsonValue val text: String) {
    PATIENT("Patient"),
    ENCOUNTER("Encounter"),
    RELATED_PERSON("RelatedPerson"),
    PRACTITIONER("Practitioner"),
    DEVICE("Device")
}




/**
 * A set of healthcare-related information that is assembled together into a single logical package that provides a single coherent statement of meaning, establishes its own context and that has clinical attestation with regard to who is making the statement. A Composition defines the structure and narrative content necessary for a document. However, a Composition alone does not constitute a document. Rather, the Composition must be the first entry in a Bundle where Bundle.type=document, and any other resources referenced from Composition must be included as subsequent entries in the Bundle (for example Patient, Practitioner, Encounter, etc.).
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class Composition(
    val status: CompositionStatus,
    val type: CodeableConcept,
    val date: DateTimeType,
    val author: List<Reference>,
    val title: StringType): DomainResource() {


    /**
     * A version-independent identifier for the Composition. This identifier stays constant as the composition is changed over time.
     */
    var identifier: Identifier? = null



    /**
     * A categorization for the type of the composition - helps for indexing and searching. This may be implied by or derived from the code specified in the Composition Type.
     */
    var category: List<CodeableConcept>? = null



    /**
     * Who or what the composition is about. The composition can be about a person, (patient or healthcare practitioner), a device (e.g. a machine) or even a group of subjects (such as a document about a herd of livestock, or a set of patients that share a common exposure).
     */
    var subject: Reference? = null

    @JsonIgnore
    var subjectTarget: Resource? = null

    /**
     * Describes the clinical encounter or type of care this documentation is associated with.
     */
    var encounter: Reference? = null

    @JsonIgnore
    var encounterTarget: Resource? = null

    /**
     * The code specifying the level of confidentiality of the Composition.
     */
    var confidentiality: VConfidentialityClassification? = null



    /**
     * A participant who has attested to the accuracy of the composition/document.
     */
    var attester: List<CompositionAttester>? = null



    /**
     * Identifies the organization or group who is responsible for ongoing maintenance of and access to the composition/document information.
     */
    var custodian: Reference? = null

    @JsonIgnore
    var custodianTarget: Resource? = null

    /**
     * Relationships that this composition has with other compositions or documents that already exist.
     */
    var relatesTo: List<CompositionRelatesTo>? = null



    /**
     * The clinical service, such as a colonoscopy or an appendectomy, being documented.
     */
    var event: List<CompositionEvent>? = null



    /**
     * The root of the sections that make up the composition.
     */
    var section: List<CompositionSection>? = null




}

/**
 * The way in which a person authenticated a composition.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class CompositionAttestationMode(
    @JsonValue val text: String) {
    PERSONAL("personal"),
    PROFESSIONAL("professional"),
    LEGAL("legal"),
    OFFICIAL("official")
}




/**
 * A set of healthcare-related information that is assembled together into a single logical package that provides a single coherent statement of meaning, establishes its own context and that has clinical attestation with regard to who is making the statement. A Composition defines the structure and narrative content necessary for a document. However, a Composition alone does not constitute a document. Rather, the Composition must be the first entry in a Bundle where Bundle.type=document, and any other resources referenced from Composition must be included as subsequent entries in the Bundle (for example Patient, Practitioner, Encounter, etc.).
 */
class CompositionAttester(
    val mode: CompositionAttestationMode): BackboneElement() {


    /**
     * When the composition was attested by the party.
     */
    var time: DateTimeType? = null



    /**
     * Who attested the composition in the specified way.
     */
    var party: Reference? = null

    @JsonIgnore
    var partyTarget: Resource? = null


}

/**
 * A set of healthcare-related information that is assembled together into a single logical package that provides a single coherent statement of meaning, establishes its own context and that has clinical attestation with regard to who is making the statement. A Composition defines the structure and narrative content necessary for a document. However, a Composition alone does not constitute a document. Rather, the Composition must be the first entry in a Bundle where Bundle.type=document, and any other resources referenced from Composition must be included as subsequent entries in the Bundle (for example Patient, Practitioner, Encounter, etc.).
 */
class CompositionEvent: BackboneElement()
{


    /**
     * This list of codes represents the main clinical acts, such as a colonoscopy or an appendectomy, being documented. In some cases, the event is inherent in the typeCode, such as a "History and Physical Report" in which the procedure being documented is necessarily a "History and Physical" act.
     */
    var code: List<CodeableConcept>? = null



    /**
     * The period of time covered by the documentation. There is no assertion that the documentation is a complete representation for this period, only that it documents events during this time.
     */
    var period: Period? = null



    /**
     * The description and/or reference of the event(s) being documented. For example, this could be used to document such a colonoscopy or an appendectomy.
     */
    var detail: List<Reference>? = null

    @JsonIgnore
    var detailTarget: List<Resource>? = null


}

/**
 * A set of healthcare-related information that is assembled together into a single logical package that provides a single coherent statement of meaning, establishes its own context and that has clinical attestation with regard to who is making the statement. A Composition defines the structure and narrative content necessary for a document. However, a Composition alone does not constitute a document. Rather, the Composition must be the first entry in a Bundle where Bundle.type=document, and any other resources referenced from Composition must be included as subsequent entries in the Bundle (for example Patient, Practitioner, Encounter, etc.).
 */
class CompositionRelatesTo(
    val code: DocumentRelationshipType): BackboneElement() {


    /**
     *
     */
    var targetIdentifier: Identifier? = null



    /**
     *
     */
    var targetReference: Reference? = null

    @JsonIgnore
    var targetReferenceTarget: Resource? = null


}

/**
 * A set of healthcare-related information that is assembled together into a single logical package that provides a single coherent statement of meaning, establishes its own context and that has clinical attestation with regard to who is making the statement. A Composition defines the structure and narrative content necessary for a document. However, a Composition alone does not constitute a document. Rather, the Composition must be the first entry in a Bundle where Bundle.type=document, and any other resources referenced from Composition must be included as subsequent entries in the Bundle (for example Patient, Practitioner, Encounter, etc.).
 */
class CompositionSection: BackboneElement()
{


    /**
     * The label for this particular section.  This will be part of the rendered content for the document, and is often used to build a table of contents.
     */
    var title: StringType? = null



    /**
     * A code identifying the kind of content contained within the section. This must be consistent with the section title.
     */
    var code: CodeableConcept? = null



    /**
     * Identifies who is responsible for the information in this section, not necessarily who typed it in.
     */
    var author: List<Reference>? = null

    @JsonIgnore
    var authorTarget: List<Resource>? = null

    /**
     * The actual focus of the section when it is not the subject of the composition, but instead represents something or someone associated with the subject such as (for a patient subject) a spouse, parent, fetus, or donor. If not focus is specified, the focus is assumed to be focus of the parent section, or, for a section in the Composition itself, the subject of the composition. Sections with a focus SHALL only include resources where the logical subject (patient, subject, focus, etc.) matches the section focus, or the resources have no logical subject (few resources).
     */
    var focus: Reference? = null

    @JsonIgnore
    var focusTarget: Resource? = null

    /**
     * A human-readable narrative that contains the attested content of the section, used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative.
     */
    var text: Narrative? = null



    /**
     * How the entry list was prepared - whether it is a working list that is suitable for being maintained on an ongoing basis, or if it represents a snapshot of a list of items from another source, or whether it is a prepared list where items may be marked as added, modified or deleted.
     */
    var mode: ListMode? = null



    /**
     * Specifies the order applied to the items in the section entries.
     */
    var orderedBy: CodeableConcept? = null



    /**
     * A reference to the actual resource from which the narrative in the section is derived.
     */
    var entry: List<Reference>? = null

    @JsonIgnore
    var entryTarget: List<Resource>? = null

    /**
     * If the section is empty, why the list is empty. An empty section typically has some text explaining the empty reason.
     */
    var emptyReason: CodeableConcept? = null



    /**
     * A nested sub-section within this section.
     */
    var section: List<CompositionSection>? = null




}

/**
 * The workflow/clinical status of the composition.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class CompositionStatus(
    @JsonValue val text: String) {
    PRELIMINARY("preliminary"),
    FINAL("final"),
    AMENDED("amended"),
    ENTERED_IN_ERROR("entered-in-error")
}




/**
 * A statement of relationships from one set of concepts to one or more other concepts - either concepts in code systems, or data element/data element concepts, or classes in class models.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class ConceptMap(
    val status: PublicationStatus): DomainResource() {


    /**
     * An absolute URI that is used to identify this concept map when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which at which an authoritative instance of this concept map is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the concept map is stored on different servers.
     */
    var url: UriType? = null



    /**
     * A formal identifier that is used to identify this concept map when it is represented in other formats, or referenced in a specification, model, design or an instance.
     */
    var identifier: Identifier? = null



    /**
     * The identifier that is used to identify this version of the concept map when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the concept map author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
     */
    var version: StringType? = null



    /**
     * A natural language name identifying the concept map. This name should be usable as an identifier for the module by machine processing applications such as code generation.
     */
    var name: StringType? = null



    /**
     * A short, descriptive, user-friendly title for the concept map.
     */
    var title: StringType? = null



    /**
     * A Boolean value to indicate that this concept map is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
     */
    var experimental: BooleanType? = null



    /**
     * The date  (and optionally time) when the concept map was published. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the concept map changes.
     */
    var date: DateTimeType? = null



    /**
     * The name of the organization or individual that published the concept map.
     */
    var publisher: StringType? = null



    /**
     * Contact details to assist a user in finding and communicating with the publisher.
     */
    var contact: List<ContactDetail>? = null



    /**
     * A free text natural language description of the concept map from a consumer's perspective.
     */
    var description: MarkdownType? = null



    /**
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate concept map instances.
     */
    var useContext: List<UsageContext>? = null



    /**
     * A legal or geographic region in which the concept map is intended to be used.
     */
    var jurisdiction: List<CodeableConcept>? = null



    /**
     * Explanation of why this concept map is needed and why it has been designed as it has.
     */
    var purpose: MarkdownType? = null



    /**
     * A copyright statement relating to the concept map and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the concept map.
     */
    var copyright: MarkdownType? = null



    /**
     *
     */
    var sourceUri: UriType? = null



    /**
     *
     */
    var sourceCanonical: CanonicalType? = null



    /**
     *
     */
    var targetUri: UriType? = null



    /**
     *
     */
    var targetCanonical: CanonicalType? = null



    /**
     * A group of mappings that all have the same source and target system.
     */
    var group: List<ConceptMapGroup>? = null




}

/**
 * A statement of relationships from one set of concepts to one or more other concepts - either concepts in code systems, or data element/data element concepts, or classes in class models.
 */
class ConceptMapDependsOn(
    val property: UriType,
    val value: StringType): BackboneElement() {


    /**
     * An absolute URI that identifies the code system of the dependency code (if the source/dependency is a value set that crosses code systems).
     */
    var system: CanonicalType? = null



    /**
     * The display for the code. The display is only provided to help editors when editing the concept map.
     */
    var display: StringType? = null




}

/**
 * A statement of relationships from one set of concepts to one or more other concepts - either concepts in code systems, or data element/data element concepts, or classes in class models.
 */
class ConceptMapElement: BackboneElement()
{


    /**
     * Identity (code or path) or the element/item being mapped.
     */
    var code: CodeType? = null



    /**
     * The display for the code. The display is only provided to help editors when editing the concept map.
     */
    var display: StringType? = null



    /**
     * A concept from the target value set that this concept maps to.
     */
    var target: List<ConceptMapTarget>? = null




}

/**
 *
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class ConceptMapEquivalence(
    @JsonValue val text: String) {
    RELATEDTO("relatedto"),
    EQUIVALENT("equivalent"),
    EQUAL("equal"),
    WIDER("wider"),
    SUBSUMES("subsumes"),
    NARROWER("narrower"),
    SPECIALIZES("specializes"),
    INEXACT("inexact"),
    UNMATCHED("unmatched"),
    DISJOINT("disjoint")
}




/**
 * A statement of relationships from one set of concepts to one or more other concepts - either concepts in code systems, or data element/data element concepts, or classes in class models.
 */
class ConceptMapGroup(
    val element: List<ConceptMapElement>): BackboneElement() {


    /**
     * An absolute URI that identifies the source system where the concepts to be mapped are defined.
     */
    var source: UriType? = null



    /**
     * The specific version of the code system, as determined by the code system authority.
     */
    var sourceVersion: StringType? = null



    /**
     * An absolute URI that identifies the target system that the concepts will be mapped to.
     */
    var target: UriType? = null



    /**
     * The specific version of the code system, as determined by the code system authority.
     */
    var targetVersion: StringType? = null



    /**
     * What to do when there is no mapping for the source concept. "Unmapped" does not include codes that are unmatched, and the unmapped element is ignored in a code is specified to have equivalence = unmatched.
     */
    var unmapped: ConceptMapUnmapped? = null




}

/**
 * Defines which action to take if there is no match in the group.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class ConceptMapGroupUnmappedMode(
    @JsonValue val text: String) {
    PROVIDED("provided"),
    FIXED("fixed"),
    OTHER_MAP("other-map")
}




/**
 * A statement of relationships from one set of concepts to one or more other concepts - either concepts in code systems, or data element/data element concepts, or classes in class models.
 */
class ConceptMapTarget(
    val equivalence: ConceptMapEquivalence): BackboneElement() {


    /**
     * Identity (code or path) or the element/item that the map refers to.
     */
    var code: CodeType? = null



    /**
     * The display for the code. The display is only provided to help editors when editing the concept map.
     */
    var display: StringType? = null



    /**
     * A description of status/issues in mapping that conveys additional information not represented in  the structured data.
     */
    var comment: StringType? = null



    /**
     * A set of additional dependencies for this mapping to hold. This mapping is only applicable if the specified element can be resolved, and it has the specified value.
     */
    var dependsOn: List<ConceptMapDependsOn>? = null



    /**
     * A set of additional outcomes from this mapping to other elements. To properly execute this mapping, the specified element must be mapped to some data element or source that is in context. The mapping may still be useful without a place for the additional data elements, but the equivalence cannot be relied on.
     */
    var product: List<ConceptMapDependsOn>? = null




}

/**
 * A statement of relationships from one set of concepts to one or more other concepts - either concepts in code systems, or data element/data element concepts, or classes in class models.
 */
class ConceptMapUnmapped(
    val mode: ConceptMapGroupUnmappedMode): BackboneElement() {


    /**
     * The fixed code to use when the mode = 'fixed'  - all unmapped codes are mapped to a single fixed code.
     */
    var code: CodeType? = null



    /**
     * The display for the code. The display is only provided to help editors when editing the concept map.
     */
    var display: StringType? = null



    /**
     * The canonical reference to an additional ConceptMap resource instance to use for mapping if this ConceptMap resource contains no matching mapping for the source concept.
     */
    var url: CanonicalType? = null




}

/**
 * A clinical condition, problem, diagnosis, or other event, situation, issue, or clinical concept that has risen to a level of concern.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class Condition(
    val subject: Reference): DomainResource() {


    /**
     * Business identifiers assigned to this condition by the performer or other systems which remain constant as the resource is updated and propagates from server to server.
     */
    var identifier: List<Identifier>? = null



    /**
     * The clinical status of the condition.
     */
    var clinicalStatus: CodeableConcept? = null



    /**
     * The verification status to support the clinical status of the condition.
     */
    var verificationStatus: CodeableConcept? = null



    /**
     * A category assigned to the condition.
     */
    var category: List<CodeableConcept>? = null



    /**
     * A subjective assessment of the severity of the condition as evaluated by the clinician.
     */
    var severity: CodeableConcept? = null



    /**
     * Identification of the condition, problem or diagnosis.
     */
    var code: CodeableConcept? = null



    /**
     * The anatomical location where this condition manifests itself.
     */
    var bodySite: List<CodeableConcept>? = null



    /**
     * The Encounter during which this Condition was created or to which the creation of this record is tightly associated.
     */
    var encounter: Reference? = null

    @JsonIgnore
    var encounterTarget: Resource? = null

    /**
     *
     */
    var onsetDateTime: DateTimeType? = null



    /**
     *
     */
    var onsetAge: Age? = null



    /**
     *
     */
    var onsetPeriod: Period? = null



    /**
     *
     */
    var onsetRange: Range? = null



    /**
     *
     */
    var onsetString: StringType? = null



    /**
     *
     */
    var abatementDateTime: DateTimeType? = null



    /**
     *
     */
    var abatementAge: Age? = null



    /**
     *
     */
    var abatementPeriod: Period? = null



    /**
     *
     */
    var abatementRange: Range? = null



    /**
     *
     */
    var abatementString: StringType? = null



    /**
     * The recordedDate represents when this particular Condition record was created in the system, which is often a system-generated date.
     */
    var recordedDate: DateTimeType? = null



    /**
     * Individual who recorded the record and takes responsibility for its content.
     */
    var recorder: Reference? = null

    @JsonIgnore
    var recorderTarget: Resource? = null

    /**
     * Individual who is making the condition statement.
     */
    var asserter: Reference? = null

    @JsonIgnore
    var asserterTarget: Resource? = null

    /**
     * Clinical stage or grade of a condition. May include formal severity assessments.
     */
    var stage: List<ConditionStage>? = null



    /**
     * Supporting evidence / manifestations that are the basis of the Condition's verification status, such as evidence that confirmed or refuted the condition.
     */
    var evidence: List<ConditionEvidence>? = null



    /**
     * Additional information about the Condition. This is a general notes/comments entry  for description of the Condition, its diagnosis and prognosis.
     */
    var note: List<Annotation>? = null




}

/**
 * A code that indicates how the server supports conditional delete.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class ConditionalDeleteStatus(
    @JsonValue val text: String) {
    NOT_SUPPORTED("not-supported"),
    SINGLE("single"),
    MULTIPLE("multiple")
}




/**
 * A code that indicates how the server supports conditional read.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class ConditionalReadStatus(
    @JsonValue val text: String) {
    NOT_SUPPORTED("not-supported"),
    MODIFIED_SINCE("modified-since"),
    NOT_MATCH("not-match"),
    FULL_SUPPORT("full-support")
}




/**
 * A clinical condition, problem, diagnosis, or other event, situation, issue, or clinical concept that has risen to a level of concern.
 */
class ConditionEvidence: BackboneElement()
{


    /**
     * A manifestation or symptom that led to the recording of this condition.
     */
    var code: List<CodeableConcept>? = null



    /**
     * Links to other relevant information, including pathology reports.
     */
    var detail: List<Reference>? = null

    @JsonIgnore
    var detailTarget: List<Resource>? = null


}

/**
 * A clinical condition, problem, diagnosis, or other event, situation, issue, or clinical concept that has risen to a level of concern.
 */
class ConditionStage: BackboneElement()
{


    /**
     * A simple summary of the stage such as "Stage 3". The determination of the stage is disease-specific.
     */
    var summary: CodeableConcept? = null



    /**
     * Reference to a formal record of the evidence on which the staging assessment is based.
     */
    var assessment: List<Reference>? = null

    @JsonIgnore
    var assessmentTarget: List<Resource>? = null

    /**
     * The kind of staging, such as pathological or clinical staging.
     */
    var type: CodeableConcept? = null




}

/**
 * A record of a healthcare consumer’s  choices, which permits or denies identified recipient(s) or recipient role(s) to perform one or more actions within a given policy context, for specific purposes and periods of time.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class Consent(
    val status: ConsentState,
    val scope: CodeableConcept,
    val category: List<CodeableConcept>): DomainResource() {


    /**
     * Unique identifier for this copy of the Consent Statement.
     */
    var identifier: List<Identifier>? = null



    /**
     * The patient/healthcare consumer to whom this consent applies.
     */
    var patient: Reference? = null

    @JsonIgnore
    var patientTarget: Resource? = null

    /**
     * When this  Consent was issued / created / indexed.
     */
    var dateTime: DateTimeType? = null



    /**
     * Either the Grantor, which is the entity responsible for granting the rights listed in a Consent Directive or the Grantee, which is the entity responsible for complying with the Consent Directive, including any obligations or limitations on authorizations and enforcement of prohibitions.
     */
    var performer: List<Reference>? = null

    @JsonIgnore
    var performerTarget: List<Resource>? = null

    /**
     * The organization that manages the consent, and the framework within which it is executed.
     */
    var organization: List<Reference>? = null

    @JsonIgnore
    var organizationTarget: List<Resource>? = null

    /**
     *
     */
    var sourceAttachment: Attachment? = null



    /**
     *
     */
    var sourceReference: Reference? = null

    @JsonIgnore
    var sourceReferenceTarget: Resource? = null

    /**
     * The references to the policies that are included in this consent scope. Policies may be organizational, but are often defined jurisdictionally, or in law.
     */
    var policy: List<ConsentPolicy>? = null



    /**
     * A reference to the specific base computable regulation or policy.
     */
    var policyRule: CodeableConcept? = null



    /**
     * Whether a treatment instruction (e.g. artificial respiration yes or no) was verified with the patient, his/her family or another authorized person.
     */
    var verification: List<ConsentVerification>? = null



    /**
     * An exception to the base policy of this consent. An exception can be an addition or removal of access permissions.
     */
    var provision: ConsentProvision? = null




}

/**
 * A record of a healthcare consumer’s  choices, which permits or denies identified recipient(s) or recipient role(s) to perform one or more actions within a given policy context, for specific purposes and periods of time.
 */
class ConsentActor(
    val role: CodeableConcept,
    val reference: Reference): BackboneElement()

/**
 * A record of a healthcare consumer’s  choices, which permits or denies identified recipient(s) or recipient role(s) to perform one or more actions within a given policy context, for specific purposes and periods of time.
 */
class ConsentData(
    val meaning: ConsentDataMeaning,
    val reference: Reference): BackboneElement()

/**
 * How a resource reference is interpreted when testing consent restrictions.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class ConsentDataMeaning(
    @JsonValue val text: String) {
    INSTANCE("instance"),
    RELATED("related"),
    DEPENDENTS("dependents"),
    AUTHOREDBY("authoredby")
}




/**
 * A record of a healthcare consumer’s  choices, which permits or denies identified recipient(s) or recipient role(s) to perform one or more actions within a given policy context, for specific purposes and periods of time.
 */
class ConsentPolicy: BackboneElement()
{


    /**
     * Entity or Organization having regulatory jurisdiction or accountability for  enforcing policies pertaining to Consent Directives.
     */
    var authority: UriType? = null



    /**
     * The references to the policies that are included in this consent scope. Policies may be organizational, but are often defined jurisdictionally, or in law.
     */
    var uri: UriType? = null




}

/**
 * A record of a healthcare consumer’s  choices, which permits or denies identified recipient(s) or recipient role(s) to perform one or more actions within a given policy context, for specific purposes and periods of time.
 */
class ConsentProvision: BackboneElement()
{


    /**
     * Action  to take - permit or deny - when the rule conditions are met.  Not permitted in root rule, required in all nested rules.
     */
    var type: ConsentProvisionType? = null



    /**
     * The timeframe in this rule is valid.
     */
    var period: Period? = null



    /**
     * Who or what is controlled by this rule. Use group to identify a set of actors by some property they share (e.g. 'admitting officers').
     */
    var actor: List<ConsentActor>? = null



    /**
     * Actions controlled by this Rule.
     */
    var action: List<CodeableConcept>? = null



    /**
     * A security label, comprised of 0..* security label fields (Privacy tags), which define which resources are controlled by this exception.
     */
    var securityLabel: List<Coding>? = null



    /**
     * The context of the activities a user is taking - why the user is accessing the data - that are controlled by this rule.
     */
    var purpose: List<Coding>? = null



    /**
     * The class of information covered by this rule. The type can be a FHIR resource type, a profile on a type, or a CDA document, or some other type that indicates what sort of information the consent relates to.
     */
    var `class`: List<Coding>? = null



    /**
     * If this code is found in an instance, then the rule applies.
     */
    var code: List<CodeableConcept>? = null



    /**
     * Clinical or Operational Relevant period of time that bounds the data controlled by this rule.
     */
    var dataPeriod: Period? = null



    /**
     * The resources controlled by this rule if specific resources are referenced.
     */
    var data: List<ConsentData>? = null



    /**
     * Rules which provide exceptions to the base rule or subrules.
     */
    var provision: List<ConsentProvision>? = null




}

/**
 * How a rule statement is applied, such as adding additional consent or removing consent.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class ConsentProvisionType(
    @JsonValue val text: String) {
    DENY("deny"),
    PERMIT("permit")
}




/**
 * Indicates the state of the consent.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class ConsentState(
    @JsonValue val text: String) {
    DRAFT("draft"),
    PROPOSED("proposed"),
    ACTIVE("active"),
    REJECTED("rejected"),
    INACTIVE("inactive"),
    ENTERED_IN_ERROR("entered-in-error")
}




/**
 * A record of a healthcare consumer’s  choices, which permits or denies identified recipient(s) or recipient role(s) to perform one or more actions within a given policy context, for specific purposes and periods of time.
 */
class ConsentVerification(
    val verified: BooleanType): BackboneElement() {


    /**
     * Who verified the instruction (Patient, Relative or other Authorized Person).
     */
    var verifiedWith: Reference? = null

    @JsonIgnore
    var verifiedWithTarget: Resource? = null

    /**
     * Date verification was collected.
     */
    var verificationDate: DateTimeType? = null




}

/**
 * SHALL applications comply with this constraint?
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class ConstraintSeverity(
    @JsonValue val text: String) {
    ERROR("error"),
    WARNING("warning")
}




/**
 * Specifies contact information for a person or organization.
 * If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions
 */
class ContactDetail: Element()
{


    /**
     * The name of an individual to contact.
     */
    var name: StringType? = null



    /**
     * The contact details for the individual (if a name was provided) or the organization.
     */
    var telecom: List<ContactPoint>? = null




}

/**
 * Details for all kinds of technology mediated contact points for a person or organization, including telephone, email, etc.
 * If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions
 */
class ContactPoint: Element()
{


    /**
     * Telecommunications form for contact point - what communications system is required to make use of the contact.
     */
    var system: ContactPointSystem? = null



    /**
     * The actual contact point details, in a form that is meaningful to the designated communication system (i.e. phone number or email address).
     */
    var value: StringType? = null



    /**
     * Identifies the purpose for the contact point.
     */
    var use: ContactPointUse? = null



    /**
     * Specifies a preferred order in which to use a set of contacts. ContactPoints with lower rank values are more preferred than those with higher rank values.
     */
    var rank: PositiveIntType? = null



    /**
     * Time period when the contact point was/is in use.
     */
    var period: Period? = null




}

/**
 * Telecommunications form for contact point.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class ContactPointSystem(
    @JsonValue val text: String) {
    PHONE("phone"),
    FAX("fax"),
    EMAIL("email"),
    PAGER("pager"),
    URL("url"),
    SMS("sms"),
    OTHER("other")
}




/**
 * Use of contact point.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class ContactPointUse(
    @JsonValue val text: String) {
    HOME("home"),
    WORK("work"),
    TEMP("temp"),
    OLD("old"),
    MOBILE("mobile")
}




/**
 * Legally enforceable, formally recorded unilateral or bilateral directive i.e., a policy or agreement.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class Contract: DomainResource()
{


    /**
     * Unique identifier for this Contract or a derivative that references a Source Contract.
     */
    var identifier: List<Identifier>? = null



    /**
     * Canonical identifier for this contract, represented as a URI (globally unique).
     */
    var url: UriType? = null



    /**
     * An edition identifier used for business purposes to label business significant variants.
     */
    var version: StringType? = null



    /**
     * The status of the resource instance.
     */
    var status: ContractResourceStatusCodes? = null



    /**
     * Legal states of the formation of a legal instrument, which is a formally executed written document that can be formally attributed to its author, records and formally expresses a legally enforceable act, process, or contractual duty, obligation, or right, and therefore evidences that act, process, or agreement.
     */
    var legalState: CodeableConcept? = null



    /**
     * The URL pointing to a FHIR-defined Contract Definition that is adhered to in whole or part by this Contract.
     */
    var instantiatesCanonical: Reference? = null

    @JsonIgnore
    var instantiatesCanonicalTarget: Resource? = null

    /**
     * The URL pointing to an externally maintained definition that is adhered to in whole or in part by this Contract.
     */
    var instantiatesUri: UriType? = null



    /**
     * The minimal content derived from the basal information source at a specific stage in its lifecycle.
     */
    var contentDerivative: CodeableConcept? = null



    /**
     * When this  Contract was issued.
     */
    var issued: DateTimeType? = null



    /**
     * Relevant time or time-period when this Contract is applicable.
     */
    var applies: Period? = null



    /**
     * Event resulting in discontinuation or termination of this Contract instance by one or more parties to the contract.
     */
    var expirationType: CodeableConcept? = null



    /**
     * The target entity impacted by or of interest to parties to the agreement.
     */
    var subject: List<Reference>? = null

    @JsonIgnore
    var subjectTarget: List<Resource>? = null

    /**
     * A formally or informally recognized grouping of people, principals, organizations, or jurisdictions formed for the purpose of achieving some form of collective action such as the promulgation, administration and enforcement of contracts and policies.
     */
    var authority: List<Reference>? = null

    @JsonIgnore
    var authorityTarget: List<Resource>? = null

    /**
     * Recognized governance framework or system operating with a circumscribed scope in accordance with specified principles, policies, processes or procedures for managing rights, actions, or behaviors of parties or principals relative to resources.
     */
    var domain: List<Reference>? = null

    @JsonIgnore
    var domainTarget: List<Resource>? = null

    /**
     * Sites in which the contract is complied with,  exercised, or in force.
     */
    var site: List<Reference>? = null

    @JsonIgnore
    var siteTarget: List<Resource>? = null

    /**
     * A natural language name identifying this Contract definition, derivative, or instance in any legal state. Provides additional information about its content. This name should be usable as an identifier for the module by machine processing applications such as code generation.
     */
    var name: StringType? = null



    /**
     * A short, descriptive, user-friendly title for this Contract definition, derivative, or instance in any legal state.t giving additional information about its content.
     */
    var title: StringType? = null



    /**
     * An explanatory or alternate user-friendly title for this Contract definition, derivative, or instance in any legal state.t giving additional information about its content.
     */
    var subtitle: StringType? = null



    /**
     * Alternative representation of the title for this Contract definition, derivative, or instance in any legal state., e.g., a domain specific contract number related to legislation.
     */
    var alias: List<StringType>? = null



    /**
     * The individual or organization that authored the Contract definition, derivative, or instance in any legal state.
     */
    var author: Reference? = null

    @JsonIgnore
    var authorTarget: Resource? = null

    /**
     * A selector of legal concerns for this Contract definition, derivative, or instance in any legal state.
     */
    var scope: CodeableConcept? = null



    /**
     *
     */
    var topicCodeableConcept: CodeableConcept? = null



    /**
     *
     */
    var topicReference: Reference? = null

    @JsonIgnore
    var topicReferenceTarget: Resource? = null

    /**
     * A high-level category for the legal instrument, whether constructed as a Contract definition, derivative, or instance in any legal state.  Provides additional information about its content within the context of the Contract's scope to distinguish the kinds of systems that would be interested in the contract.
     */
    var type: CodeableConcept? = null



    /**
     * Sub-category for the Contract that distinguishes the kinds of systems that would be interested in the Contract within the context of the Contract's scope.
     */
    var subType: List<CodeableConcept>? = null



    /**
     * Precusory content developed with a focus and intent of supporting the formation a Contract instance, which may be associated with and transformable into a Contract.
     */
    var contentDefinition: ContractContentDefinition? = null



    /**
     * One or more Contract Provisions, which may be related and conveyed as a group, and may contain nested groups.
     */
    var term: List<ContractTerm>? = null



    /**
     * Information that may be needed by/relevant to the performer in their execution of this term action.
     */
    var supportingInfo: List<Reference>? = null

    @JsonIgnore
    var supportingInfoTarget: List<Resource>? = null

    /**
     * Links to Provenance records for past versions of this Contract definition, derivative, or instance, which identify key state transitions or updates that are likely to be relevant to a user looking at the current version of the Contract.  The Provence.entity indicates the target that was changed in the update. http://build.fhir.org/provenance-definitions.html#Provenance.entity.
     */
    var relevantHistory: List<Reference>? = null

    @JsonIgnore
    var relevantHistoryTarget: List<Resource>? = null

    /**
     * Parties with legal standing in the Contract, including the principal parties, the grantor(s) and grantee(s), which are any person or organization bound by the contract, and any ancillary parties, which facilitate the execution of the contract such as a notary or witness.
     */
    var signer: List<ContractSigner>? = null



    /**
     * The "patient friendly language" versionof the Contract in whole or in parts. "Patient friendly language" means the representation of the Contract and Contract Provisions in a manner that is readily accessible and understandable by a layperson in accordance with best practices for communication styles that ensure that those agreeing to or signing the Contract understand the roles, actions, obligations, responsibilities, and implication of the agreement.
     */
    var friendly: List<ContractFriendly>? = null



    /**
     * List of Legal expressions or representations of this Contract.
     */
    var legal: List<ContractLegal>? = null



    /**
     * List of Computable Policy Rule Language Representations of this Contract.
     */
    var rule: List<ContractRule>? = null



    /**
     *
     */
    var legallyBindingAttachment: Attachment? = null



    /**
     *
     */
    var legallyBindingReference: Reference? = null

    @JsonIgnore
    var legallyBindingReferenceTarget: Resource? = null


}

/**
 * Legally enforceable, formally recorded unilateral or bilateral directive i.e., a policy or agreement.
 */
class ContractAction(
    val type: CodeableConcept,
    val intent: CodeableConcept,
    val status: CodeableConcept): BackboneElement() {


    /**
     * True if the term prohibits the  action.
     */
    var doNotPerform: BooleanType? = null



    /**
     * Entity of the action.
     */
    var subject: List<ContractSubject>? = null



    /**
     * Id [identifier??] of the clause or question text related to this action in the referenced form or QuestionnaireResponse.
     */
    var linkId: List<StringType>? = null



    /**
     * Encounter or Episode with primary association to specified term activity.
     */
    var context: Reference? = null

    @JsonIgnore
    var contextTarget: Resource? = null

    /**
     * Id [identifier??] of the clause or question text related to the requester of this action in the referenced form or QuestionnaireResponse.
     */
    var contextLinkId: List<StringType>? = null



    /**
     *
     */
    var occurrenceDateTime: DateTimeType? = null



    /**
     *
     */
    var occurrencePeriod: Period? = null



    /**
     *
     */
    var occurrenceTiming: Timing? = null



    /**
     * Who or what initiated the action and has responsibility for its activation.
     */
    var requester: List<Reference>? = null

    @JsonIgnore
    var requesterTarget: List<Resource>? = null

    /**
     * Id [identifier??] of the clause or question text related to the requester of this action in the referenced form or QuestionnaireResponse.
     */
    var requesterLinkId: List<StringType>? = null



    /**
     * The type of individual that is desired or required to perform or not perform the action.
     */
    var performerType: List<CodeableConcept>? = null



    /**
     * The type of role or competency of an individual desired or required to perform or not perform the action.
     */
    var performerRole: CodeableConcept? = null



    /**
     * Indicates who or what is being asked to perform (or not perform) the ction.
     */
    var performer: Reference? = null

    @JsonIgnore
    var performerTarget: Resource? = null

    /**
     * Id [identifier??] of the clause or question text related to the reason type or reference of this  action in the referenced form or QuestionnaireResponse.
     */
    var performerLinkId: List<StringType>? = null



    /**
     * Rationale for the action to be performed or not performed. Describes why the action is permitted or prohibited.
     */
    var reasonCode: List<CodeableConcept>? = null



    /**
     * Indicates another resource whose existence justifies permitting or not permitting this action.
     */
    var reasonReference: List<Reference>? = null

    @JsonIgnore
    var reasonReferenceTarget: List<Resource>? = null

    /**
     * Describes why the action is to be performed or not performed in textual form.
     */
    var reason: List<StringType>? = null



    /**
     * Id [identifier??] of the clause or question text related to the reason type or reference of this  action in the referenced form or QuestionnaireResponse.
     */
    var reasonLinkId: List<StringType>? = null



    /**
     * Comments made about the term action made by the requester, performer, subject or other participants.
     */
    var note: List<Annotation>? = null



    /**
     * Security labels that protects the action.
     */
    var securityLabelNumber: List<UnsignedIntType>? = null




}

/**
 * Legally enforceable, formally recorded unilateral or bilateral directive i.e., a policy or agreement.
 */
class ContractAnswer: BackboneElement()
{


    /**
     *
     */
    var valueBoolean: BooleanType? = null



    /**
     *
     */
    var valueDecimal: DecimalType? = null



    /**
     *
     */
    var valueInteger: IntegerType? = null



    /**
     *
     */
    var valueDate: DateType? = null



    /**
     *
     */
    var valueDateTime: DateTimeType? = null



    /**
     *
     */
    var valueTime: TimeType? = null



    /**
     *
     */
    var valueString: StringType? = null



    /**
     *
     */
    var valueUri: UriType? = null



    /**
     *
     */
    var valueAttachment: Attachment? = null



    /**
     *
     */
    var valueCoding: Coding? = null



    /**
     *
     */
    var valueQuantity: Quantity? = null



    /**
     *
     */
    var valueReference: Reference? = null

    @JsonIgnore
    var valueReferenceTarget: Resource? = null


}

/**
 * Legally enforceable, formally recorded unilateral or bilateral directive i.e., a policy or agreement.
 */
class ContractAsset: BackboneElement()
{


    /**
     * Differentiates the kind of the asset .
     */
    var scope: CodeableConcept? = null



    /**
     * Target entity type about which the term may be concerned.
     */
    var type: List<CodeableConcept>? = null



    /**
     * Associated entities.
     */
    var typeReference: List<Reference>? = null

    @JsonIgnore
    var typeReferenceTarget: List<Resource>? = null

    /**
     * May be a subtype or part of an offered asset.
     */
    var subtype: List<CodeableConcept>? = null



    /**
     * Specifies the applicability of the term to an asset resource instance, and instances it refers to orinstances that refer to it, and/or are owned by the offeree.
     */
    var relationship: Coding? = null



    /**
     * Circumstance of the asset.
     */
    var context: List<ContractContext>? = null



    /**
     * Description of the quality and completeness of the asset that imay be a factor in its valuation.
     */
    var condition: StringType? = null



    /**
     * Type of Asset availability for use or ownership.
     */
    var periodType: List<CodeableConcept>? = null



    /**
     * Asset relevant contractual time period.
     */
    var period: List<Period>? = null



    /**
     * Time period of asset use.
     */
    var usePeriod: List<Period>? = null



    /**
     * Clause or question text (Prose Object) concerning the asset in a linked form, such as a QuestionnaireResponse used in the formation of the contract.
     */
    var text: StringType? = null



    /**
     * Id [identifier??] of the clause or question text about the asset in the referenced form or QuestionnaireResponse.
     */
    var linkId: List<StringType>? = null



    /**
     * Response to assets.
     */
    var answer: List<ContractAnswer>? = null



    /**
     * Security labels that protects the asset.
     */
    var securityLabelNumber: List<UnsignedIntType>? = null



    /**
     * Contract Valued Item List.
     */
    var valuedItem: List<ContractValuedItem>? = null




}

/**
 * Legally enforceable, formally recorded unilateral or bilateral directive i.e., a policy or agreement.
 */
class ContractContentDefinition(
    val type: CodeableConcept,
    val publicationStatus: ContractResourcePublicationStatusCodes): BackboneElement() {


    /**
     * Detailed Precusory content type.
     */
    var subType: CodeableConcept? = null



    /**
     * The  individual or organization that published the Contract precursor content.
     */
    var publisher: Reference? = null

    @JsonIgnore
    var publisherTarget: Resource? = null

    /**
     * The date (and optionally time) when the contract was published. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the contract changes.
     */
    var publicationDate: DateTimeType? = null



    /**
     * A copyright statement relating to Contract precursor content. Copyright statements are generally legal restrictions on the use and publishing of the Contract precursor content.
     */
    var copyright: MarkdownType? = null




}

/**
 * Legally enforceable, formally recorded unilateral or bilateral directive i.e., a policy or agreement.
 */
class ContractContext: BackboneElement()
{


    /**
     * Asset context reference may include the creator, custodian, or owning Person or Organization (e.g., bank, repository),  location held, e.g., building,  jurisdiction.
     */
    var reference: Reference? = null

    @JsonIgnore
    var referenceTarget: Resource? = null

    /**
     * Coded representation of the context generally or of the Referenced entity, such as the asset holder type or location.
     */
    var code: List<CodeableConcept>? = null



    /**
     * Context description.
     */
    var text: StringType? = null




}

/**
 * Legally enforceable, formally recorded unilateral or bilateral directive i.e., a policy or agreement.
 */
class ContractFriendly: BackboneElement()
{


    /**
     *
     */
    var contentAttachment: Attachment? = null



    /**
     *
     */
    var contentReference: Reference? = null

    @JsonIgnore
    var contentReferenceTarget: Resource? = null


}

/**
 * Legally enforceable, formally recorded unilateral or bilateral directive i.e., a policy or agreement.
 */
class ContractLegal: BackboneElement()
{


    /**
     *
     */
    var contentAttachment: Attachment? = null



    /**
     *
     */
    var contentReference: Reference? = null

    @JsonIgnore
    var contentReferenceTarget: Resource? = null


}

/**
 * Legally enforceable, formally recorded unilateral or bilateral directive i.e., a policy or agreement.
 */
class ContractOffer: BackboneElement()
{


    /**
     * Unique identifier for this particular Contract Provision.
     */
    var identifier: List<Identifier>? = null



    /**
     * Offer Recipient.
     */
    var party: List<ContractParty>? = null



    /**
     * The owner of an asset has the residual control rights over the asset: the right to decide all usages of the asset in any way not inconsistent with a prior contract, custom, or law (Hart, 1995, p. 30).
     */
    var topic: Reference? = null

    @JsonIgnore
    var topicTarget: Resource? = null

    /**
     * Type of Contract Provision such as specific requirements, purposes for actions, obligations, prohibitions, e.g. life time maximum benefit.
     */
    var type: CodeableConcept? = null



    /**
     * Type of choice made by accepting party with respect to an offer made by an offeror/ grantee.
     */
    var decision: CodeableConcept? = null



    /**
     * How the decision about a Contract was conveyed.
     */
    var decisionMode: List<CodeableConcept>? = null



    /**
     * Response to offer text.
     */
    var answer: List<ContractAnswer>? = null



    /**
     * Human readable form of this Contract Offer.
     */
    var text: StringType? = null



    /**
     * The id of the clause or question text of the offer in the referenced questionnaire/response.
     */
    var linkId: List<StringType>? = null



    /**
     * Security labels that protects the offer.
     */
    var securityLabelNumber: List<UnsignedIntType>? = null




}

/**
 * Legally enforceable, formally recorded unilateral or bilateral directive i.e., a policy or agreement.
 */
class ContractParty(
    val reference: List<Reference>,
    val role: CodeableConcept): BackboneElement()

/**
 * Status of the publication of contract content.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class ContractResourcePublicationStatusCodes(
    @JsonValue val text: String) {
    AMENDED("amended"),
    APPENDED("appended"),
    CANCELLED("cancelled"),
    DISPUTED("disputed"),
    ENTERED_IN_ERROR("entered-in-error"),
    EXECUTABLE("executable"),
    EXECUTED("executed"),
    NEGOTIABLE("negotiable"),
    OFFERED("offered"),
    POLICY("policy"),
    REJECTED("rejected"),
    RENEWED("renewed"),
    REVOKED("revoked"),
    RESOLVED("resolved"),
    TERMINATED("terminated")
}




/**
 * A code specifying the state of the resource instance.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class ContractResourceStatusCodes(
    @JsonValue val text: String) {
    AMENDED("amended"),
    APPENDED("appended"),
    CANCELLED("cancelled"),
    DISPUTED("disputed"),
    ENTERED_IN_ERROR("entered-in-error"),
    EXECUTABLE("executable"),
    EXECUTED("executed"),
    NEGOTIABLE("negotiable"),
    OFFERED("offered"),
    POLICY("policy"),
    REJECTED("rejected"),
    RENEWED("renewed"),
    REVOKED("revoked"),
    RESOLVED("resolved"),
    TERMINATED("terminated")
}




/**
 * Legally enforceable, formally recorded unilateral or bilateral directive i.e., a policy or agreement.
 */
class ContractRule: BackboneElement()
{


    /**
     *
     */
    var contentAttachment: Attachment? = null



    /**
     *
     */
    var contentReference: Reference? = null

    @JsonIgnore
    var contentReferenceTarget: Resource? = null


}

/**
 * Legally enforceable, formally recorded unilateral or bilateral directive i.e., a policy or agreement.
 */
class ContractSecurityLabel(
    val classification: Coding): BackboneElement() {


    /**
     * Number used to link this term or term element to the applicable Security Label.
     */
    var number: List<UnsignedIntType>? = null



    /**
     * Security label privacy tag that species the applicable privacy and security policies governing this term and/or term elements.
     */
    var category: List<Coding>? = null



    /**
     * Security label privacy tag that species the manner in which term and/or term elements are to be protected.
     */
    var control: List<Coding>? = null




}

/**
 * Legally enforceable, formally recorded unilateral or bilateral directive i.e., a policy or agreement.
 */
class ContractSigner(
    val type: Coding,
    val party: Reference,
    val signature: List<Signature>): BackboneElement()

/**
 * Legally enforceable, formally recorded unilateral or bilateral directive i.e., a policy or agreement.
 */
class ContractSubject(
    val reference: List<Reference>): BackboneElement() {


    /**
     * Role type of agent assigned roles in this Contract.
     */
    var role: CodeableConcept? = null




}

/**
 * Legally enforceable, formally recorded unilateral or bilateral directive i.e., a policy or agreement.
 */
class ContractTerm(
    val offer: ContractOffer): BackboneElement() {


    /**
     * Unique identifier for this particular Contract Provision.
     */
    var identifier: Identifier? = null



    /**
     * When this Contract Provision was issued.
     */
    var issued: DateTimeType? = null



    /**
     * Relevant time or time-period when this Contract Provision is applicable.
     */
    var applies: Period? = null



    /**
     *
     */
    var topicCodeableConcept: CodeableConcept? = null



    /**
     *
     */
    var topicReference: Reference? = null

    @JsonIgnore
    var topicReferenceTarget: Resource? = null

    /**
     * A legal clause or condition contained within a contract that requires one or both parties to perform a particular requirement by some specified time or prevents one or both parties from performing a particular requirement by some specified time.
     */
    var type: CodeableConcept? = null



    /**
     * A specialized legal clause or condition based on overarching contract type.
     */
    var subType: CodeableConcept? = null



    /**
     * Statement of a provision in a policy or a contract.
     */
    var text: StringType? = null



    /**
     * Security labels that protect the handling of information about the term and its elements, which may be specifically identified..
     */
    var securityLabel: List<ContractSecurityLabel>? = null



    /**
     * Contract Term Asset List.
     */
    var asset: List<ContractAsset>? = null



    /**
     * An actor taking a role in an activity for which it can be assigned some degree of responsibility for the activity taking place.
     */
    var action: List<ContractAction>? = null



    /**
     * Nested group of Contract Provisions.
     */
    var group: List<ContractTerm>? = null




}

/**
 * Legally enforceable, formally recorded unilateral or bilateral directive i.e., a policy or agreement.
 */
class ContractValuedItem: BackboneElement()
{


    /**
     *
     */
    var entityCodeableConcept: CodeableConcept? = null



    /**
     *
     */
    var entityReference: Reference? = null

    @JsonIgnore
    var entityReferenceTarget: Resource? = null

    /**
     * Identifies a Contract Valued Item instance.
     */
    var identifier: Identifier? = null



    /**
     * Indicates the time during which this Contract ValuedItem information is effective.
     */
    var effectiveTime: DateTimeType? = null



    /**
     * Specifies the units by which the Contract Valued Item is measured or counted, and quantifies the countable or measurable Contract Valued Item instances.
     */
    var quantity: Quantity? = null



    /**
     * A Contract Valued Item unit valuation measure.
     */
    var unitPrice: Money? = null



    /**
     * A real number that represents a multiplier used in determining the overall value of the Contract Valued Item delivered. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.
     */
    var factor: DecimalType? = null



    /**
     * An amount that expresses the weighting (based on difficulty, cost and/or resource intensiveness) associated with the Contract Valued Item delivered. The concept of Points allows for assignment of point values for a Contract Valued Item, such that a monetary amount can be assigned to each point.
     */
    var points: DecimalType? = null



    /**
     * Expresses the product of the Contract Valued Item unitQuantity and the unitPriceAmt. For example, the formula: unit Quantity * unit Price (Cost per Point) * factor Number  * points = net Amount. Quantity, factor and points are assumed to be 1 if not supplied.
     */
    var net: Money? = null



    /**
     * Terms of valuation.
     */
    var payment: StringType? = null



    /**
     * When payment is due.
     */
    var paymentDate: DateTimeType? = null



    /**
     * Who will make payment.
     */
    var responsible: Reference? = null

    @JsonIgnore
    var responsibleTarget: Resource? = null

    /**
     * Who will receive payment.
     */
    var recipient: Reference? = null

    @JsonIgnore
    var recipientTarget: Resource? = null

    /**
     * Id  of the clause or question text related to the context of this valuedItem in the referenced form or QuestionnaireResponse.
     */
    var linkId: List<StringType>? = null



    /**
     * A set of security labels that define which terms are controlled by this condition.
     */
    var securityLabelNumber: List<UnsignedIntType>? = null




}

/**
 * A contributor to the content of a knowledge asset, including authors, editors, reviewers, and endorsers.
 * If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions
 */
class Contributor(
    val type: ContributorType,
    val name: StringType): Element() {


    /**
     * Contact details to assist a user in finding and communicating with the contributor.
     */
    var contact: List<ContactDetail>? = null




}

/**
 * The type of contributor.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class ContributorType(
    @JsonValue val text: String) {
    AUTHOR("author"),
    EDITOR("editor"),
    REVIEWER("reviewer"),
    ENDORSER("endorser")
}




/**
 * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
 * If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions
 */
class Count: Quantity()


/**
 * Financial instrument which may be used to reimburse or pay for health care products and services. Includes both insurance and self-payment.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class Coverage(
    val status: FinancialResourceStatusCodes,
    val beneficiary: Reference,
    val payor: List<Reference>): DomainResource() {


    /**
     * A unique identifier assigned to this coverage.
     */
    var identifier: List<Identifier>? = null



    /**
     * The type of coverage: social program, medical plan, accident coverage (workers compensation, auto), group health or payment by an individual or organization.
     */
    var type: CodeableConcept? = null



    /**
     * The party who 'owns' the insurance policy.
     */
    var policyHolder: Reference? = null

    @JsonIgnore
    var policyHolderTarget: Resource? = null

    /**
     * The party who has signed-up for or 'owns' the contractual relationship to the policy or to whom the benefit of the policy for services rendered to them or their family is due.
     */
    var subscriber: Reference? = null

    @JsonIgnore
    var subscriberTarget: Resource? = null

    /**
     * The insurer assigned ID for the Subscriber.
     */
    var subscriberId: StringType? = null



    /**
     * A unique identifier for a dependent under the coverage.
     */
    var dependent: StringType? = null



    /**
     * The relationship of beneficiary (patient) to the subscriber.
     */
    var relationship: CodeableConcept? = null



    /**
     * Time period during which the coverage is in force. A missing start date indicates the start date isn't known, a missing end date means the coverage is continuing to be in force.
     */
    var period: Period? = null



    /**
     * A suite of underwriter specific classifiers.
     */
    var `class`: List<CoverageClass>? = null



    /**
     * The order of applicability of this coverage relative to other coverages which are currently in force. Note, there may be gaps in the numbering and this does not imply primary, secondary etc. as the specific positioning of coverages depends upon the episode of care.
     */
    var order: PositiveIntType? = null



    /**
     * The insurer-specific identifier for the insurer-defined network of providers to which the beneficiary may seek treatment which will be covered at the 'in-network' rate, otherwise 'out of network' terms and conditions apply.
     */
    var network: StringType? = null



    /**
     * A suite of codes indicating the cost category and associated amount which have been detailed in the policy and may have been  included on the health card.
     */
    var costToBeneficiary: List<CoverageCostToBeneficiary>? = null



    /**
     * When 'subrogation=true' this insurance instance has been included not for adjudication but to provide insurers with the details to recover costs.
     */
    var subrogation: BooleanType? = null



    /**
     * The policy(s) which constitute this insurance coverage.
     */
    var contract: List<Reference>? = null

    @JsonIgnore
    var contractTarget: List<Resource>? = null


}

/**
 * Financial instrument which may be used to reimburse or pay for health care products and services. Includes both insurance and self-payment.
 */
class CoverageClass(
    val type: CodeableConcept,
    val value: StringType): BackboneElement() {


    /**
     * A short description for the class.
     */
    var name: StringType? = null




}

/**
 * Financial instrument which may be used to reimburse or pay for health care products and services. Includes both insurance and self-payment.
 */
class CoverageCostToBeneficiary: BackboneElement()
{


    /**
     * The category of patient centric costs associated with treatment.
     */
    var type: CodeableConcept? = null



    /**
     *
     */
    var valueQuantity: Quantity? = null



    /**
     *
     */
    var valueMoney: Money? = null



    /**
     * A suite of codes indicating exceptions or reductions to patient costs and their effective periods.
     */
    var exception: List<CoverageException>? = null




}

/**
 * The CoverageEligibilityRequest provides patient and insurance coverage information to an insurer for them to respond, in the form of an CoverageEligibilityResponse, with information regarding whether the stated coverage is valid and in-force and optionally to provide the insurance details of the policy.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class CoverageEligibilityRequest(
    val status: FinancialResourceStatusCodes,
    val purpose: List<EligibilityRequestPurpose>,
    val patient: Reference,
    val created: DateTimeType,
    val insurer: Reference): DomainResource() {


    /**
     * A unique identifier assigned to this coverage eligiblity request.
     */
    var identifier: List<Identifier>? = null



    /**
     * When the requestor expects the processor to complete processing.
     */
    var priority: CodeableConcept? = null



    /**
     *
     */
    var servicedDate: DateType? = null



    /**
     *
     */
    var servicedPeriod: Period? = null



    /**
     * Person who created the request.
     */
    var enterer: Reference? = null

    @JsonIgnore
    var entererTarget: Resource? = null

    /**
     * The provider which is responsible for the request.
     */
    var provider: Reference? = null

    @JsonIgnore
    var providerTarget: Resource? = null

    /**
     * Facility where the services are intended to be provided.
     */
    var facility: Reference? = null

    @JsonIgnore
    var facilityTarget: Resource? = null

    /**
     * Additional information codes regarding exceptions, special considerations, the condition, situation, prior or concurrent issues.
     */
    var supportingInfo: List<CoverageEligibilityRequestSupportingInfo>? = null



    /**
     * Financial instruments for reimbursement for the health care products and services.
     */
    var insurance: List<CoverageEligibilityRequestInsurance>? = null



    /**
     * Service categories or billable services for which benefit details and/or an authorization prior to service delivery may be required by the payor.
     */
    var item: List<CoverageEligibilityRequestItem>? = null




}

/**
 * The CoverageEligibilityRequest provides patient and insurance coverage information to an insurer for them to respond, in the form of an CoverageEligibilityResponse, with information regarding whether the stated coverage is valid and in-force and optionally to provide the insurance details of the policy.
 */
class CoverageEligibilityRequestDiagnosis: BackboneElement()
{


    /**
     *
     */
    var diagnosisCodeableConcept: CodeableConcept? = null



    /**
     *
     */
    var diagnosisReference: Reference? = null

    @JsonIgnore
    var diagnosisReferenceTarget: Resource? = null


}

/**
 * The CoverageEligibilityRequest provides patient and insurance coverage information to an insurer for them to respond, in the form of an CoverageEligibilityResponse, with information regarding whether the stated coverage is valid and in-force and optionally to provide the insurance details of the policy.
 */
class CoverageEligibilityRequestInsurance(
    val coverage: Reference): BackboneElement() {


    /**
     * A flag to indicate that this Coverage is to be used for evaluation of this request when set to true.
     */
    var focal: BooleanType? = null



    /**
     * A business agreement number established between the provider and the insurer for special business processing purposes.
     */
    var businessArrangement: StringType? = null




}

/**
 * The CoverageEligibilityRequest provides patient and insurance coverage information to an insurer for them to respond, in the form of an CoverageEligibilityResponse, with information regarding whether the stated coverage is valid and in-force and optionally to provide the insurance details of the policy.
 */
class CoverageEligibilityRequestItem: BackboneElement()
{


    /**
     * Exceptions, special conditions and supporting information applicable for this service or product line.
     */
    var supportingInfoSequence: List<PositiveIntType>? = null



    /**
     * Code to identify the general type of benefits under which products and services are provided.
     */
    var category: CodeableConcept? = null



    /**
     * This contains the product, service, drug or other billing code for the item.
     */
    var productOrService: CodeableConcept? = null



    /**
     * Item typification or modifiers codes to convey additional context for the product or service.
     */
    var modifier: List<CodeableConcept>? = null



    /**
     * The practitioner who is responsible for the product or service to be rendered to the patient.
     */
    var provider: Reference? = null

    @JsonIgnore
    var providerTarget: Resource? = null

    /**
     * The number of repetitions of a service or product.
     */
    var quantity: Quantity? = null



    /**
     * The amount charged to the patient by the provider for a single unit.
     */
    var unitPrice: Money? = null



    /**
     * Facility where the services will be provided.
     */
    var facility: Reference? = null

    @JsonIgnore
    var facilityTarget: Resource? = null

    /**
     * Patient diagnosis for which care is sought.
     */
    var diagnosis: List<CoverageEligibilityRequestDiagnosis>? = null



    /**
     * The plan/proposal/order describing the proposed service in detail.
     */
    var detail: List<Reference>? = null

    @JsonIgnore
    var detailTarget: List<Resource>? = null


}

/**
 * The CoverageEligibilityRequest provides patient and insurance coverage information to an insurer for them to respond, in the form of an CoverageEligibilityResponse, with information regarding whether the stated coverage is valid and in-force and optionally to provide the insurance details of the policy.
 */
class CoverageEligibilityRequestSupportingInfo(
    val sequence: PositiveIntType,
    val information: Reference): BackboneElement() {


    /**
     * The supporting materials are applicable for all detail items, product/servce categories and specific billing codes.
     */
    var appliesToAll: BooleanType? = null




}

/**
 * This resource provides eligibility and plan details from the processing of an CoverageEligibilityRequest resource.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class CoverageEligibilityResponse(
    val status: FinancialResourceStatusCodes,
    val purpose: List<EligibilityResponsePurpose>,
    val patient: Reference,
    val created: DateTimeType,
    val request: Reference,
    val outcome: RemittanceOutcome,
    val insurer: Reference): DomainResource() {


    /**
     * A unique identifier assigned to this coverage eligiblity request.
     */
    var identifier: List<Identifier>? = null



    /**
     *
     */
    var servicedDate: DateType? = null



    /**
     *
     */
    var servicedPeriod: Period? = null



    /**
     * The provider which is responsible for the request.
     */
    var requestor: Reference? = null

    @JsonIgnore
    var requestorTarget: Resource? = null

    /**
     * A human readable description of the status of the adjudication.
     */
    var disposition: StringType? = null



    /**
     * Financial instruments for reimbursement for the health care products and services.
     */
    var insurance: List<CoverageEligibilityResponseInsurance>? = null



    /**
     * A reference from the Insurer to which these services pertain to be used on further communication and as proof that the request occurred.
     */
    var preAuthRef: StringType? = null



    /**
     * A code for the form to be used for printing the content.
     */
    var form: CodeableConcept? = null



    /**
     * Errors encountered during the processing of the request.
     */
    var error: List<CoverageEligibilityResponseError>? = null




}

/**
 * This resource provides eligibility and plan details from the processing of an CoverageEligibilityRequest resource.
 */
class CoverageEligibilityResponseBenefit(
    val type: CodeableConcept): BackboneElement() {


    /**
     *
     */
    var allowedUnsignedInt: UnsignedIntType? = null



    /**
     *
     */
    var allowedString: StringType? = null



    /**
     *
     */
    var allowedMoney: Money? = null



    /**
     *
     */
    var usedUnsignedInt: UnsignedIntType? = null



    /**
     *
     */
    var usedString: StringType? = null



    /**
     *
     */
    var usedMoney: Money? = null




}

/**
 * This resource provides eligibility and plan details from the processing of an CoverageEligibilityRequest resource.
 */
class CoverageEligibilityResponseError(
    val code: CodeableConcept): BackboneElement()

/**
 * This resource provides eligibility and plan details from the processing of an CoverageEligibilityRequest resource.
 */
class CoverageEligibilityResponseInsurance(
    val coverage: Reference): BackboneElement() {


    /**
     * Flag indicating if the coverage provided is inforce currently if no service date(s) specified or for the whole duration of the service dates.
     */
    var inforce: BooleanType? = null



    /**
     * The term of the benefits documented in this response.
     */
    var benefitPeriod: Period? = null



    /**
     * Benefits and optionally current balances, and authorization details by category or service.
     */
    var item: List<CoverageEligibilityResponseItem>? = null




}

/**
 * This resource provides eligibility and plan details from the processing of an CoverageEligibilityRequest resource.
 */
class CoverageEligibilityResponseItem: BackboneElement()
{


    /**
     * Code to identify the general type of benefits under which products and services are provided.
     */
    var category: CodeableConcept? = null



    /**
     * This contains the product, service, drug or other billing code for the item.
     */
    var productOrService: CodeableConcept? = null



    /**
     * Item typification or modifiers codes to convey additional context for the product or service.
     */
    var modifier: List<CodeableConcept>? = null



    /**
     * The practitioner who is eligible for the provision of the product or service.
     */
    var provider: Reference? = null

    @JsonIgnore
    var providerTarget: Resource? = null

    /**
     * True if the indicated class of service is excluded from the plan, missing or False indicates the product or service is included in the coverage.
     */
    var excluded: BooleanType? = null



    /**
     * A short name or tag for the benefit.
     */
    var name: StringType? = null



    /**
     * A richer description of the benefit or services covered.
     */
    var description: StringType? = null



    /**
     * Is a flag to indicate whether the benefits refer to in-network providers or out-of-network providers.
     */
    var network: CodeableConcept? = null



    /**
     * Indicates if the benefits apply to an individual or to the family.
     */
    var unit: CodeableConcept? = null



    /**
     * The term or period of the values such as 'maximum lifetime benefit' or 'maximum annual visits'.
     */
    var term: CodeableConcept? = null



    /**
     * Benefits used to date.
     */
    var benefit: List<CoverageEligibilityResponseBenefit>? = null



    /**
     * A boolean flag indicating whether a preauthorization is required prior to actual service delivery.
     */
    var authorizationRequired: BooleanType? = null



    /**
     * Codes or comments regarding information or actions associated with the preauthorization.
     */
    var authorizationSupporting: List<CodeableConcept>? = null



    /**
     * A web location for obtaining requirements or descriptive information regarding the preauthorization.
     */
    var authorizationUrl: UriType? = null




}

/**
 * Financial instrument which may be used to reimburse or pay for health care products and services. Includes both insurance and self-payment.
 */
class CoverageException(
    val type: CodeableConcept): BackboneElement() {


    /**
     * The timeframe during when the exception is in force.
     */
    var period: Period? = null




}

/**
 * Describes a required data item for evaluation in terms of the type of data, and optional code or date-based filters of the data.
 * If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions
 */
class DataRequirement(
    val type: CodeType): Element() {


    /**
     * The profile of the required data, specified as the uri of the profile definition.
     */
    var profile: List<CanonicalType>? = null



    /**
     *
     */
    var subjectCodeableConcept: CodeableConcept? = null



    /**
     *
     */
    var subjectReference: Reference? = null

    @JsonIgnore
    var subjectReferenceTarget: Resource? = null

    /**
     * Indicates that specific elements of the type are referenced by the knowledge module and must be supported by the consumer in order to obtain an effective evaluation. This does not mean that a value is required for this element, only that the consuming system must understand the element and be able to provide values for it if they are available.
     *
     * The value of mustSupport SHALL be a FHIRPath resolveable on the type of the DataRequirement. The path SHALL consist only of identifiers, constant indexers, and .resolve() (see the [Simple FHIRPath Profile](fhirpath.html#simple) for full details).
     */
    var mustSupport: List<StringType>? = null



    /**
     * Code filters specify additional constraints on the data, specifying the value set of interest for a particular element of the data. Each code filter defines an additional constraint on the data, i.e. code filters are AND'ed, not OR'ed.
     */
    var codeFilter: List<DataRequirementCodeFilter>? = null



    /**
     * Date filters specify additional constraints on the data in terms of the applicable date range for specific elements. Each date filter specifies an additional constraint on the data, i.e. date filters are AND'ed, not OR'ed.
     */
    var dateFilter: List<DataRequirementDateFilter>? = null



    /**
     * Specifies a maximum number of results that are required (uses the _count search parameter).
     */
    var limit: PositiveIntType? = null



    /**
     * Specifies the order of the results to be returned.
     */
    var sort: List<DataRequirementSort>? = null




}

/**
 * Describes a required data item for evaluation in terms of the type of data, and optional code or date-based filters of the data.
 * If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions
 */
class DataRequirementCodeFilter: Element()
{


    /**
     * The code-valued attribute of the filter. The specified path SHALL be a FHIRPath resolveable on the specified type of the DataRequirement, and SHALL consist only of identifiers, constant indexers, and .resolve(). The path is allowed to contain qualifiers (.) to traverse sub-elements, as well as indexers ([x]) to traverse multiple-cardinality sub-elements (see the [Simple FHIRPath Profile](fhirpath.html#simple) for full details). Note that the index must be an integer constant. The path must resolve to an element of type code, Coding, or CodeableConcept.
     */
    var path: StringType? = null



    /**
     * A token parameter that refers to a search parameter defined on the specified type of the DataRequirement, and which searches on elements of type code, Coding, or CodeableConcept.
     */
    var searchParam: StringType? = null



    /**
     * The valueset for the code filter. The valueSet and code elements are additive. If valueSet is specified, the filter will return only those data items for which the value of the code-valued element specified in the path is a member of the specified valueset.
     */
    var valueSet: CanonicalType? = null



    /**
     * The codes for the code filter. If values are given, the filter will return only those data items for which the code-valued attribute specified by the path has a value that is one of the specified codes. If codes are specified in addition to a value set, the filter returns items matching a code in the value set or one of the specified codes.
     */
    var code: List<Coding>? = null




}

/**
 * Describes a required data item for evaluation in terms of the type of data, and optional code or date-based filters of the data.
 * If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions
 */
class DataRequirementDateFilter: Element()
{


    /**
     * The date-valued attribute of the filter. The specified path SHALL be a FHIRPath resolveable on the specified type of the DataRequirement, and SHALL consist only of identifiers, constant indexers, and .resolve(). The path is allowed to contain qualifiers (.) to traverse sub-elements, as well as indexers ([x]) to traverse multiple-cardinality sub-elements (see the [Simple FHIRPath Profile](fhirpath.html#simple) for full details). Note that the index must be an integer constant. The path must resolve to an element of type date, dateTime, Period, Schedule, or Timing.
     */
    var path: StringType? = null



    /**
     * A date parameter that refers to a search parameter defined on the specified type of the DataRequirement, and which searches on elements of type date, dateTime, Period, Schedule, or Timing.
     */
    var searchParam: StringType? = null



    /**
     *
     */
    var valueDateTime: DateTimeType? = null



    /**
     *
     */
    var valuePeriod: Period? = null



    /**
     *
     */
    var valueDuration: Duration? = null




}

/**
 * Describes a required data item for evaluation in terms of the type of data, and optional code or date-based filters of the data.
 * If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions
 */
class DataRequirementSort(
    val path: StringType,
    val direction: SortDirection): Element()

/**
 * A date or partial date (e.g. just year or year + month). There is no time zone. The format is a union of the schema types gYear, gYearMonth and date.  Dates SHALL be valid dates.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
data class DateType(@JsonValue val value: String) {
    companion object {
        @JvmStatic
        @JsonCreator
        fun create(value: String) = DateType(value)
    }
}




/**
 * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
data class DateTimeType(@JsonValue val value: String) {
    companion object {
        @JvmStatic
        @JsonCreator
        fun create(value: String) = DateTimeType(value)
    }
}




/**
 * The days of the week.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class DaysOfWeek(
    @JsonValue val text: String) {
    MON("mon"),
    TUE("tue"),
    WED("wed"),
    THU("thu"),
    FRI("fri"),
    SAT("sat"),
    SUN("sun")
}




/**
 * A rational number with implicit precision
 * Do not use an IEEE type floating point type, instead use something that works like a true decimal, with inbuilt precision (e.g. Java BigInteger)
 * If the element is present, it must have either a @value, an @id, or extensions
 */
data class DecimalType(@JsonValue val value: BigDecimal) {
    constructor(value: Int): this(value.toBigDecimal())
    companion object {
        @JvmStatic
        @JsonCreator
        fun create(value: BigDecimal) = DecimalType(value)
    }
}



/**
 * Indicates an actual or potential clinical issue with or between one or more active or proposed clinical actions for a patient; e.g. Drug-drug interaction, Ineffective treatment frequency, Procedure-condition conflict, etc.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class DetectedIssue(
    val status: ObservationStatus): DomainResource() {


    /**
     * Business identifier associated with the detected issue record.
     */
    var identifier: List<Identifier>? = null



    /**
     * Identifies the general type of issue identified.
     */
    var code: CodeableConcept? = null



    /**
     * Indicates the degree of importance associated with the identified issue based on the potential impact on the patient.
     */
    var severity: DetectedIssueSeverity? = null



    /**
     * Indicates the patient whose record the detected issue is associated with.
     */
    var patient: Reference? = null

    @JsonIgnore
    var patientTarget: Resource? = null

    /**
     *
     */
    var identifiedDateTime: DateTimeType? = null



    /**
     *
     */
    var identifiedPeriod: Period? = null



    /**
     * Individual or device responsible for the issue being raised.  For example, a decision support application or a pharmacist conducting a medication review.
     */
    var author: Reference? = null

    @JsonIgnore
    var authorTarget: Resource? = null

    /**
     * Indicates the resource representing the current activity or proposed activity that is potentially problematic.
     */
    var implicated: List<Reference>? = null

    @JsonIgnore
    var implicatedTarget: List<Resource>? = null

    /**
     * Supporting evidence or manifestations that provide the basis for identifying the detected issue such as a GuidanceResponse or MeasureReport.
     */
    var evidence: List<DetectedIssueEvidence>? = null



    /**
     * A textual explanation of the detected issue.
     */
    var detail: StringType? = null



    /**
     * The literature, knowledge-base or similar reference that describes the propensity for the detected issue identified.
     */
    var reference: UriType? = null



    /**
     * Indicates an action that has been taken or is committed to reduce or eliminate the likelihood of the risk identified by the detected issue from manifesting.  Can also reflect an observation of known mitigating factors that may reduce/eliminate the need for any action.
     */
    var mitigation: List<DetectedIssueMitigation>? = null




}

/**
 * Indicates an actual or potential clinical issue with or between one or more active or proposed clinical actions for a patient; e.g. Drug-drug interaction, Ineffective treatment frequency, Procedure-condition conflict, etc.
 */
class DetectedIssueEvidence: BackboneElement()
{


    /**
     * A manifestation that led to the recording of this detected issue.
     */
    var code: List<CodeableConcept>? = null



    /**
     * Links to resources that constitute evidence for the detected issue such as a GuidanceResponse or MeasureReport.
     */
    var detail: List<Reference>? = null

    @JsonIgnore
    var detailTarget: List<Resource>? = null


}

/**
 * Indicates an actual or potential clinical issue with or between one or more active or proposed clinical actions for a patient; e.g. Drug-drug interaction, Ineffective treatment frequency, Procedure-condition conflict, etc.
 */
class DetectedIssueMitigation(
    val action: CodeableConcept): BackboneElement() {


    /**
     * Indicates when the mitigating action was documented.
     */
    var date: DateTimeType? = null



    /**
     * Identifies the practitioner who determined the mitigation and takes responsibility for the mitigation step occurring.
     */
    var author: Reference? = null

    @JsonIgnore
    var authorTarget: Resource? = null


}

/**
 * Indicates the potential degree of impact of the identified issue on the patient.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class DetectedIssueSeverity(
    @JsonValue val text: String) {
    HIGH("high"),
    MODERATE("moderate"),
    LOW("low")
}




/**
 * A type of a manufactured item that is used in the provision of healthcare without being substantially changed through that activity. The device may be a medical or non-medical device.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class Device: DomainResource()
{


    /**
     * Unique instance identifiers assigned to a device by manufacturers other organizations or owners.
     */
    var identifier: List<Identifier>? = null



    /**
     * The reference to the definition for the device.
     */
    var definition: Reference? = null

    @JsonIgnore
    var definitionTarget: Resource? = null

    /**
     * Unique device identifier (UDI) assigned to device label or package.  Note that the Device may include multiple udiCarriers as it either may include just the udiCarrier for the jurisdiction it is sold, or for multiple jurisdictions it could have been sold.
     */
    var udiCarrier: List<DeviceUdiCarrier>? = null



    /**
     * Status of the Device availability.
     */
    var status: FHIRDeviceStatus? = null



    /**
     * Reason for the dtatus of the Device availability.
     */
    var statusReason: List<CodeableConcept>? = null



    /**
     * The distinct identification string as required by regulation for a human cell, tissue, or cellular and tissue-based product.
     */
    var distinctIdentifier: StringType? = null



    /**
     * A name of the manufacturer.
     */
    var manufacturer: StringType? = null



    /**
     * The date and time when the device was manufactured.
     */
    var manufactureDate: DateTimeType? = null



    /**
     * The date and time beyond which this device is no longer valid or should not be used (if applicable).
     */
    var expirationDate: DateTimeType? = null



    /**
     * Lot number assigned by the manufacturer.
     */
    var lotNumber: StringType? = null



    /**
     * The serial number assigned by the organization when the device was manufactured.
     */
    var serialNumber: StringType? = null



    /**
     * This represents the manufacturer's name of the device as provided by the device, from a UDI label, or by a person describing the Device.  This typically would be used when a person provides the name(s) or when the device represents one of the names available from DeviceDefinition.
     */
    var deviceName: List<DeviceDeviceName>? = null



    /**
     * The model number for the device.
     */
    var modelNumber: StringType? = null



    /**
     * The part number of the device.
     */
    var partNumber: StringType? = null



    /**
     * The kind or type of device.
     */
    var type: CodeableConcept? = null



    /**
     * The capabilities supported on a  device, the standards to which the device conforms for a particular purpose, and used for the communication.
     */
    var specialization: List<DeviceSpecialization>? = null



    /**
     * The actual design of the device or software version running on the device.
     */
    var version: List<DeviceVersion>? = null



    /**
     * The actual configuration settings of a device as it actually operates, e.g., regulation status, time properties.
     */
    var property: List<DeviceProperty>? = null



    /**
     * Patient information, If the device is affixed to a person.
     */
    var patient: Reference? = null

    @JsonIgnore
    var patientTarget: Resource? = null

    /**
     * An organization that is responsible for the provision and ongoing maintenance of the device.
     */
    var owner: Reference? = null

    @JsonIgnore
    var ownerTarget: Resource? = null

    /**
     * Contact details for an organization or a particular human that is responsible for the device.
     */
    var contact: List<ContactPoint>? = null



    /**
     * The place where the device can be found.
     */
    var location: Reference? = null

    @JsonIgnore
    var locationTarget: Resource? = null

    /**
     * A network address on which the device may be contacted directly.
     */
    var url: UriType? = null



    /**
     * Descriptive information, usage information or implantation information that is not captured in an existing element.
     */
    var note: List<Annotation>? = null



    /**
     * Provides additional safety characteristics about a medical device.  For example devices containing latex.
     */
    var safety: List<CodeableConcept>? = null



    /**
     * The parent device.
     */
    var parent: Reference? = null

    @JsonIgnore
    var parentTarget: Resource? = null


}

/**
 * The characteristics, operational status and capabilities of a medical-related component of a medical device.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class DeviceDefinition: DomainResource()
{


    /**
     * Unique instance identifiers assigned to a device by the software, manufacturers, other organizations or owners. For example: handle ID.
     */
    var identifier: List<Identifier>? = null



    /**
     * Unique device identifier (UDI) assigned to device label or package.  Note that the Device may include multiple udiCarriers as it either may include just the udiCarrier for the jurisdiction it is sold, or for multiple jurisdictions it could have been sold.
     */
    var udiDeviceIdentifier: List<DeviceDefinitionUdiDeviceIdentifier>? = null



    /**
     *
     */
    var manufacturerString: StringType? = null



    /**
     *
     */
    var manufacturerReference: Reference? = null

    @JsonIgnore
    var manufacturerReferenceTarget: Resource? = null

    /**
     * A name given to the device to identify it.
     */
    var deviceName: List<DeviceDefinitionDeviceName>? = null



    /**
     * The model number for the device.
     */
    var modelNumber: StringType? = null



    /**
     * What kind of device or device system this is.
     */
    var type: CodeableConcept? = null



    /**
     * The capabilities supported on a  device, the standards to which the device conforms for a particular purpose, and used for the communication.
     */
    var specialization: List<DeviceDefinitionSpecialization>? = null



    /**
     * The available versions of the device, e.g., software versions.
     */
    var version: List<StringType>? = null



    /**
     * Safety characteristics of the device.
     */
    var safety: List<CodeableConcept>? = null



    /**
     * Shelf Life and storage information.
     */
    var shelfLifeStorage: List<ProductShelfLife>? = null



    /**
     * Dimensions, color etc.
     */
    var physicalCharacteristics: ProdCharacteristic? = null



    /**
     * Language code for the human-readable text strings produced by the device (all supported).
     */
    var languageCode: List<CodeableConcept>? = null



    /**
     * Device capabilities.
     */
    var capability: List<DeviceDefinitionCapability>? = null



    /**
     * The actual configuration settings of a device as it actually operates, e.g., regulation status, time properties.
     */
    var property: List<DeviceDefinitionProperty>? = null



    /**
     * An organization that is responsible for the provision and ongoing maintenance of the device.
     */
    var owner: Reference? = null

    @JsonIgnore
    var ownerTarget: Resource? = null

    /**
     * Contact details for an organization or a particular human that is responsible for the device.
     */
    var contact: List<ContactPoint>? = null



    /**
     * A network address on which the device may be contacted directly.
     */
    var url: UriType? = null



    /**
     * Access to on-line information about the device.
     */
    var onlineInformation: UriType? = null



    /**
     * Descriptive information, usage information or implantation information that is not captured in an existing element.
     */
    var note: List<Annotation>? = null



    /**
     * The quantity of the device present in the packaging (e.g. the number of devices present in a pack, or the number of devices in the same package of the medicinal product).
     */
    var quantity: Quantity? = null



    /**
     * The parent device it can be part of.
     */
    var parentDevice: Reference? = null

    @JsonIgnore
    var parentDeviceTarget: Resource? = null

    /**
     * A substance used to create the material(s) of which the device is made.
     */
    var material: List<DeviceDefinitionMaterial>? = null




}

/**
 * The characteristics, operational status and capabilities of a medical-related component of a medical device.
 */
class DeviceDefinitionCapability(
    val type: CodeableConcept): BackboneElement() {


    /**
     * Description of capability.
     */
    var description: List<CodeableConcept>? = null




}

/**
 * The characteristics, operational status and capabilities of a medical-related component of a medical device.
 */
class DeviceDefinitionDeviceName(
    val name: StringType,
    val type: DeviceNameType): BackboneElement()

/**
 * The characteristics, operational status and capabilities of a medical-related component of a medical device.
 */
class DeviceDefinitionMaterial(
    val substance: CodeableConcept): BackboneElement() {


    /**
     * Indicates an alternative material of the device.
     */
    var alternate: BooleanType? = null



    /**
     * Whether the substance is a known or suspected allergen.
     */
    var allergenicIndicator: BooleanType? = null




}

/**
 * The characteristics, operational status and capabilities of a medical-related component of a medical device.
 */
class DeviceDefinitionProperty(
    val type: CodeableConcept): BackboneElement() {


    /**
     * Property value as a quantity.
     */
    var valueQuantity: List<Quantity>? = null



    /**
     * Property value as a code, e.g., NTP4 (synced to NTP).
     */
    var valueCode: List<CodeableConcept>? = null




}

/**
 * The characteristics, operational status and capabilities of a medical-related component of a medical device.
 */
class DeviceDefinitionSpecialization(
    val systemType: StringType): BackboneElement() {


    /**
     * The version of the standard that is used to operate and communicate.
     */
    var version: StringType? = null




}

/**
 * The characteristics, operational status and capabilities of a medical-related component of a medical device.
 */
class DeviceDefinitionUdiDeviceIdentifier(
    val deviceIdentifier: StringType,
    val issuer: UriType,
    val jurisdiction: UriType): BackboneElement()

/**
 * A type of a manufactured item that is used in the provision of healthcare without being substantially changed through that activity. The device may be a medical or non-medical device.
 */
class DeviceDeviceName(
    val name: StringType,
    val type: DeviceNameType): BackboneElement()

/**
 * Describes a measurement, calculation or setting capability of a medical device.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class DeviceMetric(
    val type: CodeableConcept,
    val category: DeviceMetricCategory): DomainResource() {


    /**
     * Unique instance identifiers assigned to a device by the device or gateway software, manufacturers, other organizations or owners. For example: handle ID.
     */
    var identifier: List<Identifier>? = null



    /**
     * Describes the unit that an observed value determined for this metric will have. For example: Percent, Seconds, etc.
     */
    var unit: CodeableConcept? = null



    /**
     * Describes the link to the  Device that this DeviceMetric belongs to and that contains administrative device information such as manufacturer, serial number, etc.
     */
    var source: Reference? = null

    @JsonIgnore
    var sourceTarget: Resource? = null

    /**
     * Describes the link to the  Device that this DeviceMetric belongs to and that provide information about the location of this DeviceMetric in the containment structure of the parent Device. An example would be a Device that represents a Channel. This reference can be used by a client application to distinguish DeviceMetrics that have the same type, but should be interpreted based on their containment location.
     */
    var parent: Reference? = null

    @JsonIgnore
    var parentTarget: Resource? = null

    /**
     * Indicates current operational state of the device. For example: On, Off, Standby, etc.
     */
    var operationalStatus: DeviceMetricOperationalStatus? = null



    /**
     * Describes the color representation for the metric. This is often used to aid clinicians to track and identify parameter types by color. In practice, consider a Patient Monitor that has ECG/HR and Pleth for example; the parameters are displayed in different characteristic colors, such as HR-blue, BP-green, and PR and SpO2- magenta.
     */
    var color: DeviceMetricColor? = null



    /**
     * Describes the measurement repetition time. This is not necessarily the same as the update period. The measurement repetition time can range from milliseconds up to hours. An example for a measurement repetition time in the range of milliseconds is the sampling rate of an ECG. An example for a measurement repetition time in the range of hours is a NIBP that is triggered automatically every hour. The update period may be different than the measurement repetition time, if the device does not update the published observed value with the same frequency as it was measured.
     */
    var measurementPeriod: Timing? = null



    /**
     * Describes the calibrations that have been performed or that are required to be performed.
     */
    var calibration: List<DeviceMetricCalibration>? = null




}

/**
 * Describes a measurement, calculation or setting capability of a medical device.
 */
class DeviceMetricCalibration: BackboneElement()
{


    /**
     * Describes the type of the calibration method.
     */
    var type: DeviceMetricCalibrationType? = null



    /**
     * Describes the state of the calibration.
     */
    var state: DeviceMetricCalibrationState? = null



    /**
     * Describes the time last calibration has been performed.
     */
    var time: InstantType? = null




}

/**
 * Describes the state of a metric calibration.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class DeviceMetricCalibrationState(
    @JsonValue val text: String) {
    NOT_CALIBRATED("not-calibrated"),
    CALIBRATION_REQUIRED("calibration-required"),
    CALIBRATED("calibrated"),
    UNSPECIFIED("unspecified")
}




/**
 * Describes the type of a metric calibration.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class DeviceMetricCalibrationType(
    @JsonValue val text: String) {
    UNSPECIFIED("unspecified"),
    OFFSET("offset"),
    GAIN("gain"),
    TWO_POINT("two-point")
}




/**
 * Describes the category of the metric.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class DeviceMetricCategory(
    @JsonValue val text: String) {
    MEASUREMENT("measurement"),
    SETTING("setting"),
    CALCULATION("calculation"),
    UNSPECIFIED("unspecified")
}




/**
 * Describes the typical color of representation.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class DeviceMetricColor(
    @JsonValue val text: String) {
    BLACK("black"),
    RED("red"),
    GREEN("green"),
    YELLOW("yellow"),
    BLUE("blue"),
    MAGENTA("magenta"),
    CYAN("cyan"),
    WHITE("white")
}




/**
 * Describes the operational status of the DeviceMetric.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class DeviceMetricOperationalStatus(
    @JsonValue val text: String) {
    ON("on"),
    OFF("off"),
    STANDBY("standby"),
    ENTERED_IN_ERROR("entered-in-error")
}




/**
 * The type of name the device is referred by.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class DeviceNameType(
    @JsonValue val text: String) {
    UDI_LABEL_NAME("udi-label-name"),
    USER_FRIENDLY_NAME("user-friendly-name"),
    PATIENT_REPORTED_NAME("patient-reported-name"),
    MANUFACTURER_NAME("manufacturer-name"),
    MODEL_NAME("model-name"),
    OTHER("other")
}




/**
 * A type of a manufactured item that is used in the provision of healthcare without being substantially changed through that activity. The device may be a medical or non-medical device.
 */
class DeviceProperty(
    val type: CodeableConcept): BackboneElement() {


    /**
     * Property value as a quantity.
     */
    var valueQuantity: List<Quantity>? = null



    /**
     * Property value as a code, e.g., NTP4 (synced to NTP).
     */
    var valueCode: List<CodeableConcept>? = null




}

/**
 * Represents a request for a patient to employ a medical device. The device may be an implantable device, or an external assistive device, such as a walker.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class DeviceRequest(
    val intent: RequestIntent,
    val subject: Reference): DomainResource() {


    /**
     * Identifiers assigned to this order by the orderer or by the receiver.
     */
    var identifier: List<Identifier>? = null



    /**
     * The URL pointing to a FHIR-defined protocol, guideline, orderset or other definition that is adhered to in whole or in part by this DeviceRequest.
     */
    var instantiatesCanonical: List<CanonicalType>? = null



    /**
     * The URL pointing to an externally maintained protocol, guideline, orderset or other definition that is adhered to in whole or in part by this DeviceRequest.
     */
    var instantiatesUri: List<UriType>? = null



    /**
     * Plan/proposal/order fulfilled by this request.
     */
    var basedOn: List<Reference>? = null

    @JsonIgnore
    var basedOnTarget: List<Resource>? = null

    /**
     * The request takes the place of the referenced completed or terminated request(s).
     */
    var priorRequest: List<Reference>? = null

    @JsonIgnore
    var priorRequestTarget: List<Resource>? = null

    /**
     * Composite request this is part of.
     */
    var groupIdentifier: Identifier? = null



    /**
     * The status of the request.
     */
    var status: RequestStatus? = null



    /**
     * Indicates how quickly the {{title}} should be addressed with respect to other requests.
     */
    var priority: RequestPriority? = null



    /**
     *
     */
    var codeReference: Reference? = null

    @JsonIgnore
    var codeReferenceTarget: Resource? = null

    /**
     *
     */
    var codeCodeableConcept: CodeableConcept? = null



    /**
     * Specific parameters for the ordered item.  For example, the prism value for lenses.
     */
    var parameter: List<DeviceRequestParameter>? = null



    /**
     * An encounter that provides additional context in which this request is made.
     */
    var encounter: Reference? = null

    @JsonIgnore
    var encounterTarget: Resource? = null

    /**
     *
     */
    var occurrenceDateTime: DateTimeType? = null



    /**
     *
     */
    var occurrencePeriod: Period? = null



    /**
     *
     */
    var occurrenceTiming: Timing? = null



    /**
     * When the request transitioned to being actionable.
     */
    var authoredOn: DateTimeType? = null



    /**
     * The individual who initiated the request and has responsibility for its activation.
     */
    var requester: Reference? = null

    @JsonIgnore
    var requesterTarget: Resource? = null

    /**
     * Desired type of performer for doing the diagnostic testing.
     */
    var performerType: CodeableConcept? = null



    /**
     * The desired performer for doing the diagnostic testing.
     */
    var performer: Reference? = null

    @JsonIgnore
    var performerTarget: Resource? = null

    /**
     * Reason or justification for the use of this device.
     */
    var reasonCode: List<CodeableConcept>? = null



    /**
     * Reason or justification for the use of this device.
     */
    var reasonReference: List<Reference>? = null

    @JsonIgnore
    var reasonReferenceTarget: List<Resource>? = null

    /**
     * Insurance plans, coverage extensions, pre-authorizations and/or pre-determinations that may be required for delivering the requested service.
     */
    var insurance: List<Reference>? = null

    @JsonIgnore
    var insuranceTarget: List<Resource>? = null

    /**
     * Additional clinical information about the patient that may influence the request fulfilment.  For example, this may include where on the subject's body the device will be used (i.e. the target site).
     */
    var supportingInfo: List<Reference>? = null

    @JsonIgnore
    var supportingInfoTarget: List<Resource>? = null

    /**
     * Details about this request that were not represented at all or sufficiently in one of the attributes provided in a class. These may include for example a comment, an instruction, or a note associated with the statement.
     */
    var note: List<Annotation>? = null



    /**
     * Key events in the history of the request.
     */
    var relevantHistory: List<Reference>? = null

    @JsonIgnore
    var relevantHistoryTarget: List<Resource>? = null


}

/**
 * Represents a request for a patient to employ a medical device. The device may be an implantable device, or an external assistive device, such as a walker.
 */
class DeviceRequestParameter: BackboneElement()
{


    /**
     * A code or string that identifies the device detail being asserted.
     */
    var code: CodeableConcept? = null



    /**
     *
     */
    var valueCodeableConcept: CodeableConcept? = null



    /**
     *
     */
    var valueQuantity: Quantity? = null



    /**
     *
     */
    var valueRange: Range? = null



    /**
     *
     */
    var valueBoolean: BooleanType? = null




}

/**
 * A type of a manufactured item that is used in the provision of healthcare without being substantially changed through that activity. The device may be a medical or non-medical device.
 */
class DeviceSpecialization(
    val systemType: CodeableConcept): BackboneElement() {


    /**
     * The version of the standard that is used to operate and communicate.
     */
    var version: StringType? = null




}

/**
 * A type of a manufactured item that is used in the provision of healthcare without being substantially changed through that activity. The device may be a medical or non-medical device.
 */
class DeviceUdiCarrier: BackboneElement()
{


    /**
     * The device identifier (DI) is a mandatory, fixed portion of a UDI that identifies the labeler and the specific version or model of a device.
     */
    var deviceIdentifier: StringType? = null



    /**
     * Organization that is charged with issuing UDIs for devices.  For example, the US FDA issuers include :
     * 1) GS1:
     * http://hl7.org/fhir/NamingSystem/gs1-di,
     * 2) HIBCC:
     * http://hl7.org/fhir/NamingSystem/hibcc-dI,
     * 3) ICCBBA for blood containers:
     * http://hl7.org/fhir/NamingSystem/iccbba-blood-di,
     * 4) ICCBA for other devices:
     * http://hl7.org/fhir/NamingSystem/iccbba-other-di.
     */
    var issuer: UriType? = null



    /**
     * The identity of the authoritative source for UDI generation within a  jurisdiction.  All UDIs are globally unique within a single namespace with the appropriate repository uri as the system.  For example,  UDIs of devices managed in the U.S. by the FDA, the value is  http://hl7.org/fhir/NamingSystem/fda-udi.
     */
    var jurisdiction: UriType? = null



    /**
     * The full UDI carrier of the Automatic Identification and Data Capture (AIDC) technology representation of the barcode string as printed on the packaging of the device - e.g., a barcode or RFID.   Because of limitations on character sets in XML and the need to round-trip JSON data through XML, AIDC Formats *SHALL* be base64 encoded.
     */
    var carrierAIDC: Base64BinaryType? = null



    /**
     * The full UDI carrier as the human readable form (HRF) representation of the barcode string as printed on the packaging of the device.
     */
    var carrierHRF: StringType? = null



    /**
     * A coded entry to indicate how the data was entered.
     */
    var entryType: UDIEntryType? = null




}

/**
 * A record of a device being used by a patient where the record is the result of a report from the patient or another clinician.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class DeviceUseStatement(
    val status: DeviceUseStatementStatus,
    val subject: Reference,
    val device: Reference): DomainResource() {


    /**
     * An external identifier for this statement such as an IRI.
     */
    var identifier: List<Identifier>? = null



    /**
     * A plan, proposal or order that is fulfilled in whole or in part by this DeviceUseStatement.
     */
    var basedOn: List<Reference>? = null

    @JsonIgnore
    var basedOnTarget: List<Resource>? = null

    /**
     * Allows linking the DeviceUseStatement to the underlying Request, or to other information that supports or is used to derive the DeviceUseStatement.
     */
    var derivedFrom: List<Reference>? = null

    @JsonIgnore
    var derivedFromTarget: List<Resource>? = null

    /**
     *
     */
    var timingTiming: Timing? = null



    /**
     *
     */
    var timingPeriod: Period? = null



    /**
     *
     */
    var timingDateTime: DateTimeType? = null



    /**
     * The time at which the statement was made/recorded.
     */
    var recordedOn: DateTimeType? = null



    /**
     * Who reported the device was being used by the patient.
     */
    var source: Reference? = null

    @JsonIgnore
    var sourceTarget: Resource? = null

    /**
     * Reason or justification for the use of the device.
     */
    var reasonCode: List<CodeableConcept>? = null



    /**
     * Indicates another resource whose existence justifies this DeviceUseStatement.
     */
    var reasonReference: List<Reference>? = null

    @JsonIgnore
    var reasonReferenceTarget: List<Resource>? = null

    /**
     * Indicates the anotomic location on the subject's body where the device was used ( i.e. the target).
     */
    var bodySite: CodeableConcept? = null



    /**
     * Details about the device statement that were not represented at all or sufficiently in one of the attributes provided in a class. These may include for example a comment, an instruction, or a note associated with the statement.
     */
    var note: List<Annotation>? = null




}

/**
 * A coded concept indicating the current status of the Device Usage.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class DeviceUseStatementStatus(
    @JsonValue val text: String) {
    ACTIVE("active"),
    COMPLETED("completed"),
    ENTERED_IN_ERROR("entered-in-error"),
    INTENDED("intended"),
    STOPPED("stopped"),
    ON_HOLD("on-hold")
}




/**
 * A type of a manufactured item that is used in the provision of healthcare without being substantially changed through that activity. The device may be a medical or non-medical device.
 */
class DeviceVersion(
    val value: StringType): BackboneElement() {


    /**
     * The type of the device version.
     */
    var type: CodeableConcept? = null



    /**
     * A single component of the device version.
     */
    var component: Identifier? = null




}

/**
 * The findings and interpretation of diagnostic  tests performed on patients, groups of patients, devices, and locations, and/or specimens derived from these. The report includes clinical context such as requesting and provider information, and some mix of atomic results, images, textual and coded interpretations, and formatted representation of diagnostic reports.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class DiagnosticReport(
    val status: DiagnosticReportStatus,
    val code: CodeableConcept): DomainResource() {


    /**
     * Identifiers assigned to this report by the performer or other systems.
     */
    var identifier: List<Identifier>? = null



    /**
     * Details concerning a service requested.
     */
    var basedOn: List<Reference>? = null

    @JsonIgnore
    var basedOnTarget: List<Resource>? = null

    /**
     * A code that classifies the clinical discipline, department or diagnostic service that created the report (e.g. cardiology, biochemistry, hematology, MRI). This is used for searching, sorting and display purposes.
     */
    var category: List<CodeableConcept>? = null



    /**
     * The subject of the report. Usually, but not always, this is a patient. However, diagnostic services also perform analyses on specimens collected from a variety of other sources.
     */
    var subject: Reference? = null

    @JsonIgnore
    var subjectTarget: Resource? = null

    /**
     * The healthcare event  (e.g. a patient and healthcare provider interaction) which this DiagnosticReport is about.
     */
    var encounter: Reference? = null

    @JsonIgnore
    var encounterTarget: Resource? = null

    /**
     *
     */
    var effectiveDateTime: DateTimeType? = null



    /**
     *
     */
    var effectivePeriod: Period? = null



    /**
     * The date and time that this version of the report was made available to providers, typically after the report was reviewed and verified.
     */
    var issued: InstantType? = null



    /**
     * The diagnostic service that is responsible for issuing the report.
     */
    var performer: List<Reference>? = null

    @JsonIgnore
    var performerTarget: List<Resource>? = null

    /**
     * The practitioner or organization that is responsible for the report's conclusions and interpretations.
     */
    var resultsInterpreter: List<Reference>? = null

    @JsonIgnore
    var resultsInterpreterTarget: List<Resource>? = null

    /**
     * Details about the specimens on which this diagnostic report is based.
     */
    var specimen: List<Reference>? = null

    @JsonIgnore
    var specimenTarget: List<Resource>? = null

    /**
     * [Observations](observation.html)  that are part of this diagnostic report.
     */
    var result: List<Reference>? = null

    @JsonIgnore
    var resultTarget: List<Resource>? = null

    /**
     * One or more links to full details of any imaging performed during the diagnostic investigation. Typically, this is imaging performed by DICOM enabled modalities, but this is not required. A fully enabled PACS viewer can use this information to provide views of the source images.
     */
    var imagingStudy: List<Reference>? = null

    @JsonIgnore
    var imagingStudyTarget: List<Resource>? = null

    /**
     * A list of key images associated with this report. The images are generally created during the diagnostic process, and may be directly of the patient, or of treated specimens (i.e. slides of interest).
     */
    var media: List<DiagnosticReportMedia>? = null



    /**
     * Concise and clinically contextualized summary conclusion (interpretation/impression) of the diagnostic report.
     */
    var conclusion: StringType? = null



    /**
     * One or more codes that represent the summary conclusion (interpretation/impression) of the diagnostic report.
     */
    var conclusionCode: List<CodeableConcept>? = null



    /**
     * Rich text representation of the entire result as issued by the diagnostic service. Multiple formats are allowed but they SHALL be semantically equivalent.
     */
    var presentedForm: List<Attachment>? = null




}

/**
 * The findings and interpretation of diagnostic  tests performed on patients, groups of patients, devices, and locations, and/or specimens derived from these. The report includes clinical context such as requesting and provider information, and some mix of atomic results, images, textual and coded interpretations, and formatted representation of diagnostic reports.
 */
class DiagnosticReportMedia(
    val link: Reference): BackboneElement() {


    /**
     * A comment about the image. Typically, this is used to provide an explanation for why the image is included, or to draw the viewer's attention to important features.
     */
    var comment: StringType? = null




}

/**
 * The status of the diagnostic report.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class DiagnosticReportStatus(
    @JsonValue val text: String) {
    REGISTERED("registered"),
    PARTIAL("partial"),
    PRELIMINARY("preliminary"),
    FINAL("final"),
    AMENDED("amended"),
    CORRECTED("corrected"),
    APPENDED("appended"),
    CANCELLED("cancelled"),
    ENTERED_IN_ERROR("entered-in-error"),
    UNKNOWN("unknown")
}




/**
 * How an element value is interpreted when discrimination is evaluated.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class DiscriminatorType(
    @JsonValue val text: String) {
    VALUE("value"),
    EXISTS("exists"),
    PATTERN("pattern"),
    TYPE("type"),
    PROFILE("profile")
}




/**
 * A length - a value with a unit that is a physical distance.
 * If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions
 */
class Distance: Quantity()


/**
 * A collection of documents compiled for a purpose together with metadata that applies to the collection.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class DocumentManifest(
    val status: DocumentReferenceStatus,
    val content: List<Reference>): DomainResource() {


    /**
     * A single identifier that uniquely identifies this manifest. Principally used to refer to the manifest in non-FHIR contexts.
     */
    var masterIdentifier: Identifier? = null



    /**
     * Other identifiers associated with the document manifest, including version independent  identifiers.
     */
    var identifier: List<Identifier>? = null



    /**
     * The code specifying the type of clinical activity that resulted in placing the associated content into the DocumentManifest.
     */
    var type: CodeableConcept? = null



    /**
     * Who or what the set of documents is about. The documents can be about a person, (patient or healthcare practitioner), a device (i.e. machine) or even a group of subjects (such as a document about a herd of farm animals, or a set of patients that share a common exposure). If the documents cross more than one subject, then more than one subject is allowed here (unusual use case).
     */
    var subject: Reference? = null

    @JsonIgnore
    var subjectTarget: Resource? = null

    /**
     * When the document manifest was created for submission to the server (not necessarily the same thing as the actual resource last modified time, since it may be modified, replicated, etc.).
     */
    var created: DateTimeType? = null



    /**
     * Identifies who is the author of the manifest. Manifest author is not necessarly the author of the references included.
     */
    var author: List<Reference>? = null

    @JsonIgnore
    var authorTarget: List<Resource>? = null

    /**
     * A patient, practitioner, or organization for which this set of documents is intended.
     */
    var recipient: List<Reference>? = null

    @JsonIgnore
    var recipientTarget: List<Resource>? = null

    /**
     * Identifies the source system, application, or software that produced the document manifest.
     */
    var source: UriType? = null



    /**
     * Human-readable description of the source document. This is sometimes known as the "title".
     */
    var description: StringType? = null



    /**
     * Related identifiers or resources associated with the DocumentManifest.
     */
    var related: List<DocumentManifestRelated>? = null




}

/**
 * A collection of documents compiled for a purpose together with metadata that applies to the collection.
 */
class DocumentManifestRelated: BackboneElement()
{


    /**
     * Related identifier to this DocumentManifest.  For example, Order numbers, accession numbers, XDW workflow numbers.
     */
    var identifier: Identifier? = null



    /**
     * Related Resource to this DocumentManifest. For example, Order, ServiceRequest,  Procedure, EligibilityRequest, etc.
     */
    var ref: Reference? = null

    @JsonIgnore
    var refTarget: Resource? = null


}

/**
 * Whether the application produces or consumes documents.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class DocumentMode(
    @JsonValue val text: String) {
    PRODUCER("producer"),
    CONSUMER("consumer")
}




/**
 * A reference to a document of any kind for any purpose. Provides metadata about the document so that the document can be discovered and managed. The scope of a document is any seralized object with a mime-type, so includes formal patient centric documents (CDA), cliical notes, scanned paper, and non-patient specific documents like policy text.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class DocumentReference(
    val status: DocumentReferenceStatus,
    val content: List<DocumentReferenceContent>): DomainResource() {


    /**
     * Document identifier as assigned by the source of the document. This identifier is specific to this version of the document. This unique identifier may be used elsewhere to identify this version of the document.
     */
    var masterIdentifier: Identifier? = null



    /**
     * Other identifiers associated with the document, including version independent identifiers.
     */
    var identifier: List<Identifier>? = null



    /**
     * The status of the underlying document.
     */
    var docStatus: CompositionStatus? = null



    /**
     * Specifies the particular kind of document referenced  (e.g. History and Physical, Discharge Summary, Progress Note). This usually equates to the purpose of making the document referenced.
     */
    var type: CodeableConcept? = null



    /**
     * A categorization for the type of document referenced - helps for indexing and searching. This may be implied by or derived from the code specified in the DocumentReference.type.
     */
    var category: List<CodeableConcept>? = null



    /**
     * Who or what the document is about. The document can be about a person, (patient or healthcare practitioner), a device (e.g. a machine) or even a group of subjects (such as a document about a herd of farm animals, or a set of patients that share a common exposure).
     */
    var subject: Reference? = null

    @JsonIgnore
    var subjectTarget: Resource? = null

    /**
     * When the document reference was created.
     */
    var date: InstantType? = null



    /**
     * Identifies who is responsible for adding the information to the document.
     */
    var author: List<Reference>? = null

    @JsonIgnore
    var authorTarget: List<Resource>? = null

    /**
     * Which person or organization authenticates that this document is valid.
     */
    var authenticator: Reference? = null

    @JsonIgnore
    var authenticatorTarget: Resource? = null

    /**
     * Identifies the organization or group who is responsible for ongoing maintenance of and access to the document.
     */
    var custodian: Reference? = null

    @JsonIgnore
    var custodianTarget: Resource? = null

    /**
     * Relationships that this document has with other document references that already exist.
     */
    var relatesTo: List<DocumentReferenceRelatesTo>? = null



    /**
     * Human-readable description of the source document.
     */
    var description: StringType? = null



    /**
     * A set of Security-Tag codes specifying the level of privacy/security of the Document. Note that DocumentReference.meta.security contains the security labels of the "reference" to the document, while DocumentReference.securityLabel contains a snapshot of the security labels on the document the reference refers to.
     */
    var securityLabel: List<CodeableConcept>? = null



    /**
     * The clinical context in which the document was prepared.
     */
    var context: DocumentReferenceContext? = null




}

/**
 * A reference to a document of any kind for any purpose. Provides metadata about the document so that the document can be discovered and managed. The scope of a document is any seralized object with a mime-type, so includes formal patient centric documents (CDA), cliical notes, scanned paper, and non-patient specific documents like policy text.
 */
class DocumentReferenceContent(
    val attachment: Attachment): BackboneElement() {


    /**
     * An identifier of the document encoding, structure, and template that the document conforms to beyond the base format indicated in the mimeType.
     */
    var format: Coding? = null




}

/**
 * A reference to a document of any kind for any purpose. Provides metadata about the document so that the document can be discovered and managed. The scope of a document is any seralized object with a mime-type, so includes formal patient centric documents (CDA), cliical notes, scanned paper, and non-patient specific documents like policy text.
 */
class DocumentReferenceContext: BackboneElement()
{


    /**
     * Describes the clinical encounter or type of care that the document content is associated with.
     */
    var encounter: List<Reference>? = null

    @JsonIgnore
    var encounterTarget: List<Resource>? = null

    /**
     * This list of codes represents the main clinical acts, such as a colonoscopy or an appendectomy, being documented. In some cases, the event is inherent in the type Code, such as a "History and Physical Report" in which the procedure being documented is necessarily a "History and Physical" act.
     */
    var event: List<CodeableConcept>? = null



    /**
     * The time period over which the service that is described by the document was provided.
     */
    var period: Period? = null



    /**
     * The kind of facility where the patient was seen.
     */
    var facilityType: CodeableConcept? = null



    /**
     * This property may convey specifics about the practice setting where the content was created, often reflecting the clinical specialty.
     */
    var practiceSetting: CodeableConcept? = null



    /**
     * The Patient Information as known when the document was published. May be a reference to a version specific, or contained.
     */
    var sourcePatientInfo: Reference? = null

    @JsonIgnore
    var sourcePatientInfoTarget: Resource? = null

    /**
     * Related identifiers or resources associated with the DocumentReference.
     */
    var related: List<Reference>? = null

    @JsonIgnore
    var relatedTarget: List<Resource>? = null


}

/**
 * A reference to a document of any kind for any purpose. Provides metadata about the document so that the document can be discovered and managed. The scope of a document is any seralized object with a mime-type, so includes formal patient centric documents (CDA), cliical notes, scanned paper, and non-patient specific documents like policy text.
 */
class DocumentReferenceRelatesTo(
    val code: DocumentRelationshipType,
    val target: Reference): BackboneElement()

/**
 *
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class DocumentReferenceStatus(
    @JsonValue val text: String) {
    CURRENT("current"),
    SUPERSEDED("superseded"),
    ENTERED_IN_ERROR("entered-in-error")
}




/**
 * The type of relationship between documents.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class DocumentRelationshipType(
    @JsonValue val text: String) {
    REPLACES("replaces"),
    TRANSFORMS("transforms"),
    SIGNS("signs"),
    APPENDS("appends")
}




/**
 * A resource that includes narrative, extensions, and contained resources.
 */
open class DomainResource: Resource()
{


    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    var text: Narrative? = null



    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    var contained: List<Resource>? = null



    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    var extension: List<Extension>? = null



    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    var modifierExtension: List<Extension>? = null




}

/**
 * Indicates how the medication is/was taken or should be taken by the patient.
 * If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions
 */
class Dosage: BackboneElement()
{


    /**
     * Indicates the order in which the dosage instructions should be applied or interpreted.
     */
    var sequence: IntegerType? = null



    /**
     * Free text dosage instructions e.g. SIG.
     */
    var text: StringType? = null



    /**
     * Supplemental instructions to the patient on how to take the medication  (e.g. "with meals" or"take half to one hour before food") or warnings for the patient about the medication (e.g. "may cause drowsiness" or "avoid exposure of skin to direct sunlight or sunlamps").
     */
    var additionalInstruction: List<CodeableConcept>? = null



    /**
     * Instructions in terms that are understood by the patient or consumer.
     */
    var patientInstruction: StringType? = null



    /**
     * When medication should be administered.
     */
    var timing: Timing? = null



    /**
     *
     */
    var asNeededBoolean: BooleanType? = null



    /**
     *
     */
    var asNeededCodeableConcept: CodeableConcept? = null



    /**
     * Body site to administer to.
     */
    var site: CodeableConcept? = null



    /**
     * How drug should enter body.
     */
    var route: CodeableConcept? = null



    /**
     * Technique for administering medication.
     */
    var method: CodeableConcept? = null



    /**
     * The amount of medication administered.
     */
    var doseAndRate: List<DosageDoseAndRate>? = null



    /**
     * Upper limit on medication per unit of time.
     */
    var maxDosePerPeriod: Ratio? = null



    /**
     * Upper limit on medication per administration.
     */
    var maxDosePerAdministration: Quantity? = null



    /**
     * Upper limit on medication per lifetime of the patient.
     */
    var maxDosePerLifetime: Quantity? = null




}

/**
 * Indicates how the medication is/was taken or should be taken by the patient.
 * If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions
 */
class DosageDoseAndRate: BackboneElement()
{


    /**
     * The kind of dose or rate specified, for example, ordered or calculated.
     */
    var type: CodeableConcept? = null



    /**
     *
     */
    var doseRange: Range? = null



    /**
     *
     */
    var doseQuantity: Quantity? = null



    /**
     *
     */
    var rateRatio: Ratio? = null



    /**
     *
     */
    var rateRange: Range? = null



    /**
     *
     */
    var rateQuantity: Quantity? = null




}

/**
 * A length of time.
 * If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions
 */
class Duration: Quantity()


/**
 * The EffectEvidenceSynthesis resource describes the difference in an outcome between exposures states in a population where the effect estimate is derived from a combination of research studies.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class EffectEvidenceSynthesis(
    val status: PublicationStatus,
    val population: Reference,
    val exposure: Reference,
    val exposureAlternative: Reference,
    val outcome: Reference): DomainResource() {


    /**
     * An absolute URI that is used to identify this effect evidence synthesis when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which at which an authoritative instance of this effect evidence synthesis is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the effect evidence synthesis is stored on different servers.
     */
    var url: UriType? = null



    /**
     * A formal identifier that is used to identify this effect evidence synthesis when it is represented in other formats, or referenced in a specification, model, design or an instance.
     */
    var identifier: List<Identifier>? = null



    /**
     * The identifier that is used to identify this version of the effect evidence synthesis when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the effect evidence synthesis author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
     */
    var version: StringType? = null



    /**
     * A natural language name identifying the effect evidence synthesis. This name should be usable as an identifier for the module by machine processing applications such as code generation.
     */
    var name: StringType? = null



    /**
     * A short, descriptive, user-friendly title for the effect evidence synthesis.
     */
    var title: StringType? = null



    /**
     * The date  (and optionally time) when the effect evidence synthesis was published. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the effect evidence synthesis changes.
     */
    var date: DateTimeType? = null



    /**
     * The name of the organization or individual that published the effect evidence synthesis.
     */
    var publisher: StringType? = null



    /**
     * Contact details to assist a user in finding and communicating with the publisher.
     */
    var contact: List<ContactDetail>? = null



    /**
     * A free text natural language description of the effect evidence synthesis from a consumer's perspective.
     */
    var description: MarkdownType? = null



    /**
     * A human-readable string to clarify or explain concepts about the resource.
     */
    var note: List<Annotation>? = null



    /**
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate effect evidence synthesis instances.
     */
    var useContext: List<UsageContext>? = null



    /**
     * A legal or geographic region in which the effect evidence synthesis is intended to be used.
     */
    var jurisdiction: List<CodeableConcept>? = null



    /**
     * A copyright statement relating to the effect evidence synthesis and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the effect evidence synthesis.
     */
    var copyright: MarkdownType? = null



    /**
     * The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage.
     */
    var approvalDate: DateType? = null



    /**
     * The date on which the resource content was last reviewed. Review happens periodically after approval but does not change the original approval date.
     */
    var lastReviewDate: DateType? = null



    /**
     * The period during which the effect evidence synthesis content was or is planned to be in active use.
     */
    var effectivePeriod: Period? = null



    /**
     * Descriptive topics related to the content of the EffectEvidenceSynthesis. Topics provide a high-level categorization grouping types of EffectEvidenceSynthesiss that can be useful for filtering and searching.
     */
    var topic: List<CodeableConcept>? = null



    /**
     * An individiual or organization primarily involved in the creation and maintenance of the content.
     */
    var author: List<ContactDetail>? = null



    /**
     * An individual or organization primarily responsible for internal coherence of the content.
     */
    var editor: List<ContactDetail>? = null



    /**
     * An individual or organization primarily responsible for review of some aspect of the content.
     */
    var reviewer: List<ContactDetail>? = null



    /**
     * An individual or organization responsible for officially endorsing the content for use in some setting.
     */
    var endorser: List<ContactDetail>? = null



    /**
     * Related artifacts such as additional documentation, justification, or bibliographic references.
     */
    var relatedArtifact: List<RelatedArtifact>? = null



    /**
     * Type of synthesis eg meta-analysis.
     */
    var synthesisType: CodeableConcept? = null



    /**
     * Type of study eg randomized trial.
     */
    var studyType: CodeableConcept? = null



    /**
     * A description of the size of the sample involved in the synthesis.
     */
    var sampleSize: EffectEvidenceSynthesisSampleSize? = null



    /**
     * A description of the results for each exposure considered in the effect estimate.
     */
    var resultsByExposure: List<EffectEvidenceSynthesisResultsByExposure>? = null



    /**
     * The estimated effect of the exposure variant.
     */
    var effectEstimate: List<EffectEvidenceSynthesisEffectEstimate>? = null



    /**
     * A description of the certainty of the effect estimate.
     */
    var certainty: List<EffectEvidenceSynthesisCertainty>? = null




}

/**
 * The EffectEvidenceSynthesis resource describes the difference in an outcome between exposures states in a population where the effect estimate is derived from a combination of research studies.
 */
class EffectEvidenceSynthesisCertainty: BackboneElement()
{


    /**
     * A rating of the certainty of the effect estimate.
     */
    var rating: List<CodeableConcept>? = null



    /**
     * A human-readable string to clarify or explain concepts about the resource.
     */
    var note: List<Annotation>? = null



    /**
     * A description of a component of the overall certainty.
     */
    var certaintySubcomponent: List<EffectEvidenceSynthesisCertaintySubcomponent>? = null




}

/**
 * The EffectEvidenceSynthesis resource describes the difference in an outcome between exposures states in a population where the effect estimate is derived from a combination of research studies.
 */
class EffectEvidenceSynthesisCertaintySubcomponent: BackboneElement()
{


    /**
     * Type of subcomponent of certainty rating.
     */
    var type: CodeableConcept? = null



    /**
     * A rating of a subcomponent of rating certainty.
     */
    var rating: List<CodeableConcept>? = null



    /**
     * A human-readable string to clarify or explain concepts about the resource.
     */
    var note: List<Annotation>? = null




}

/**
 * The EffectEvidenceSynthesis resource describes the difference in an outcome between exposures states in a population where the effect estimate is derived from a combination of research studies.
 */
class EffectEvidenceSynthesisEffectEstimate: BackboneElement()
{


    /**
     * Human-readable summary of effect estimate.
     */
    var description: StringType? = null



    /**
     * Examples include relative risk and mean difference.
     */
    var type: CodeableConcept? = null



    /**
     * Used to define variant exposure states such as low-risk state.
     */
    var variantState: CodeableConcept? = null



    /**
     * The point estimate of the effect estimate.
     */
    var value: DecimalType? = null



    /**
     * Specifies the UCUM unit for the outcome.
     */
    var unitOfMeasure: CodeableConcept? = null



    /**
     * A description of the precision of the estimate for the effect.
     */
    var precisionEstimate: List<EffectEvidenceSynthesisPrecisionEstimate>? = null




}

/**
 * The EffectEvidenceSynthesis resource describes the difference in an outcome between exposures states in a population where the effect estimate is derived from a combination of research studies.
 */
class EffectEvidenceSynthesisPrecisionEstimate: BackboneElement()
{


    /**
     * Examples include confidence interval and interquartile range.
     */
    var type: CodeableConcept? = null



    /**
     * Use 95 for a 95% confidence interval.
     */
    var level: DecimalType? = null



    /**
     * Lower bound of confidence interval.
     */
    var from: DecimalType? = null



    /**
     * Upper bound of confidence interval.
     */
    var to: DecimalType? = null




}

/**
 * The EffectEvidenceSynthesis resource describes the difference in an outcome between exposures states in a population where the effect estimate is derived from a combination of research studies.
 */
class EffectEvidenceSynthesisResultsByExposure(
    val riskEvidenceSynthesis: Reference): BackboneElement() {


    /**
     * Human-readable summary of results by exposure state.
     */
    var description: StringType? = null



    /**
     * Whether these results are for the exposure state or alternative exposure state.
     */
    var exposureState: ExposureState? = null



    /**
     * Used to define variant exposure states such as low-risk state.
     */
    var variantState: CodeableConcept? = null




}

/**
 * The EffectEvidenceSynthesis resource describes the difference in an outcome between exposures states in a population where the effect estimate is derived from a combination of research studies.
 */
class EffectEvidenceSynthesisSampleSize: BackboneElement()
{


    /**
     * Human-readable summary of sample size.
     */
    var description: StringType? = null



    /**
     * Number of studies included in this evidence synthesis.
     */
    var numberOfStudies: IntegerType? = null



    /**
     * Number of participants included in this evidence synthesis.
     */
    var numberOfParticipants: IntegerType? = null




}

/**
 * Base definition for all elements in a resource.
 * If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions
 */
open class Element
{


    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    var extension: List<Extension>? = null



    /**
     *
     */
    var id: String? = null




}

/**
 * Captures constraints on each element within the resource, profile, or extension.
 * If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions
 */
class ElementDefinition(
    val path: StringType): BackboneElement() {


    /**
     * Codes that define how this element is represented in instances, when the deviation varies from the normal case.
     */
    var representation: List<PropertyRepresentation>? = null



    /**
     * The name of this element definition slice, when slicing is working. The name must be a token with no dots or spaces. This is a unique name referring to a specific set of constraints applied to this element, used to provide a name to different slices of the same element.
     */
    var sliceName: StringType? = null



    /**
     * If true, indicates that this slice definition is constraining a slice definition with the same name in an inherited profile. If false, the slice is not overriding any slice in an inherited profile. If missing, the slice might or might not be overriding a slice in an inherited profile, depending on the sliceName.
     */
    var sliceIsConstraining: BooleanType? = null



    /**
     * A single preferred label which is the text to display beside the element indicating its meaning or to use to prompt for the element in a user display or form.
     */
    var label: StringType? = null



    /**
     * A code that has the same meaning as the element in a particular terminology.
     */
    var code: List<Coding>? = null



    /**
     * Indicates that the element is sliced into a set of alternative definitions (i.e. in a structure definition, there are multiple different constraints on a single element in the base resource). Slicing can be used in any resource that has cardinality ..* on the base resource, or any resource with a choice of types. The set of slices is any elements that come after this in the element sequence that have the same path, until a shorter path occurs (the shorter path terminates the set).
     */
    var slicing: ElementDefinitionSlicing? = null



    /**
     * A concise description of what this element means (e.g. for use in autogenerated summaries).
     */
    var short: StringType? = null



    /**
     * Provides a complete explanation of the meaning of the data element for human readability.  For the case of elements derived from existing elements (e.g. constraints), the definition SHALL be consistent with the base definition, but convey the meaning of the element in the particular context of use of the resource. (Note: The text you are reading is specified in ElementDefinition.definition).
     */
    var definition: MarkdownType? = null



    /**
     * Explanatory notes and implementation guidance about the data element, including notes about how to use the data properly, exceptions to proper use, etc. (Note: The text you are reading is specified in ElementDefinition.comment).
     */
    var comment: MarkdownType? = null



    /**
     * This element is for traceability of why the element was created and why the constraints exist as they do. This may be used to point to source materials or specifications that drove the structure of this element.
     */
    var requirements: MarkdownType? = null



    /**
     * Identifies additional names by which this element might also be known.
     */
    var alias: List<StringType>? = null



    /**
     * The minimum number of times this element SHALL appear in the instance.
     */
    var min: UnsignedIntType? = null



    /**
     * The maximum number of times this element is permitted to appear in the instance.
     */
    var max: StringType? = null



    /**
     * Information about the base definition of the element, provided to make it unnecessary for tools to trace the deviation of the element through the derived and related profiles. When the element definition is not the original definition of an element - i.g. either in a constraint on another type, or for elements from a super type in a snap shot - then the information in provided in the element definition may be different to the base definition. On the original definition of the element, it will be same.
     */
    var base: ElementDefinitionBase? = null



    /**
     * Identifies an element defined elsewhere in the definition whose content rules should be applied to the current element. ContentReferences bring across all the rules that are in the ElementDefinition for the element, including definitions, cardinality constraints, bindings, invariants etc.
     */
    var contentReference: UriType? = null



    /**
     * The data type or resource that the value of this element is permitted to be.
     */
    var type: List<ElementDefinitionType>? = null



    /**
     *
     */
    var defaultValueBase64Binary: Base64BinaryType? = null



    /**
     *
     */
    var defaultValueBoolean: BooleanType? = null



    /**
     *
     */
    var defaultValueCanonical: CanonicalType? = null



    /**
     *
     */
    var defaultValueCode: CodeType? = null



    /**
     *
     */
    var defaultValueDate: DateType? = null



    /**
     *
     */
    var defaultValueDateTime: DateTimeType? = null



    /**
     *
     */
    var defaultValueDecimal: DecimalType? = null



    /**
     *
     */
    var defaultValueId: IdType? = null



    /**
     *
     */
    var defaultValueInstant: InstantType? = null



    /**
     *
     */
    var defaultValueInteger: IntegerType? = null



    /**
     *
     */
    var defaultValueMarkdown: MarkdownType? = null



    /**
     *
     */
    var defaultValueOid: OidType? = null



    /**
     *
     */
    var defaultValuePositiveInt: PositiveIntType? = null



    /**
     *
     */
    var defaultValueString: StringType? = null



    /**
     *
     */
    var defaultValueTime: TimeType? = null



    /**
     *
     */
    var defaultValueUnsignedInt: UnsignedIntType? = null



    /**
     *
     */
    var defaultValueUri: UriType? = null



    /**
     *
     */
    var defaultValueUrl: UrlType? = null



    /**
     *
     */
    var defaultValueUuid: UuidType? = null



    /**
     *
     */
    var defaultValueAddress: Address? = null



    /**
     *
     */
    var defaultValueAge: Age? = null



    /**
     *
     */
    var defaultValueAnnotation: Annotation? = null



    /**
     *
     */
    var defaultValueAttachment: Attachment? = null



    /**
     *
     */
    var defaultValueCodeableConcept: CodeableConcept? = null



    /**
     *
     */
    var defaultValueCoding: Coding? = null



    /**
     *
     */
    var defaultValueContactPoint: ContactPoint? = null



    /**
     *
     */
    var defaultValueCount: Count? = null



    /**
     *
     */
    var defaultValueDistance: Distance? = null



    /**
     *
     */
    var defaultValueDuration: Duration? = null



    /**
     *
     */
    var defaultValueHumanName: HumanName? = null



    /**
     *
     */
    var defaultValueIdentifier: Identifier? = null



    /**
     *
     */
    var defaultValueMoney: Money? = null



    /**
     *
     */
    var defaultValuePeriod: Period? = null



    /**
     *
     */
    var defaultValueQuantity: Quantity? = null



    /**
     *
     */
    var defaultValueRange: Range? = null



    /**
     *
     */
    var defaultValueRatio: Ratio? = null



    /**
     *
     */
    var defaultValueReference: Reference? = null

    @JsonIgnore
    var defaultValueReferenceTarget: Resource? = null

    /**
     *
     */
    var defaultValueSampledData: SampledData? = null



    /**
     *
     */
    var defaultValueSignature: Signature? = null



    /**
     *
     */
    var defaultValueTiming: Timing? = null



    /**
     *
     */
    var defaultValueContactDetail: ContactDetail? = null



    /**
     *
     */
    var defaultValueContributor: Contributor? = null



    /**
     *
     */
    var defaultValueDataRequirement: DataRequirement? = null



    /**
     *
     */
    var defaultValueExpression: Expression? = null



    /**
     *
     */
    var defaultValueParameterDefinition: ParameterDefinition? = null



    /**
     *
     */
    var defaultValueRelatedArtifact: RelatedArtifact? = null



    /**
     *
     */
    var defaultValueTriggerDefinition: TriggerDefinition? = null



    /**
     *
     */
    var defaultValueUsageContext: UsageContext? = null



    /**
     *
     */
    var defaultValueDosage: Dosage? = null



    /**
     *
     */
    var defaultValueMeta: Meta? = null



    /**
     * The Implicit meaning that is to be understood when this element is missing (e.g. 'when this element is missing, the period is ongoing').
     */
    var meaningWhenMissing: MarkdownType? = null



    /**
     * If present, indicates that the order of the repeating element has meaning and describes what that meaning is.  If absent, it means that the order of the element has no meaning.
     */
    var orderMeaning: StringType? = null



    /**
     *
     */
    var fixedBase64Binary: Base64BinaryType? = null



    /**
     *
     */
    var fixedBoolean: BooleanType? = null



    /**
     *
     */
    var fixedCanonical: CanonicalType? = null



    /**
     *
     */
    var fixedCode: CodeType? = null



    /**
     *
     */
    var fixedDate: DateType? = null



    /**
     *
     */
    var fixedDateTime: DateTimeType? = null



    /**
     *
     */
    var fixedDecimal: DecimalType? = null



    /**
     *
     */
    var fixedId: IdType? = null



    /**
     *
     */
    var fixedInstant: InstantType? = null



    /**
     *
     */
    var fixedInteger: IntegerType? = null



    /**
     *
     */
    var fixedMarkdown: MarkdownType? = null



    /**
     *
     */
    var fixedOid: OidType? = null



    /**
     *
     */
    var fixedPositiveInt: PositiveIntType? = null



    /**
     *
     */
    var fixedString: StringType? = null



    /**
     *
     */
    var fixedTime: TimeType? = null



    /**
     *
     */
    var fixedUnsignedInt: UnsignedIntType? = null



    /**
     *
     */
    var fixedUri: UriType? = null



    /**
     *
     */
    var fixedUrl: UrlType? = null



    /**
     *
     */
    var fixedUuid: UuidType? = null



    /**
     *
     */
    var fixedAddress: Address? = null



    /**
     *
     */
    var fixedAge: Age? = null



    /**
     *
     */
    var fixedAnnotation: Annotation? = null



    /**
     *
     */
    var fixedAttachment: Attachment? = null



    /**
     *
     */
    var fixedCodeableConcept: CodeableConcept? = null



    /**
     *
     */
    var fixedCoding: Coding? = null



    /**
     *
     */
    var fixedContactPoint: ContactPoint? = null



    /**
     *
     */
    var fixedCount: Count? = null



    /**
     *
     */
    var fixedDistance: Distance? = null



    /**
     *
     */
    var fixedDuration: Duration? = null



    /**
     *
     */
    var fixedHumanName: HumanName? = null



    /**
     *
     */
    var fixedIdentifier: Identifier? = null



    /**
     *
     */
    var fixedMoney: Money? = null



    /**
     *
     */
    var fixedPeriod: Period? = null



    /**
     *
     */
    var fixedQuantity: Quantity? = null



    /**
     *
     */
    var fixedRange: Range? = null



    /**
     *
     */
    var fixedRatio: Ratio? = null



    /**
     *
     */
    var fixedReference: Reference? = null

    @JsonIgnore
    var fixedReferenceTarget: Resource? = null

    /**
     *
     */
    var fixedSampledData: SampledData? = null



    /**
     *
     */
    var fixedSignature: Signature? = null



    /**
     *
     */
    var fixedTiming: Timing? = null



    /**
     *
     */
    var fixedContactDetail: ContactDetail? = null



    /**
     *
     */
    var fixedContributor: Contributor? = null



    /**
     *
     */
    var fixedDataRequirement: DataRequirement? = null



    /**
     *
     */
    var fixedExpression: Expression? = null



    /**
     *
     */
    var fixedParameterDefinition: ParameterDefinition? = null



    /**
     *
     */
    var fixedRelatedArtifact: RelatedArtifact? = null



    /**
     *
     */
    var fixedTriggerDefinition: TriggerDefinition? = null



    /**
     *
     */
    var fixedUsageContext: UsageContext? = null



    /**
     *
     */
    var fixedDosage: Dosage? = null



    /**
     *
     */
    var fixedMeta: Meta? = null



    /**
     *
     */
    var patternBase64Binary: Base64BinaryType? = null



    /**
     *
     */
    var patternBoolean: BooleanType? = null



    /**
     *
     */
    var patternCanonical: CanonicalType? = null



    /**
     *
     */
    var patternCode: CodeType? = null



    /**
     *
     */
    var patternDate: DateType? = null



    /**
     *
     */
    var patternDateTime: DateTimeType? = null



    /**
     *
     */
    var patternDecimal: DecimalType? = null



    /**
     *
     */
    var patternId: IdType? = null



    /**
     *
     */
    var patternInstant: InstantType? = null



    /**
     *
     */
    var patternInteger: IntegerType? = null



    /**
     *
     */
    var patternMarkdown: MarkdownType? = null



    /**
     *
     */
    var patternOid: OidType? = null



    /**
     *
     */
    var patternPositiveInt: PositiveIntType? = null



    /**
     *
     */
    var patternString: StringType? = null



    /**
     *
     */
    var patternTime: TimeType? = null



    /**
     *
     */
    var patternUnsignedInt: UnsignedIntType? = null



    /**
     *
     */
    var patternUri: UriType? = null



    /**
     *
     */
    var patternUrl: UrlType? = null



    /**
     *
     */
    var patternUuid: UuidType? = null



    /**
     *
     */
    var patternAddress: Address? = null



    /**
     *
     */
    var patternAge: Age? = null



    /**
     *
     */
    var patternAnnotation: Annotation? = null



    /**
     *
     */
    var patternAttachment: Attachment? = null



    /**
     *
     */
    var patternCodeableConcept: CodeableConcept? = null



    /**
     *
     */
    var patternCoding: Coding? = null



    /**
     *
     */
    var patternContactPoint: ContactPoint? = null



    /**
     *
     */
    var patternCount: Count? = null



    /**
     *
     */
    var patternDistance: Distance? = null



    /**
     *
     */
    var patternDuration: Duration? = null



    /**
     *
     */
    var patternHumanName: HumanName? = null



    /**
     *
     */
    var patternIdentifier: Identifier? = null



    /**
     *
     */
    var patternMoney: Money? = null



    /**
     *
     */
    var patternPeriod: Period? = null



    /**
     *
     */
    var patternQuantity: Quantity? = null



    /**
     *
     */
    var patternRange: Range? = null



    /**
     *
     */
    var patternRatio: Ratio? = null



    /**
     *
     */
    var patternReference: Reference? = null

    @JsonIgnore
    var patternReferenceTarget: Resource? = null

    /**
     *
     */
    var patternSampledData: SampledData? = null



    /**
     *
     */
    var patternSignature: Signature? = null



    /**
     *
     */
    var patternTiming: Timing? = null



    /**
     *
     */
    var patternContactDetail: ContactDetail? = null



    /**
     *
     */
    var patternContributor: Contributor? = null



    /**
     *
     */
    var patternDataRequirement: DataRequirement? = null



    /**
     *
     */
    var patternExpression: Expression? = null



    /**
     *
     */
    var patternParameterDefinition: ParameterDefinition? = null



    /**
     *
     */
    var patternRelatedArtifact: RelatedArtifact? = null



    /**
     *
     */
    var patternTriggerDefinition: TriggerDefinition? = null



    /**
     *
     */
    var patternUsageContext: UsageContext? = null



    /**
     *
     */
    var patternDosage: Dosage? = null



    /**
     *
     */
    var patternMeta: Meta? = null



    /**
     * A sample value for this element demonstrating the type of information that would typically be found in the element.
     */
    var example: List<ElementDefinitionExample>? = null



    /**
     *
     */
    var minValueDate: DateType? = null



    /**
     *
     */
    var minValueDateTime: DateTimeType? = null



    /**
     *
     */
    var minValueInstant: InstantType? = null



    /**
     *
     */
    var minValueTime: TimeType? = null



    /**
     *
     */
    var minValueDecimal: DecimalType? = null



    /**
     *
     */
    var minValueInteger: IntegerType? = null



    /**
     *
     */
    var minValuePositiveInt: PositiveIntType? = null



    /**
     *
     */
    var minValueUnsignedInt: UnsignedIntType? = null



    /**
     *
     */
    var minValueQuantity: Quantity? = null



    /**
     *
     */
    var maxValueDate: DateType? = null



    /**
     *
     */
    var maxValueDateTime: DateTimeType? = null



    /**
     *
     */
    var maxValueInstant: InstantType? = null



    /**
     *
     */
    var maxValueTime: TimeType? = null



    /**
     *
     */
    var maxValueDecimal: DecimalType? = null



    /**
     *
     */
    var maxValueInteger: IntegerType? = null



    /**
     *
     */
    var maxValuePositiveInt: PositiveIntType? = null



    /**
     *
     */
    var maxValueUnsignedInt: UnsignedIntType? = null



    /**
     *
     */
    var maxValueQuantity: Quantity? = null



    /**
     * Indicates the maximum length in characters that is permitted to be present in conformant instances and which is expected to be supported by conformant consumers that support the element.
     */
    var maxLength: IntegerType? = null



    /**
     * A reference to an invariant that may make additional statements about the cardinality or value in the instance.
     */
    var condition: List<IdType>? = null



    /**
     * Formal constraints such as co-occurrence and other constraints that can be computationally evaluated within the context of the instance.
     */
    var constraint: List<ElementDefinitionConstraint>? = null



    /**
     * If true, implementations that produce or consume resources SHALL provide "support" for the element in some meaningful way.  If false, the element may be ignored and not supported. If false, whether to populate or use the data element in any way is at the discretion of the implementation.
     */
    var mustSupport: BooleanType? = null



    /**
     * If true, the value of this element affects the interpretation of the element or resource that contains it, and the value of the element cannot be ignored. Typically, this is used for status, negation and qualification codes. The effect of this is that the element cannot be ignored by systems: they SHALL either recognize the element and process it, and/or a pre-determination has been made that it is not relevant to their particular system.
     */
    var isModifier: BooleanType? = null



    /**
     * Explains how that element affects the interpretation of the resource or element that contains it.
     */
    var isModifierReason: StringType? = null



    /**
     * Whether the element should be included if a client requests a search with the parameter _summary=true.
     */
    var isSummary: BooleanType? = null



    /**
     * Binds to a value set if this element is coded (code, Coding, CodeableConcept, Quantity), or the data types (string, uri).
     */
    var binding: ElementDefinitionBinding? = null



    /**
     * Identifies a concept from an external specification that roughly corresponds to this element.
     */
    var mapping: List<ElementDefinitionMapping>? = null




}

/**
 * Captures constraints on each element within the resource, profile, or extension.
 * If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions
 */
class ElementDefinitionBase(
    val path: StringType,
    val min: UnsignedIntType,
    val max: StringType): BackboneElement()

/**
 * Captures constraints on each element within the resource, profile, or extension.
 * If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions
 */
class ElementDefinitionBinding(
    val strength: BindingStrength): BackboneElement() {


    /**
     * Describes the intended use of this particular set of codes.
     */
    var description: StringType? = null



    /**
     * Refers to the value set that identifies the set of codes the binding refers to.
     */
    var valueSet: CanonicalType? = null




}

/**
 * Captures constraints on each element within the resource, profile, or extension.
 * If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions
 */
class ElementDefinitionConstraint(
    val key: IdType,
    val severity: ConstraintSeverity,
    val human: StringType): BackboneElement() {


    /**
     * Description of why this constraint is necessary or appropriate.
     */
    var requirements: StringType? = null



    /**
     * A [FHIRPath](fhirpath.html) expression of constraint that can be executed to see if this constraint is met.
     */
    var expression: StringType? = null



    /**
     * An XPath expression of constraint that can be executed to see if this constraint is met.
     */
    var xpath: StringType? = null



    /**
     * A reference to the original source of the constraint, for traceability purposes.
     */
    var source: CanonicalType? = null




}

/**
 * Captures constraints on each element within the resource, profile, or extension.
 * If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions
 */
class ElementDefinitionDiscriminator(
    val type: DiscriminatorType,
    val path: StringType): BackboneElement()

/**
 * Captures constraints on each element within the resource, profile, or extension.
 * If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions
 */
class ElementDefinitionExample(
    val label: StringType): BackboneElement() {


    /**
     *
     */
    var valueBase64Binary: Base64BinaryType? = null



    /**
     *
     */
    var valueBoolean: BooleanType? = null



    /**
     *
     */
    var valueCanonical: CanonicalType? = null



    /**
     *
     */
    var valueCode: CodeType? = null



    /**
     *
     */
    var valueDate: DateType? = null



    /**
     *
     */
    var valueDateTime: DateTimeType? = null



    /**
     *
     */
    var valueDecimal: DecimalType? = null



    /**
     *
     */
    var valueId: IdType? = null



    /**
     *
     */
    var valueInstant: InstantType? = null



    /**
     *
     */
    var valueInteger: IntegerType? = null



    /**
     *
     */
    var valueMarkdown: MarkdownType? = null



    /**
     *
     */
    var valueOid: OidType? = null



    /**
     *
     */
    var valuePositiveInt: PositiveIntType? = null



    /**
     *
     */
    var valueString: StringType? = null



    /**
     *
     */
    var valueTime: TimeType? = null



    /**
     *
     */
    var valueUnsignedInt: UnsignedIntType? = null



    /**
     *
     */
    var valueUri: UriType? = null



    /**
     *
     */
    var valueUrl: UrlType? = null



    /**
     *
     */
    var valueUuid: UuidType? = null



    /**
     *
     */
    var valueAddress: Address? = null



    /**
     *
     */
    var valueAge: Age? = null



    /**
     *
     */
    var valueAnnotation: Annotation? = null



    /**
     *
     */
    var valueAttachment: Attachment? = null



    /**
     *
     */
    var valueCodeableConcept: CodeableConcept? = null



    /**
     *
     */
    var valueCoding: Coding? = null



    /**
     *
     */
    var valueContactPoint: ContactPoint? = null



    /**
     *
     */
    var valueCount: Count? = null



    /**
     *
     */
    var valueDistance: Distance? = null



    /**
     *
     */
    var valueDuration: Duration? = null



    /**
     *
     */
    var valueHumanName: HumanName? = null



    /**
     *
     */
    var valueIdentifier: Identifier? = null



    /**
     *
     */
    var valueMoney: Money? = null



    /**
     *
     */
    var valuePeriod: Period? = null



    /**
     *
     */
    var valueQuantity: Quantity? = null



    /**
     *
     */
    var valueRange: Range? = null



    /**
     *
     */
    var valueRatio: Ratio? = null



    /**
     *
     */
    var valueReference: Reference? = null

    @JsonIgnore
    var valueReferenceTarget: Resource? = null

    /**
     *
     */
    var valueSampledData: SampledData? = null



    /**
     *
     */
    var valueSignature: Signature? = null



    /**
     *
     */
    var valueTiming: Timing? = null



    /**
     *
     */
    var valueContactDetail: ContactDetail? = null



    /**
     *
     */
    var valueContributor: Contributor? = null



    /**
     *
     */
    var valueDataRequirement: DataRequirement? = null



    /**
     *
     */
    var valueExpression: Expression? = null



    /**
     *
     */
    var valueParameterDefinition: ParameterDefinition? = null



    /**
     *
     */
    var valueRelatedArtifact: RelatedArtifact? = null



    /**
     *
     */
    var valueTriggerDefinition: TriggerDefinition? = null



    /**
     *
     */
    var valueUsageContext: UsageContext? = null



    /**
     *
     */
    var valueDosage: Dosage? = null



    /**
     *
     */
    var valueMeta: Meta? = null




}

/**
 * Captures constraints on each element within the resource, profile, or extension.
 * If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions
 */
class ElementDefinitionMapping(
    val identity: IdType,
    val map: StringType): BackboneElement() {


    /**
     * Identifies the computable language in which mapping.map is expressed.
     */
    var language: CodeType? = null



    /**
     * Comments that provide information about the mapping or its use.
     */
    var comment: StringType? = null




}

/**
 * Captures constraints on each element within the resource, profile, or extension.
 * If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions
 */
class ElementDefinitionSlicing(
    val rules: SlicingRules): BackboneElement() {


    /**
     * Designates which child elements are used to discriminate between the slices when processing an instance. If one or more discriminators are provided, the value of the child elements in the instance data SHALL completely distinguish which slice the element in the resource matches based on the allowed values for those elements in each of the slices.
     */
    var discriminator: List<ElementDefinitionDiscriminator>? = null



    /**
     * A human-readable text description of how the slicing works. If there is no discriminator, this is required to be present to provide whatever information is possible about how the slices can be differentiated.
     */
    var description: StringType? = null



    /**
     * If the matching elements have to occur in the same order as defined in the profile.
     */
    var ordered: BooleanType? = null




}

/**
 * Captures constraints on each element within the resource, profile, or extension.
 * If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions
 */
class ElementDefinitionType(
    val code: UriType): BackboneElement() {


    /**
     * Identifies a profile structure or implementation Guide that applies to the datatype this element refers to. If any profiles are specified, then the content must conform to at least one of them. The URL can be a local reference - to a contained StructureDefinition, or a reference to another StructureDefinition or Implementation Guide by a canonical URL. When an implementation guide is specified, the type SHALL conform to at least one profile defined in the implementation guide.
     */
    var profile: List<CanonicalType>? = null



    /**
     * Used when the type is "Reference" or "canonical", and identifies a profile structure or implementation Guide that applies to the target of the reference this element refers to. If any profiles are specified, then the content must conform to at least one of them. The URL can be a local reference - to a contained StructureDefinition, or a reference to another StructureDefinition or Implementation Guide by a canonical URL. When an implementation guide is specified, the target resource SHALL conform to at least one profile defined in the implementation guide.
     */
    var targetProfile: List<CanonicalType>? = null



    /**
     * If the type is a reference to another resource, how the resource is or can be aggregated - is it a contained resource, or a reference, and if the context is a bundle, is it included in the bundle.
     */
    var aggregation: List<AggregationMode>? = null



    /**
     * Whether this reference needs to be version specific or version independent, or whether either can be used.
     */
    var versioning: ReferenceVersionRules? = null




}

/**
 * A code specifying the types of information being requested.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class EligibilityRequestPurpose(
    @JsonValue val text: String) {
    AUTH_REQUIREMENTS("auth-requirements"),
    BENEFITS("benefits"),
    DISCOVERY("discovery"),
    VALIDATION("validation")
}




/**
 * A code specifying the types of information being requested.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class EligibilityResponsePurpose(
    @JsonValue val text: String) {
    AUTH_REQUIREMENTS("auth-requirements"),
    BENEFITS("benefits"),
    DISCOVERY("discovery"),
    VALIDATION("validation")
}




/**
 * Controls how multiple enableWhen values are interpreted -  whether all or any must be true.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class EnableWhenBehavior(
    @JsonValue val text: String) {
    ALL("all"),
    ANY("any")
}




/**
 * An interaction between a patient and healthcare provider(s) for the purpose of providing healthcare service(s) or assessing the health status of a patient.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class Encounter(
    val status: EncounterStatus,
    val `class`: Coding): DomainResource() {


    /**
     * Identifier(s) by which this encounter is known.
     */
    var identifier: List<Identifier>? = null



    /**
     * The status history permits the encounter resource to contain the status history without needing to read through the historical versions of the resource, or even have the server store them.
     */
    var statusHistory: List<EncounterStatusHistory>? = null



    /**
     * The class history permits the tracking of the encounters transitions without needing to go  through the resource history.  This would be used for a case where an admission starts of as an emergency encounter, then transitions into an inpatient scenario. Doing this and not restarting a new encounter ensures that any lab/diagnostic results can more easily follow the patient and not require re-processing and not get lost or cancelled during a kind of discharge from emergency to inpatient.
     */
    var classHistory: List<EncounterClassHistory>? = null



    /**
     * Specific type of encounter (e.g. e-mail consultation, surgical day-care, skilled nursing, rehabilitation).
     */
    var type: List<CodeableConcept>? = null



    /**
     * Broad categorization of the service that is to be provided (e.g. cardiology).
     */
    var serviceType: CodeableConcept? = null



    /**
     * Indicates the urgency of the encounter.
     */
    var priority: CodeableConcept? = null



    /**
     * The patient or group present at the encounter.
     */
    var subject: Reference? = null

    @JsonIgnore
    var subjectTarget: Resource? = null

    /**
     * Where a specific encounter should be classified as a part of a specific episode(s) of care this field should be used. This association can facilitate grouping of related encounters together for a specific purpose, such as government reporting, issue tracking, association via a common problem.  The association is recorded on the encounter as these are typically created after the episode of care and grouped on entry rather than editing the episode of care to append another encounter to it (the episode of care could span years).
     */
    var episodeOfCare: List<Reference>? = null

    @JsonIgnore
    var episodeOfCareTarget: List<Resource>? = null

    /**
     * The request this encounter satisfies (e.g. incoming referral or procedure request).
     */
    var basedOn: List<Reference>? = null

    @JsonIgnore
    var basedOnTarget: List<Resource>? = null

    /**
     * The list of people responsible for providing the service.
     */
    var participant: List<EncounterParticipant>? = null



    /**
     * The appointment that scheduled this encounter.
     */
    var appointment: List<Reference>? = null

    @JsonIgnore
    var appointmentTarget: List<Resource>? = null

    /**
     * The start and end time of the encounter.
     */
    var period: Period? = null



    /**
     * Quantity of time the encounter lasted. This excludes the time during leaves of absence.
     */
    var length: Duration? = null



    /**
     * Reason the encounter takes place, expressed as a code. For admissions, this can be used for a coded admission diagnosis.
     */
    var reasonCode: List<CodeableConcept>? = null



    /**
     * Reason the encounter takes place, expressed as a code. For admissions, this can be used for a coded admission diagnosis.
     */
    var reasonReference: List<Reference>? = null

    @JsonIgnore
    var reasonReferenceTarget: List<Resource>? = null

    /**
     * The list of diagnosis relevant to this encounter.
     */
    var diagnosis: List<EncounterDiagnosis>? = null



    /**
     * The set of accounts that may be used for billing for this Encounter.
     */
    var account: List<Reference>? = null

    @JsonIgnore
    var accountTarget: List<Resource>? = null

    /**
     * Details about the admission to a healthcare service.
     */
    var hospitalization: EncounterHospitalization? = null



    /**
     * List of locations where  the patient has been during this encounter.
     */
    var location: List<EncounterLocation>? = null



    /**
     * The organization that is primarily responsible for this Encounter's services. This MAY be the same as the organization on the Patient record, however it could be different, such as if the actor performing the services was from an external organization (which may be billed seperately) for an external consultation.  Refer to the example bundle showing an abbreviated set of Encounters for a colonoscopy.
     */
    var serviceProvider: Reference? = null

    @JsonIgnore
    var serviceProviderTarget: Resource? = null

    /**
     * Another Encounter of which this encounter is a part of (administratively or in time).
     */
    var partOf: Reference? = null

    @JsonIgnore
    var partOfTarget: Resource? = null


}

/**
 * An interaction between a patient and healthcare provider(s) for the purpose of providing healthcare service(s) or assessing the health status of a patient.
 */
class EncounterClassHistory(
    val `class`: Coding,
    val period: Period): BackboneElement()

/**
 * An interaction between a patient and healthcare provider(s) for the purpose of providing healthcare service(s) or assessing the health status of a patient.
 */
class EncounterDiagnosis(
    val condition: Reference): BackboneElement() {


    /**
     * Role that this diagnosis has within the encounter (e.g. admission, billing, discharge …).
     */
    var use: CodeableConcept? = null



    /**
     * Ranking of the diagnosis (for each role type).
     */
    var rank: PositiveIntType? = null




}

/**
 * An interaction between a patient and healthcare provider(s) for the purpose of providing healthcare service(s) or assessing the health status of a patient.
 */
class EncounterHospitalization: BackboneElement()
{


    /**
     * Pre-admission identifier.
     */
    var preAdmissionIdentifier: Identifier? = null



    /**
     * The location/organization from which the patient came before admission.
     */
    var origin: Reference? = null

    @JsonIgnore
    var originTarget: Resource? = null

    /**
     * From where patient was admitted (physician referral, transfer).
     */
    var admitSource: CodeableConcept? = null



    /**
     * Whether this hospitalization is a readmission and why if known.
     */
    var reAdmission: CodeableConcept? = null



    /**
     * Diet preferences reported by the patient.
     */
    var dietPreference: List<CodeableConcept>? = null



    /**
     * Special courtesies (VIP, board member).
     */
    var specialCourtesy: List<CodeableConcept>? = null



    /**
     * Any special requests that have been made for this hospitalization encounter, such as the provision of specific equipment or other things.
     */
    var specialArrangement: List<CodeableConcept>? = null



    /**
     * Location/organization to which the patient is discharged.
     */
    var destination: Reference? = null

    @JsonIgnore
    var destinationTarget: Resource? = null

    /**
     * Category or kind of location after discharge.
     */
    var dischargeDisposition: CodeableConcept? = null




}

/**
 * An interaction between a patient and healthcare provider(s) for the purpose of providing healthcare service(s) or assessing the health status of a patient.
 */
class EncounterLocation(
    val location: Reference): BackboneElement() {


    /**
     * The status of the participants' presence at the specified location during the period specified. If the participant is no longer at the location, then the period will have an end date/time.
     */
    var status: EncounterLocationStatus? = null



    /**
     * This will be used to specify the required levels (bed/ward/room/etc.) desired to be recorded to simplify either messaging or query.
     */
    var physicalType: CodeableConcept? = null



    /**
     * Time period during which the patient was present at the location.
     */
    var period: Period? = null




}

/**
 * The status of the location.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class EncounterLocationStatus(
    @JsonValue val text: String) {
    PLANNED("planned"),
    ACTIVE("active"),
    RESERVED("reserved"),
    COMPLETED("completed")
}




/**
 * An interaction between a patient and healthcare provider(s) for the purpose of providing healthcare service(s) or assessing the health status of a patient.
 */
class EncounterParticipant: BackboneElement()
{


    /**
     * Role of participant in encounter.
     */
    var type: List<CodeableConcept>? = null



    /**
     * The period of time that the specified participant participated in the encounter. These can overlap or be sub-sets of the overall encounter's period.
     */
    var period: Period? = null



    /**
     * Persons involved in the encounter other than the patient.
     */
    var individual: Reference? = null

    @JsonIgnore
    var individualTarget: Resource? = null


}

/**
 * Current state of the encounter.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class EncounterStatus(
    @JsonValue val text: String) {
    PLANNED("planned"),
    ARRIVED("arrived"),
    TRIAGED("triaged"),
    IN_PROGRESS("in-progress"),
    ONLEAVE("onleave"),
    FINISHED("finished"),
    CANCELLED("cancelled"),
    ENTERED_IN_ERROR("entered-in-error"),
    UNKNOWN("unknown")
}


/**
 * An interaction between a patient and healthcare provider(s) for the purpose of providing healthcare service(s) or assessing the health status of a patient.
 */
class EncounterStatusHistory(
    val status: EncounterStatus,
    val period: Period): BackboneElement()



/**
 * The technical details of an endpoint that can be used for electronic services, such as for web services providing XDS.b or a REST endpoint for another FHIR server. This may include any security context information.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class Endpoint(
    val status: EndpointStatus,
    val connectionType: Coding,
    val payloadType: List<CodeableConcept>,
    val address: UrlType): DomainResource() {


    /**
     * Identifier for the organization that is used to identify the endpoint across multiple disparate systems.
     */
    var identifier: List<Identifier>? = null



    /**
     * A friendly name that this endpoint can be referred to with.
     */
    var name: StringType? = null



    /**
     * The organization that manages this endpoint (even if technically another organization is hosting this in the cloud, it is the organization associated with the data).
     */
    var managingOrganization: Reference? = null

    @JsonIgnore
    var managingOrganizationTarget: Resource? = null

    /**
     * Contact details for a human to contact about the subscription. The primary use of this for system administrator troubleshooting.
     */
    var contact: List<ContactPoint>? = null



    /**
     * The interval during which the endpoint is expected to be operational.
     */
    var period: Period? = null



    /**
     * The mime type to send the payload in - e.g. application/fhir+xml, application/fhir+json. If the mime type is not specified, then the sender could send any content (including no content depending on the connectionType).
     */
    var payloadMimeType: List<CodeType>? = null



    /**
     * Additional headers / information to send as part of the notification.
     */
    var header: List<StringType>? = null




}

/**
 * The status of the endpoint.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class EndpointStatus(
    @JsonValue val text: String) {
    ACTIVE("active"),
    SUSPENDED("suspended"),
    ERROR("error"),
    OFF("off"),
    ENTERED_IN_ERROR("entered-in-error"),
    TEST("test")
}




/**
 * This resource provides the insurance enrollment details to the insurer regarding a specified coverage.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class EnrollmentRequest: DomainResource()
{


    /**
     * The Response business identifier.
     */
    var identifier: List<Identifier>? = null



    /**
     * The status of the resource instance.
     */
    var status: FinancialResourceStatusCodes? = null



    /**
     * The date when this resource was created.
     */
    var created: DateTimeType? = null



    /**
     * The Insurer who is target  of the request.
     */
    var insurer: Reference? = null

    @JsonIgnore
    var insurerTarget: Resource? = null

    /**
     * The practitioner who is responsible for the services rendered to the patient.
     */
    var provider: Reference? = null

    @JsonIgnore
    var providerTarget: Resource? = null

    /**
     * Patient Resource.
     */
    var candidate: Reference? = null

    @JsonIgnore
    var candidateTarget: Resource? = null

    /**
     * Reference to the program or plan identification, underwriter or payor.
     */
    var coverage: Reference? = null

    @JsonIgnore
    var coverageTarget: Resource? = null


}

/**
 * This resource provides enrollment and plan details from the processing of an EnrollmentRequest resource.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class EnrollmentResponse: DomainResource()
{


    /**
     * The Response business identifier.
     */
    var identifier: List<Identifier>? = null



    /**
     * The status of the resource instance.
     */
    var status: FinancialResourceStatusCodes? = null



    /**
     * Original request resource reference.
     */
    var request: Reference? = null

    @JsonIgnore
    var requestTarget: Resource? = null

    /**
     * Processing status: error, complete.
     */
    var outcome: RemittanceOutcome? = null



    /**
     * A description of the status of the adjudication.
     */
    var disposition: StringType? = null



    /**
     * The date when the enclosed suite of services were performed or completed.
     */
    var created: DateTimeType? = null



    /**
     * The Insurer who produced this adjudicated response.
     */
    var organization: Reference? = null

    @JsonIgnore
    var organizationTarget: Resource? = null

    /**
     * The practitioner who is responsible for the services rendered to the patient.
     */
    var requestProvider: Reference? = null

    @JsonIgnore
    var requestProviderTarget: Resource? = null


}

/**
 * An association between a patient and an organization / healthcare provider(s) during which time encounters may occur. The managing organization assumes a level of responsibility for the patient during this time.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class EpisodeOfCare(
    val status: EpisodeOfCareStatus,
    val patient: Reference): DomainResource() {


    /**
     * The EpisodeOfCare may be known by different identifiers for different contexts of use, such as when an external agency is tracking the Episode for funding purposes.
     */
    var identifier: List<Identifier>? = null



    /**
     * The history of statuses that the EpisodeOfCare has been through (without requiring processing the history of the resource).
     */
    var statusHistory: List<EpisodeOfCareStatusHistory>? = null



    /**
     * A classification of the type of episode of care; e.g. specialist referral, disease management, type of funded care.
     */
    var type: List<CodeableConcept>? = null



    /**
     * The list of diagnosis relevant to this episode of care.
     */
    var diagnosis: List<EpisodeOfCareDiagnosis>? = null



    /**
     * The organization that has assumed the specific responsibilities for the specified duration.
     */
    var managingOrganization: Reference? = null

    @JsonIgnore
    var managingOrganizationTarget: Resource? = null

    /**
     * The interval during which the managing organization assumes the defined responsibility.
     */
    var period: Period? = null



    /**
     * Referral Request(s) that are fulfilled by this EpisodeOfCare, incoming referrals.
     */
    var referralRequest: List<Reference>? = null

    @JsonIgnore
    var referralRequestTarget: List<Resource>? = null

    /**
     * The practitioner that is the care manager/care coordinator for this patient.
     */
    var careManager: Reference? = null

    @JsonIgnore
    var careManagerTarget: Resource? = null

    /**
     * The list of practitioners that may be facilitating this episode of care for specific purposes.
     */
    var team: List<Reference>? = null

    @JsonIgnore
    var teamTarget: List<Resource>? = null

    /**
     * The set of accounts that may be used for billing for this EpisodeOfCare.
     */
    var account: List<Reference>? = null

    @JsonIgnore
    var accountTarget: List<Resource>? = null


}

/**
 * An association between a patient and an organization / healthcare provider(s) during which time encounters may occur. The managing organization assumes a level of responsibility for the patient during this time.
 */
class EpisodeOfCareDiagnosis(
    val condition: Reference): BackboneElement() {


    /**
     * Role that this diagnosis has within the episode of care (e.g. admission, billing, discharge …).
     */
    var role: CodeableConcept? = null



    /**
     * Ranking of the diagnosis (for each role type).
     */
    var rank: PositiveIntType? = null




}

/**
 * The status of the episode of care.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class EpisodeOfCareStatus(
    @JsonValue val text: String) {
    PLANNED("planned"),
    WAITLIST("waitlist"),
    ACTIVE("active"),
    ONHOLD("onhold"),
    FINISHED("finished"),
    CANCELLED("cancelled"),
    ENTERED_IN_ERROR("entered-in-error")
}


/**
 * An association between a patient and an organization / healthcare provider(s) during which time encounters may occur. The managing organization assumes a level of responsibility for the patient during this time.
 */
class EpisodeOfCareStatusHistory(
    val status: EpisodeOfCareStatus,
    val period: Period): BackboneElement()



/**
 * The mode of a message capability statement.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class EventCapabilityMode(
    @JsonValue val text: String) {
    SENDER("sender"),
    RECEIVER("receiver")
}




/**
 * The EventDefinition resource provides a reusable description of when a particular event can occur.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class EventDefinition(
    val status: PublicationStatus,
    val trigger: List<TriggerDefinition>): DomainResource() {


    /**
     * An absolute URI that is used to identify this event definition when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which at which an authoritative instance of this event definition is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the event definition is stored on different servers.
     */
    var url: UriType? = null



    /**
     * A formal identifier that is used to identify this event definition when it is represented in other formats, or referenced in a specification, model, design or an instance.
     */
    var identifier: List<Identifier>? = null



    /**
     * The identifier that is used to identify this version of the event definition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the event definition author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
     */
    var version: StringType? = null



    /**
     * A natural language name identifying the event definition. This name should be usable as an identifier for the module by machine processing applications such as code generation.
     */
    var name: StringType? = null



    /**
     * A short, descriptive, user-friendly title for the event definition.
     */
    var title: StringType? = null



    /**
     * An explanatory or alternate title for the event definition giving additional information about its content.
     */
    var subtitle: StringType? = null



    /**
     * A Boolean value to indicate that this event definition is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
     */
    var experimental: BooleanType? = null



    /**
     *
     */
    var subjectCodeableConcept: CodeableConcept? = null



    /**
     *
     */
    var subjectReference: Reference? = null

    @JsonIgnore
    var subjectReferenceTarget: Resource? = null

    /**
     * The date  (and optionally time) when the event definition was published. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the event definition changes.
     */
    var date: DateTimeType? = null



    /**
     * The name of the organization or individual that published the event definition.
     */
    var publisher: StringType? = null



    /**
     * Contact details to assist a user in finding and communicating with the publisher.
     */
    var contact: List<ContactDetail>? = null



    /**
     * A free text natural language description of the event definition from a consumer's perspective.
     */
    var description: MarkdownType? = null



    /**
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate event definition instances.
     */
    var useContext: List<UsageContext>? = null



    /**
     * A legal or geographic region in which the event definition is intended to be used.
     */
    var jurisdiction: List<CodeableConcept>? = null



    /**
     * Explanation of why this event definition is needed and why it has been designed as it has.
     */
    var purpose: MarkdownType? = null



    /**
     * A detailed description of how the event definition is used from a clinical perspective.
     */
    var usage: StringType? = null



    /**
     * A copyright statement relating to the event definition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the event definition.
     */
    var copyright: MarkdownType? = null



    /**
     * The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage.
     */
    var approvalDate: DateType? = null



    /**
     * The date on which the resource content was last reviewed. Review happens periodically after approval but does not change the original approval date.
     */
    var lastReviewDate: DateType? = null



    /**
     * The period during which the event definition content was or is planned to be in active use.
     */
    var effectivePeriod: Period? = null



    /**
     * Descriptive topics related to the module. Topics provide a high-level categorization of the module that can be useful for filtering and searching.
     */
    var topic: List<CodeableConcept>? = null



    /**
     * An individiual or organization primarily involved in the creation and maintenance of the content.
     */
    var author: List<ContactDetail>? = null



    /**
     * An individual or organization primarily responsible for internal coherence of the content.
     */
    var editor: List<ContactDetail>? = null



    /**
     * An individual or organization primarily responsible for review of some aspect of the content.
     */
    var reviewer: List<ContactDetail>? = null



    /**
     * An individual or organization responsible for officially endorsing the content for use in some setting.
     */
    var endorser: List<ContactDetail>? = null



    /**
     * Related resources such as additional documentation, justification, or bibliographic references.
     */
    var relatedArtifact: List<RelatedArtifact>? = null




}

/**
 * The status of the communication.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class EventStatus(
    @JsonValue val text: String) {
    PREPARATION("preparation"),
    IN_PROGRESS("in-progress"),
    NOT_DONE("not-done"),
    ON_HOLD("on-hold"),
    STOPPED("stopped"),
    COMPLETED("completed"),
    ENTERED_IN_ERROR("entered-in-error"),
    UNKNOWN("unknown")
}




/**
 * Real world event relating to the schedule.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class EventTiming(
    @JsonValue val text: String) {
    MORN("MORN"),
    MORNEARLY("MORN.early"),
    MORNLATE("MORN.late"),
    NOON("NOON"),
    AFT("AFT"),
    AFTEARLY("AFT.early"),
    AFTLATE("AFT.late"),
    EVE("EVE"),
    EVEEARLY("EVE.early"),
    EVELATE("EVE.late"),
    NIGHT("NIGHT"),
    PHS("PHS"),
    HS("HS"),
    WAKE("WAKE"),
    C("C"),
    CM("CM"),
    CD("CD"),
    CV("CV"),
    AC("AC"),
    ACM("ACM"),
    ACD("ACD"),
    ACV("ACV"),
    PC("PC"),
    PCM("PCM"),
    PCD("PCD"),
    PCV("PCV")
}




/**
 * The Evidence resource describes the conditional state (population and any exposures being compared within the population) and outcome (if specified) that the knowledge (evidence, assertion, recommendation) is about.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class Evidence(
    val status: PublicationStatus,
    val exposureBackground: Reference): DomainResource() {


    /**
     * An absolute URI that is used to identify this evidence when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which at which an authoritative instance of this evidence is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the evidence is stored on different servers.
     */
    var url: UriType? = null



    /**
     * A formal identifier that is used to identify this evidence when it is represented in other formats, or referenced in a specification, model, design or an instance.
     */
    var identifier: List<Identifier>? = null



    /**
     * The identifier that is used to identify this version of the evidence when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the evidence author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence. To provide a version consistent with the Decision Support Service specification, use the format Major.Minor.Revision (e.g. 1.0.0). For more information on versioning knowledge assets, refer to the Decision Support Service specification. Note that a version is required for non-experimental active artifacts.
     */
    var version: StringType? = null



    /**
     * A natural language name identifying the evidence. This name should be usable as an identifier for the module by machine processing applications such as code generation.
     */
    var name: StringType? = null



    /**
     * A short, descriptive, user-friendly title for the evidence.
     */
    var title: StringType? = null



    /**
     * The short title provides an alternate title for use in informal descriptive contexts where the full, formal title is not necessary.
     */
    var shortTitle: StringType? = null



    /**
     * An explanatory or alternate title for the Evidence giving additional information about its content.
     */
    var subtitle: StringType? = null



    /**
     * The date  (and optionally time) when the evidence was published. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the evidence changes.
     */
    var date: DateTimeType? = null



    /**
     * The name of the organization or individual that published the evidence.
     */
    var publisher: StringType? = null



    /**
     * Contact details to assist a user in finding and communicating with the publisher.
     */
    var contact: List<ContactDetail>? = null



    /**
     * A free text natural language description of the evidence from a consumer's perspective.
     */
    var description: MarkdownType? = null



    /**
     * A human-readable string to clarify or explain concepts about the resource.
     */
    var note: List<Annotation>? = null



    /**
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate evidence instances.
     */
    var useContext: List<UsageContext>? = null



    /**
     * A legal or geographic region in which the evidence is intended to be used.
     */
    var jurisdiction: List<CodeableConcept>? = null



    /**
     * A copyright statement relating to the evidence and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the evidence.
     */
    var copyright: MarkdownType? = null



    /**
     * The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage.
     */
    var approvalDate: DateType? = null



    /**
     * The date on which the resource content was last reviewed. Review happens periodically after approval but does not change the original approval date.
     */
    var lastReviewDate: DateType? = null



    /**
     * The period during which the evidence content was or is planned to be in active use.
     */
    var effectivePeriod: Period? = null



    /**
     * Descriptive topics related to the content of the Evidence. Topics provide a high-level categorization grouping types of Evidences that can be useful for filtering and searching.
     */
    var topic: List<CodeableConcept>? = null



    /**
     * An individiual or organization primarily involved in the creation and maintenance of the content.
     */
    var author: List<ContactDetail>? = null



    /**
     * An individual or organization primarily responsible for internal coherence of the content.
     */
    var editor: List<ContactDetail>? = null



    /**
     * An individual or organization primarily responsible for review of some aspect of the content.
     */
    var reviewer: List<ContactDetail>? = null



    /**
     * An individual or organization responsible for officially endorsing the content for use in some setting.
     */
    var endorser: List<ContactDetail>? = null



    /**
     * Related artifacts such as additional documentation, justification, or bibliographic references.
     */
    var relatedArtifact: List<RelatedArtifact>? = null



    /**
     * A reference to a EvidenceVariable resource that defines the exposure for the research.
     */
    var exposureVariant: List<Reference>? = null

    @JsonIgnore
    var exposureVariantTarget: List<Resource>? = null

    /**
     * A reference to a EvidenceVariable resomece that defines the outcome for the research.
     */
    var outcome: List<Reference>? = null

    @JsonIgnore
    var outcomeTarget: List<Resource>? = null


}

/**
 * The EvidenceVariable resource describes a "PICO" element that knowledge (evidence, assertion, recommendation) is about.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class EvidenceVariable(
    val status: PublicationStatus,
    val characteristic: List<EvidenceVariableCharacteristic>): DomainResource() {


    /**
     * An absolute URI that is used to identify this evidence variable when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which at which an authoritative instance of this evidence variable is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the evidence variable is stored on different servers.
     */
    var url: UriType? = null



    /**
     * A formal identifier that is used to identify this evidence variable when it is represented in other formats, or referenced in a specification, model, design or an instance.
     */
    var identifier: List<Identifier>? = null



    /**
     * The identifier that is used to identify this version of the evidence variable when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the evidence variable author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence. To provide a version consistent with the Decision Support Service specification, use the format Major.Minor.Revision (e.g. 1.0.0). For more information on versioning knowledge assets, refer to the Decision Support Service specification. Note that a version is required for non-experimental active artifacts.
     */
    var version: StringType? = null



    /**
     * A natural language name identifying the evidence variable. This name should be usable as an identifier for the module by machine processing applications such as code generation.
     */
    var name: StringType? = null



    /**
     * A short, descriptive, user-friendly title for the evidence variable.
     */
    var title: StringType? = null



    /**
     * The short title provides an alternate title for use in informal descriptive contexts where the full, formal title is not necessary.
     */
    var shortTitle: StringType? = null



    /**
     * An explanatory or alternate title for the EvidenceVariable giving additional information about its content.
     */
    var subtitle: StringType? = null



    /**
     * The date  (and optionally time) when the evidence variable was published. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the evidence variable changes.
     */
    var date: DateTimeType? = null



    /**
     * The name of the organization or individual that published the evidence variable.
     */
    var publisher: StringType? = null



    /**
     * Contact details to assist a user in finding and communicating with the publisher.
     */
    var contact: List<ContactDetail>? = null



    /**
     * A free text natural language description of the evidence variable from a consumer's perspective.
     */
    var description: MarkdownType? = null



    /**
     * A human-readable string to clarify or explain concepts about the resource.
     */
    var note: List<Annotation>? = null



    /**
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate evidence variable instances.
     */
    var useContext: List<UsageContext>? = null



    /**
     * A legal or geographic region in which the evidence variable is intended to be used.
     */
    var jurisdiction: List<CodeableConcept>? = null



    /**
     * A copyright statement relating to the evidence variable and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the evidence variable.
     */
    var copyright: MarkdownType? = null



    /**
     * The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage.
     */
    var approvalDate: DateType? = null



    /**
     * The date on which the resource content was last reviewed. Review happens periodically after approval but does not change the original approval date.
     */
    var lastReviewDate: DateType? = null



    /**
     * The period during which the evidence variable content was or is planned to be in active use.
     */
    var effectivePeriod: Period? = null



    /**
     * Descriptive topics related to the content of the EvidenceVariable. Topics provide a high-level categorization grouping types of EvidenceVariables that can be useful for filtering and searching.
     */
    var topic: List<CodeableConcept>? = null



    /**
     * An individiual or organization primarily involved in the creation and maintenance of the content.
     */
    var author: List<ContactDetail>? = null



    /**
     * An individual or organization primarily responsible for internal coherence of the content.
     */
    var editor: List<ContactDetail>? = null



    /**
     * An individual or organization primarily responsible for review of some aspect of the content.
     */
    var reviewer: List<ContactDetail>? = null



    /**
     * An individual or organization responsible for officially endorsing the content for use in some setting.
     */
    var endorser: List<ContactDetail>? = null



    /**
     * Related artifacts such as additional documentation, justification, or bibliographic references.
     */
    var relatedArtifact: List<RelatedArtifact>? = null



    /**
     * The type of evidence element, a population, an exposure, or an outcome.
     */
    var type: EvidenceVariableType? = null




}

/**
 * The EvidenceVariable resource describes a "PICO" element that knowledge (evidence, assertion, recommendation) is about.
 */
class EvidenceVariableCharacteristic: BackboneElement()
{


    /**
     * A short, natural language description of the characteristic that could be used to communicate the criteria to an end-user.
     */
    var description: StringType? = null



    /**
     *
     */
    var definitionReference: Reference? = null

    @JsonIgnore
    var definitionReferenceTarget: Resource? = null

    /**
     *
     */
    var definitionCanonical: CanonicalType? = null



    /**
     *
     */
    var definitionCodeableConcept: CodeableConcept? = null



    /**
     *
     */
    var definitionExpression: Expression? = null



    /**
     *
     */
    var definitionDataRequirement: DataRequirement? = null



    /**
     *
     */
    var definitionTriggerDefinition: TriggerDefinition? = null



    /**
     * Use UsageContext to define the members of the population, such as Age Ranges, Genders, Settings.
     */
    var usageContext: List<UsageContext>? = null



    /**
     * When true, members with this characteristic are excluded from the element.
     */
    var exclude: BooleanType? = null



    /**
     *
     */
    var participantEffectiveDateTime: DateTimeType? = null



    /**
     *
     */
    var participantEffectivePeriod: Period? = null



    /**
     *
     */
    var participantEffectiveDuration: Duration? = null



    /**
     *
     */
    var participantEffectiveTiming: Timing? = null



    /**
     * Indicates duration from the participant's study entry.
     */
    var timeFromStart: Duration? = null



    /**
     * Indicates how elements are aggregated within the study effective period.
     */
    var groupMeasure: GroupMeasure? = null




}

/**
 * The possible types of variables for exposures or outcomes (E.g. Dichotomous, Continuous, Descriptive).
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class EvidenceVariableType(
    @JsonValue val text: String) {
    DICHOTOMOUS("dichotomous"),
    CONTINUOUS("continuous"),
    DESCRIPTIVE("descriptive")
}




/**
 * Example of workflow instance.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class ExampleScenario(
    val status: PublicationStatus): DomainResource() {


    /**
     * An absolute URI that is used to identify this example scenario when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which at which an authoritative instance of this example scenario is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the example scenario is stored on different servers.
     */
    var url: UriType? = null



    /**
     * A formal identifier that is used to identify this example scenario when it is represented in other formats, or referenced in a specification, model, design or an instance.
     */
    var identifier: List<Identifier>? = null



    /**
     * The identifier that is used to identify this version of the example scenario when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the example scenario author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
     */
    var version: StringType? = null



    /**
     * A natural language name identifying the example scenario. This name should be usable as an identifier for the module by machine processing applications such as code generation.
     */
    var name: StringType? = null



    /**
     * A Boolean value to indicate that this example scenario is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
     */
    var experimental: BooleanType? = null



    /**
     * The date  (and optionally time) when the example scenario was published. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the example scenario changes. (e.g. the 'content logical definition').
     */
    var date: DateTimeType? = null



    /**
     * The name of the organization or individual that published the example scenario.
     */
    var publisher: StringType? = null



    /**
     * Contact details to assist a user in finding and communicating with the publisher.
     */
    var contact: List<ContactDetail>? = null



    /**
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate example scenario instances.
     */
    var useContext: List<UsageContext>? = null



    /**
     * A legal or geographic region in which the example scenario is intended to be used.
     */
    var jurisdiction: List<CodeableConcept>? = null



    /**
     * A copyright statement relating to the example scenario and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the example scenario.
     */
    var copyright: MarkdownType? = null



    /**
     * What the example scenario resource is created for. This should not be used to show the business purpose of the scenario itself, but the purpose of documenting a scenario.
     */
    var purpose: MarkdownType? = null



    /**
     * Actor participating in the resource.
     */
    var actor: List<ExampleScenarioActor>? = null



    /**
     * Each resource and each version that is present in the workflow.
     */
    var instance: List<ExampleScenarioInstance>? = null



    /**
     * Each major process - a group of operations.
     */
    var process: List<ExampleScenarioProcess>? = null



    /**
     * Another nested workflow.
     */
    var workflow: List<CanonicalType>? = null




}

/**
 * Example of workflow instance.
 */
class ExampleScenarioActor(
    val actorId: StringType,
    val type: ExampleScenarioActorType): BackboneElement() {


    /**
     * The name of the actor as shown in the page.
     */
    var name: StringType? = null



    /**
     * The description of the actor.
     */
    var description: MarkdownType? = null




}

/**
 * The type of actor - system or human.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class ExampleScenarioActorType(
    @JsonValue val text: String) {
    PERSON("person"),
    ENTITY("entity")
}




/**
 * Example of workflow instance.
 */
class ExampleScenarioAlternative(
    val title: StringType): BackboneElement() {


    /**
     * A human-readable description of the alternative explaining when the alternative should occur rather than the base step.
     */
    var description: MarkdownType? = null



    /**
     * What happens in each alternative option.
     */
    var step: List<ExampleScenarioStep>? = null




}

/**
 * Example of workflow instance.
 */
class ExampleScenarioContainedInstance(
    val resourceId: StringType): BackboneElement() {


    /**
     * A specific version of a resource contained in the instance.
     */
    var versionId: StringType? = null




}

/**
 * Example of workflow instance.
 */
class ExampleScenarioInstance(
    val resourceId: StringType,
    val resourceType: ResourceType): BackboneElement() {


    /**
     * A short name for the resource instance.
     */
    var name: StringType? = null



    /**
     * Human-friendly description of the resource instance.
     */
    var description: MarkdownType? = null



    /**
     * A specific version of the resource.
     */
    var version: List<ExampleScenarioVersion>? = null



    /**
     * Resources contained in the instance (e.g. the observations contained in a bundle).
     */
    var containedInstance: List<ExampleScenarioContainedInstance>? = null




}

/**
 * Example of workflow instance.
 */
class ExampleScenarioOperation(
    val number: StringType): BackboneElement() {


    /**
     * The type of operation - CRUD.
     */
    var type: StringType? = null



    /**
     * The human-friendly name of the interaction.
     */
    var name: StringType? = null



    /**
     * Who starts the transaction.
     */
    var initiator: StringType? = null



    /**
     * Who receives the transaction.
     */
    var receiver: StringType? = null



    /**
     * A comment to be inserted in the diagram.
     */
    var description: MarkdownType? = null



    /**
     * Whether the initiator is deactivated right after the transaction.
     */
    var initiatorActive: BooleanType? = null



    /**
     * Whether the receiver is deactivated right after the transaction.
     */
    var receiverActive: BooleanType? = null



    /**
     * Each resource instance used by the initiator.
     */
    var request: ExampleScenarioContainedInstance? = null



    /**
     * Each resource instance used by the responder.
     */
    var response: ExampleScenarioContainedInstance? = null




}

/**
 * Example of workflow instance.
 */
class ExampleScenarioProcess(
    val title: StringType): BackboneElement() {


    /**
     * A longer description of the group of operations.
     */
    var description: MarkdownType? = null



    /**
     * Description of initial status before the process starts.
     */
    var preConditions: MarkdownType? = null



    /**
     * Description of final status after the process ends.
     */
    var postConditions: MarkdownType? = null



    /**
     * Each step of the process.
     */
    var step: List<ExampleScenarioStep>? = null




}

/**
 * Example of workflow instance.
 */
class ExampleScenarioStep: BackboneElement()
{


    /**
     * Nested process.
     */
    var process: List<ExampleScenarioProcess>? = null



    /**
     * If there is a pause in the flow.
     */
    var pause: BooleanType? = null



    /**
     * Each interaction or action.
     */
    var operation: ExampleScenarioOperation? = null



    /**
     * Indicates an alternative step that can be taken instead of the operations on the base step in exceptional/atypical circumstances.
     */
    var alternative: List<ExampleScenarioAlternative>? = null




}

/**
 * Example of workflow instance.
 */
class ExampleScenarioVersion(
    val versionId: StringType,
    val description: MarkdownType): BackboneElement()

/**
 * This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class ExplanationOfBenefit(
    val status: ExplanationOfBenefitStatus,
    val type: CodeableConcept,
    val use: Use,
    val patient: Reference,
    val created: DateTimeType,
    val insurer: Reference,
    val provider: Reference,
    val outcome: ClaimProcessingCodes,
    val insurance: List<ExplanationOfBenefitInsurance>): DomainResource() {


    /**
     * A unique identifier assigned to this explanation of benefit.
     */
    var identifier: List<Identifier>? = null



    /**
     * A finer grained suite of claim type codes which may convey additional information such as Inpatient vs Outpatient and/or a specialty service.
     */
    var subType: CodeableConcept? = null



    /**
     * The period for which charges are being submitted.
     */
    var billablePeriod: Period? = null



    /**
     * Individual who created the claim, predetermination or preauthorization.
     */
    var enterer: Reference? = null

    @JsonIgnore
    var entererTarget: Resource? = null

    /**
     * The provider-required urgency of processing the request. Typical values include: stat, routine deferred.
     */
    var priority: CodeableConcept? = null



    /**
     * A code to indicate whether and for whom funds are to be reserved for future claims.
     */
    var fundsReserveRequested: CodeableConcept? = null



    /**
     * A code, used only on a response to a preauthorization, to indicate whether the benefits payable have been reserved and for whom.
     */
    var fundsReserve: CodeableConcept? = null



    /**
     * Other claims which are related to this claim such as prior submissions or claims for related services or for the same event.
     */
    var related: List<ExplanationOfBenefitRelated>? = null



    /**
     * Prescription to support the dispensing of pharmacy, device or vision products.
     */
    var prescription: Reference? = null

    @JsonIgnore
    var prescriptionTarget: Resource? = null

    /**
     * Original prescription which has been superseded by this prescription to support the dispensing of pharmacy services, medications or products.
     */
    var originalPrescription: Reference? = null

    @JsonIgnore
    var originalPrescriptionTarget: Resource? = null

    /**
     * The party to be reimbursed for cost of the products and services according to the terms of the policy.
     */
    var payee: ExplanationOfBenefitPayee? = null



    /**
     * A reference to a referral resource.
     */
    var referral: Reference? = null

    @JsonIgnore
    var referralTarget: Resource? = null

    /**
     * Facility where the services were provided.
     */
    var facility: Reference? = null

    @JsonIgnore
    var facilityTarget: Resource? = null

    /**
     * The business identifier for the instance of the adjudication request: claim predetermination or preauthorization.
     */
    var claim: Reference? = null

    @JsonIgnore
    var claimTarget: Resource? = null

    /**
     * The business identifier for the instance of the adjudication response: claim, predetermination or preauthorization response.
     */
    var claimResponse: Reference? = null

    @JsonIgnore
    var claimResponseTarget: Resource? = null

    /**
     * A human readable description of the status of the adjudication.
     */
    var disposition: StringType? = null



    /**
     * Reference from the Insurer which is used in later communications which refers to this adjudication.
     */
    var preAuthRef: List<StringType>? = null



    /**
     * The timeframe during which the supplied preauthorization reference may be quoted on claims to obtain the adjudication as provided.
     */
    var preAuthRefPeriod: List<Period>? = null



    /**
     * The members of the team who provided the products and services.
     */
    var careTeam: List<ExplanationOfBenefitCareTeam>? = null



    /**
     * Additional information codes regarding exceptions, special considerations, the condition, situation, prior or concurrent issues.
     */
    var supportingInfo: List<ExplanationOfBenefitSupportingInfo>? = null



    /**
     * Information about diagnoses relevant to the claim items.
     */
    var diagnosis: List<ExplanationOfBenefitDiagnosis>? = null



    /**
     * Procedures performed on the patient relevant to the billing items with the claim.
     */
    var procedure: List<ExplanationOfBenefitProcedure>? = null



    /**
     * This indicates the relative order of a series of EOBs related to different coverages for the same suite of services.
     */
    var precedence: PositiveIntType? = null



    /**
     * Details of a accident which resulted in injuries which required the products and services listed in the claim.
     */
    var accident: ExplanationOfBenefitAccident? = null



    /**
     * A claim line. Either a simple (a product or service) or a 'group' of details which can also be a simple items or groups of sub-details.
     */
    var item: List<ExplanationOfBenefitItem>? = null



    /**
     * The first-tier service adjudications for payor added product or service lines.
     */
    var addItem: List<ExplanationOfBenefitAddItem>? = null



    /**
     * The adjudication results which are presented at the header level rather than at the line-item or add-item levels.
     */
    var adjudication: List<ExplanationOfBenefitAdjudication>? = null



    /**
     * Categorized monetary totals for the adjudication.
     */
    var total: List<ExplanationOfBenefitTotal>? = null



    /**
     * Payment details for the adjudication of the claim.
     */
    var payment: ExplanationOfBenefitPayment? = null



    /**
     * A code for the form to be used for printing the content.
     */
    var formCode: CodeableConcept? = null



    /**
     * The actual form, by reference or inclusion, for printing the content or an EOB.
     */
    var form: Attachment? = null



    /**
     * A note that describes or explains adjudication results in a human readable form.
     */
    var processNote: List<ExplanationOfBenefitProcessNote>? = null



    /**
     * The term of the benefits documented in this response.
     */
    var benefitPeriod: Period? = null



    /**
     * Balance by Benefit Category.
     */
    var benefitBalance: List<ExplanationOfBenefitBenefitBalance>? = null




}

/**
 * This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided.
 */
class ExplanationOfBenefitAccident: BackboneElement()
{


    /**
     * Date of an accident event  related to the products and services contained in the claim.
     */
    var date: DateType? = null



    /**
     * The type or context of the accident event for the purposes of selection of potential insurance coverages and determination of coordination between insurers.
     */
    var type: CodeableConcept? = null



    /**
     *
     */
    var locationAddress: Address? = null



    /**
     *
     */
    var locationReference: Reference? = null

    @JsonIgnore
    var locationReferenceTarget: Resource? = null


}

/**
 * This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided.
 */
class ExplanationOfBenefitAddItem(
    val productOrService: CodeableConcept): BackboneElement() {


    /**
     * Claim items which this service line is intended to replace.
     */
    var itemSequence: List<PositiveIntType>? = null



    /**
     * The sequence number of the details within the claim item which this line is intended to replace.
     */
    var detailSequence: List<PositiveIntType>? = null



    /**
     * The sequence number of the sub-details woithin the details within the claim item which this line is intended to replace.
     */
    var subDetailSequence: List<PositiveIntType>? = null



    /**
     * The providers who are authorized for the services rendered to the patient.
     */
    var provider: List<Reference>? = null

    @JsonIgnore
    var providerTarget: List<Resource>? = null

    /**
     * Item typification or modifiers codes to convey additional context for the product or service.
     */
    var modifier: List<CodeableConcept>? = null



    /**
     * Identifies the program under which this may be recovered.
     */
    var programCode: List<CodeableConcept>? = null



    /**
     *
     */
    var servicedDate: DateType? = null



    /**
     *
     */
    var servicedPeriod: Period? = null



    /**
     *
     */
    var locationCodeableConcept: CodeableConcept? = null



    /**
     *
     */
    var locationAddress: Address? = null



    /**
     *
     */
    var locationReference: Reference? = null

    @JsonIgnore
    var locationReferenceTarget: Resource? = null

    /**
     * The number of repetitions of a service or product.
     */
    var quantity: Quantity? = null



    /**
     * If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
     */
    var unitPrice: Money? = null



    /**
     * A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.
     */
    var factor: DecimalType? = null



    /**
     * The quantity times the unit price for an additional service or product or charge.
     */
    var net: Money? = null



    /**
     * Physical service site on the patient (limb, tooth, etc.).
     */
    var bodySite: CodeableConcept? = null



    /**
     * A region or surface of the bodySite, e.g. limb region or tooth surface(s).
     */
    var subSite: List<CodeableConcept>? = null



    /**
     * The numbers associated with notes below which apply to the adjudication of this item.
     */
    var noteNumber: List<PositiveIntType>? = null



    /**
     * The adjudication results.
     */
    var adjudication: List<ExplanationOfBenefitAdjudication>? = null



    /**
     * The second-tier service adjudications for payor added services.
     */
    var detail: List<ExplanationOfBenefitDetail1>? = null




}

/**
 * This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided.
 */
class ExplanationOfBenefitAdjudication(
    val category: CodeableConcept): BackboneElement() {


    /**
     * A code supporting the understanding of the adjudication result and explaining variance from expected amount.
     */
    var reason: CodeableConcept? = null



    /**
     * Monetary amount associated with the category.
     */
    var amount: Money? = null



    /**
     * A non-monetary value associated with the category. Mutually exclusive to the amount element above.
     */
    var value: DecimalType? = null




}

/**
 * This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided.
 */
class ExplanationOfBenefitBenefitBalance(
    val category: CodeableConcept): BackboneElement() {


    /**
     * True if the indicated class of service is excluded from the plan, missing or False indicates the product or service is included in the coverage.
     */
    var excluded: BooleanType? = null



    /**
     * A short name or tag for the benefit.
     */
    var name: StringType? = null



    /**
     * A richer description of the benefit or services covered.
     */
    var description: StringType? = null



    /**
     * Is a flag to indicate whether the benefits refer to in-network providers or out-of-network providers.
     */
    var network: CodeableConcept? = null



    /**
     * Indicates if the benefits apply to an individual or to the family.
     */
    var unit: CodeableConcept? = null



    /**
     * The term or period of the values such as 'maximum lifetime benefit' or 'maximum annual visits'.
     */
    var term: CodeableConcept? = null



    /**
     * Benefits Used to date.
     */
    var financial: List<ExplanationOfBenefitFinancial>? = null




}

/**
 * This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided.
 */
class ExplanationOfBenefitCareTeam(
    val sequence: PositiveIntType,
    val provider: Reference): BackboneElement() {


    /**
     * The party who is billing and/or responsible for the claimed products or services.
     */
    var responsible: BooleanType? = null



    /**
     * The lead, assisting or supervising practitioner and their discipline if a multidisciplinary team.
     */
    var role: CodeableConcept? = null



    /**
     * The qualification of the practitioner which is applicable for this service.
     */
    var qualification: CodeableConcept? = null




}

/**
 * This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided.
 */
class ExplanationOfBenefitDetail(
    val sequence: PositiveIntType,
    val productOrService: CodeableConcept): BackboneElement() {


    /**
     * The type of revenue or cost center providing the product and/or service.
     */
    var revenue: CodeableConcept? = null



    /**
     * Code to identify the general type of benefits under which products and services are provided.
     */
    var category: CodeableConcept? = null



    /**
     * Item typification or modifiers codes to convey additional context for the product or service.
     */
    var modifier: List<CodeableConcept>? = null



    /**
     * Identifies the program under which this may be recovered.
     */
    var programCode: List<CodeableConcept>? = null



    /**
     * The number of repetitions of a service or product.
     */
    var quantity: Quantity? = null



    /**
     * If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
     */
    var unitPrice: Money? = null



    /**
     * A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.
     */
    var factor: DecimalType? = null



    /**
     * The quantity times the unit price for an additional service or product or charge.
     */
    var net: Money? = null



    /**
     * Unique Device Identifiers associated with this line item.
     */
    var udi: List<Reference>? = null

    @JsonIgnore
    var udiTarget: List<Resource>? = null

    /**
     * The numbers associated with notes below which apply to the adjudication of this item.
     */
    var noteNumber: List<PositiveIntType>? = null



    /**
     * The adjudication results.
     */
    var adjudication: List<ExplanationOfBenefitAdjudication>? = null



    /**
     * Third-tier of goods and services.
     */
    var subDetail: List<ExplanationOfBenefitSubDetail>? = null




}

/**
 * This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided.
 */
class ExplanationOfBenefitDetail1(
    val productOrService: CodeableConcept): BackboneElement() {


    /**
     * Item typification or modifiers codes to convey additional context for the product or service.
     */
    var modifier: List<CodeableConcept>? = null



    /**
     * The number of repetitions of a service or product.
     */
    var quantity: Quantity? = null



    /**
     * If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
     */
    var unitPrice: Money? = null



    /**
     * A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.
     */
    var factor: DecimalType? = null



    /**
     * The quantity times the unit price for an additional service or product or charge.
     */
    var net: Money? = null



    /**
     * The numbers associated with notes below which apply to the adjudication of this item.
     */
    var noteNumber: List<PositiveIntType>? = null



    /**
     * The adjudication results.
     */
    var adjudication: List<ExplanationOfBenefitAdjudication>? = null



    /**
     * The third-tier service adjudications for payor added services.
     */
    var subDetail: List<ExplanationOfBenefitSubDetail1>? = null




}

/**
 * This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided.
 */
class ExplanationOfBenefitDiagnosis(
    val sequence: PositiveIntType): BackboneElement() {


    /**
     *
     */
    var diagnosisCodeableConcept: CodeableConcept? = null



    /**
     *
     */
    var diagnosisReference: Reference? = null

    @JsonIgnore
    var diagnosisReferenceTarget: Resource? = null

    /**
     * When the condition was observed or the relative ranking.
     */
    var type: List<CodeableConcept>? = null



    /**
     * Indication of whether the diagnosis was present on admission to a facility.
     */
    var onAdmission: CodeableConcept? = null



    /**
     * A package billing code or bundle code used to group products and services to a particular health condition (such as heart attack) which is based on a predetermined grouping code system.
     */
    var packageCode: CodeableConcept? = null




}

/**
 * This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided.
 */
class ExplanationOfBenefitFinancial(
    val type: CodeableConcept): BackboneElement() {


    /**
     *
     */
    var allowedUnsignedInt: UnsignedIntType? = null



    /**
     *
     */
    var allowedString: StringType? = null



    /**
     *
     */
    var allowedMoney: Money? = null



    /**
     *
     */
    var usedUnsignedInt: UnsignedIntType? = null



    /**
     *
     */
    var usedMoney: Money? = null




}

/**
 * This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided.
 */
class ExplanationOfBenefitInsurance(
    val focal: BooleanType,
    val coverage: Reference): BackboneElement() {


    /**
     * Reference numbers previously provided by the insurer to the provider to be quoted on subsequent claims containing services or products related to the prior authorization.
     */
    var preAuthRef: List<StringType>? = null




}

/**
 * This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided.
 */
class ExplanationOfBenefitItem(
    val sequence: PositiveIntType,
    val productOrService: CodeableConcept): BackboneElement() {


    /**
     * Care team members related to this service or product.
     */
    var careTeamSequence: List<PositiveIntType>? = null



    /**
     * Diagnoses applicable for this service or product.
     */
    var diagnosisSequence: List<PositiveIntType>? = null



    /**
     * Procedures applicable for this service or product.
     */
    var procedureSequence: List<PositiveIntType>? = null



    /**
     * Exceptions, special conditions and supporting information applicable for this service or product.
     */
    var informationSequence: List<PositiveIntType>? = null



    /**
     * The type of revenue or cost center providing the product and/or service.
     */
    var revenue: CodeableConcept? = null



    /**
     * Code to identify the general type of benefits under which products and services are provided.
     */
    var category: CodeableConcept? = null



    /**
     * Item typification or modifiers codes to convey additional context for the product or service.
     */
    var modifier: List<CodeableConcept>? = null



    /**
     * Identifies the program under which this may be recovered.
     */
    var programCode: List<CodeableConcept>? = null



    /**
     *
     */
    var servicedDate: DateType? = null



    /**
     *
     */
    var servicedPeriod: Period? = null



    /**
     *
     */
    var locationCodeableConcept: CodeableConcept? = null



    /**
     *
     */
    var locationAddress: Address? = null



    /**
     *
     */
    var locationReference: Reference? = null

    @JsonIgnore
    var locationReferenceTarget: Resource? = null

    /**
     * The number of repetitions of a service or product.
     */
    var quantity: Quantity? = null



    /**
     * If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
     */
    var unitPrice: Money? = null



    /**
     * A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.
     */
    var factor: DecimalType? = null



    /**
     * The quantity times the unit price for an additional service or product or charge.
     */
    var net: Money? = null



    /**
     * Unique Device Identifiers associated with this line item.
     */
    var udi: List<Reference>? = null

    @JsonIgnore
    var udiTarget: List<Resource>? = null

    /**
     * Physical service site on the patient (limb, tooth, etc.).
     */
    var bodySite: CodeableConcept? = null



    /**
     * A region or surface of the bodySite, e.g. limb region or tooth surface(s).
     */
    var subSite: List<CodeableConcept>? = null



    /**
     * A billed item may include goods or services provided in multiple encounters.
     */
    var encounter: List<Reference>? = null

    @JsonIgnore
    var encounterTarget: List<Resource>? = null

    /**
     * The numbers associated with notes below which apply to the adjudication of this item.
     */
    var noteNumber: List<PositiveIntType>? = null



    /**
     * If this item is a group then the values here are a summary of the adjudication of the detail items. If this item is a simple product or service then this is the result of the adjudication of this item.
     */
    var adjudication: List<ExplanationOfBenefitAdjudication>? = null



    /**
     * Second-tier of goods and services.
     */
    var detail: List<ExplanationOfBenefitDetail>? = null




}

/**
 * This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided.
 */
class ExplanationOfBenefitPayee: BackboneElement()
{


    /**
     * Type of Party to be reimbursed: Subscriber, provider, other.
     */
    var type: CodeableConcept? = null



    /**
     * Reference to the individual or organization to whom any payment will be made.
     */
    var party: Reference? = null

    @JsonIgnore
    var partyTarget: Resource? = null


}

/**
 * This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided.
 */
class ExplanationOfBenefitPayment: BackboneElement()
{


    /**
     * Whether this represents partial or complete payment of the benefits payable.
     */
    var type: CodeableConcept? = null



    /**
     * Total amount of all adjustments to this payment included in this transaction which are not related to this claim's adjudication.
     */
    var adjustment: Money? = null



    /**
     * Reason for the payment adjustment.
     */
    var adjustmentReason: CodeableConcept? = null



    /**
     * Estimated date the payment will be issued or the actual issue date of payment.
     */
    var date: DateType? = null



    /**
     * Benefits payable less any payment adjustment.
     */
    var amount: Money? = null



    /**
     * Issuer's unique identifier for the payment instrument.
     */
    var identifier: Identifier? = null




}

/**
 * This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided.
 */
class ExplanationOfBenefitProcedure(
    val sequence: PositiveIntType): BackboneElement() {


    /**
     * When the condition was observed or the relative ranking.
     */
    var type: List<CodeableConcept>? = null



    /**
     * Date and optionally time the procedure was performed.
     */
    var date: DateTimeType? = null



    /**
     *
     */
    var procedureCodeableConcept: CodeableConcept? = null



    /**
     *
     */
    var procedureReference: Reference? = null

    @JsonIgnore
    var procedureReferenceTarget: Resource? = null

    /**
     * Unique Device Identifiers associated with this line item.
     */
    var udi: List<Reference>? = null

    @JsonIgnore
    var udiTarget: List<Resource>? = null


}

/**
 * This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided.
 */
class ExplanationOfBenefitProcessNote: BackboneElement()
{


    /**
     * A number to uniquely identify a note entry.
     */
    var number: PositiveIntType? = null



    /**
     * The business purpose of the note text.
     */
    var type: NoteType? = null



    /**
     * The explanation or description associated with the processing.
     */
    var text: StringType? = null



    /**
     * A code to define the language used in the text of the note.
     */
    var language: CodeableConcept? = null




}

/**
 * This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided.
 */
class ExplanationOfBenefitRelated: BackboneElement()
{


    /**
     * Reference to a related claim.
     */
    var claim: Reference? = null

    @JsonIgnore
    var claimTarget: Resource? = null

    /**
     * A code to convey how the claims are related.
     */
    var relationship: CodeableConcept? = null



    /**
     * An alternate organizational reference to the case or file to which this particular claim pertains.
     */
    var reference: Identifier? = null




}

/**
 * A code specifying the state of the resource instance.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class ExplanationOfBenefitStatus(
    @JsonValue val text: String) {
    ACTIVE("active"),
    CANCELLED("cancelled"),
    DRAFT("draft"),
    ENTERED_IN_ERROR("entered-in-error")
}




/**
 * This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided.
 */
class ExplanationOfBenefitSubDetail(
    val sequence: PositiveIntType,
    val productOrService: CodeableConcept): BackboneElement() {


    /**
     * The type of revenue or cost center providing the product and/or service.
     */
    var revenue: CodeableConcept? = null



    /**
     * Code to identify the general type of benefits under which products and services are provided.
     */
    var category: CodeableConcept? = null



    /**
     * Item typification or modifiers codes to convey additional context for the product or service.
     */
    var modifier: List<CodeableConcept>? = null



    /**
     * Identifies the program under which this may be recovered.
     */
    var programCode: List<CodeableConcept>? = null



    /**
     * The number of repetitions of a service or product.
     */
    var quantity: Quantity? = null



    /**
     * If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
     */
    var unitPrice: Money? = null



    /**
     * A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.
     */
    var factor: DecimalType? = null



    /**
     * The quantity times the unit price for an additional service or product or charge.
     */
    var net: Money? = null



    /**
     * Unique Device Identifiers associated with this line item.
     */
    var udi: List<Reference>? = null

    @JsonIgnore
    var udiTarget: List<Resource>? = null

    /**
     * The numbers associated with notes below which apply to the adjudication of this item.
     */
    var noteNumber: List<PositiveIntType>? = null



    /**
     * The adjudication results.
     */
    var adjudication: List<ExplanationOfBenefitAdjudication>? = null




}

/**
 * This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided.
 */
class ExplanationOfBenefitSubDetail1(
    val productOrService: CodeableConcept): BackboneElement() {


    /**
     * Item typification or modifiers codes to convey additional context for the product or service.
     */
    var modifier: List<CodeableConcept>? = null



    /**
     * The number of repetitions of a service or product.
     */
    var quantity: Quantity? = null



    /**
     * If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
     */
    var unitPrice: Money? = null



    /**
     * A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.
     */
    var factor: DecimalType? = null



    /**
     * The quantity times the unit price for an additional service or product or charge.
     */
    var net: Money? = null



    /**
     * The numbers associated with notes below which apply to the adjudication of this item.
     */
    var noteNumber: List<PositiveIntType>? = null



    /**
     * The adjudication results.
     */
    var adjudication: List<ExplanationOfBenefitAdjudication>? = null




}

/**
 * This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided.
 */
class ExplanationOfBenefitSupportingInfo(
    val sequence: PositiveIntType,
    val category: CodeableConcept): BackboneElement() {


    /**
     * System and code pertaining to the specific information regarding special conditions relating to the setting, treatment or patient  for which care is sought.
     */
    var code: CodeableConcept? = null



    /**
     *
     */
    var timingDate: DateType? = null



    /**
     *
     */
    var timingPeriod: Period? = null



    /**
     *
     */
    var valueBoolean: BooleanType? = null



    /**
     *
     */
    var valueString: StringType? = null



    /**
     *
     */
    var valueQuantity: Quantity? = null



    /**
     *
     */
    var valueAttachment: Attachment? = null



    /**
     *
     */
    var valueReference: Reference? = null

    @JsonIgnore
    var valueReferenceTarget: Resource? = null

    /**
     * Provides the reason in the situation where a reason code is required in addition to the content.
     */
    var reason: Coding? = null




}

/**
 * This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided.
 */
class ExplanationOfBenefitTotal(
    val category: CodeableConcept,
    val amount: Money): BackboneElement()

/**
 * Whether the results by exposure is describing the results for the primary exposure of interest (exposure) or the alternative state (exposureAlternative).
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class ExposureState(
    @JsonValue val text: String) {
    EXPOSURE("exposure"),
    EXPOSURE_ALTERNATIVE("exposure-alternative")
}




/**
 * A expression that is evaluated in a specified context and returns a value. The context of use of the expression must specify the context in which the expression is evaluated, and how the result of the expression is used.
 * If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions
 */
class Expression(
    val language: ExpressionLanguage): Element() {


    /**
     * A brief, natural language description of the condition that effectively communicates the intended semantics.
     */
    var description: StringType? = null



    /**
     * A short name assigned to the expression to allow for multiple reuse of the expression in the context where it is defined.
     */
    var name: IdType? = null



    /**
     * An expression in the specified language that returns a value.
     */
    var expression: StringType? = null



    /**
     * A URI that defines where the expression is found.
     */
    var reference: UriType? = null




}

/**
 * The media type of the expression language.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class ExpressionLanguage(
    @JsonValue val text: String) {
    TEXT_CQL("text/cql"),
    TEXT_FHIRPATH("text/fhirpath"),
    APPLICATION_XFHIR_QUERY("application/x-fhir-query"),
    TEXT_CQL_IDENTIFIER("text/cql-identifier")
}




/**
 * Optional Extension Element - found in all resources.
 * If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions
 */
class Extension(
    val url: String): Element() {


    /**
     *
     */
    var valueBase64Binary: Base64BinaryType? = null



    /**
     *
     */
    var valueBoolean: BooleanType? = null



    /**
     *
     */
    var valueCanonical: CanonicalType? = null



    /**
     *
     */
    var valueCode: CodeType? = null



    /**
     *
     */
    var valueDate: DateType? = null



    /**
     *
     */
    var valueDateTime: DateTimeType? = null



    /**
     *
     */
    var valueDecimal: DecimalType? = null



    /**
     *
     */
    var valueId: IdType? = null



    /**
     *
     */
    var valueInstant: InstantType? = null



    /**
     *
     */
    var valueInteger: IntegerType? = null



    /**
     *
     */
    var valueMarkdown: MarkdownType? = null



    /**
     *
     */
    var valueOid: OidType? = null



    /**
     *
     */
    var valuePositiveInt: PositiveIntType? = null



    /**
     *
     */
    var valueString: StringType? = null



    /**
     *
     */
    var valueTime: TimeType? = null



    /**
     *
     */
    var valueUnsignedInt: UnsignedIntType? = null



    /**
     *
     */
    var valueUri: UriType? = null



    /**
     *
     */
    var valueUrl: UrlType? = null



    /**
     *
     */
    var valueUuid: UuidType? = null



    /**
     *
     */
    var valueAddress: Address? = null



    /**
     *
     */
    var valueAge: Age? = null



    /**
     *
     */
    var valueAnnotation: Annotation? = null



    /**
     *
     */
    var valueAttachment: Attachment? = null



    /**
     *
     */
    var valueCodeableConcept: CodeableConcept? = null



    /**
     *
     */
    var valueCoding: Coding? = null



    /**
     *
     */
    var valueContactPoint: ContactPoint? = null



    /**
     *
     */
    var valueCount: Count? = null



    /**
     *
     */
    var valueDistance: Distance? = null



    /**
     *
     */
    var valueDuration: Duration? = null



    /**
     *
     */
    var valueHumanName: HumanName? = null



    /**
     *
     */
    var valueIdentifier: Identifier? = null



    /**
     *
     */
    var valueMoney: Money? = null



    /**
     *
     */
    var valuePeriod: Period? = null



    /**
     *
     */
    var valueQuantity: Quantity? = null



    /**
     *
     */
    var valueRange: Range? = null



    /**
     *
     */
    var valueRatio: Ratio? = null



    /**
     *
     */
    var valueReference: Reference? = null

    @JsonIgnore
    var valueReferenceTarget: Resource? = null

    /**
     *
     */
    var valueSampledData: SampledData? = null



    /**
     *
     */
    var valueSignature: Signature? = null



    /**
     *
     */
    var valueTiming: Timing? = null



    /**
     *
     */
    var valueContactDetail: ContactDetail? = null



    /**
     *
     */
    var valueContributor: Contributor? = null



    /**
     *
     */
    var valueDataRequirement: DataRequirement? = null



    /**
     *
     */
    var valueExpression: Expression? = null



    /**
     *
     */
    var valueParameterDefinition: ParameterDefinition? = null



    /**
     *
     */
    var valueRelatedArtifact: RelatedArtifact? = null



    /**
     *
     */
    var valueTriggerDefinition: TriggerDefinition? = null



    /**
     *
     */
    var valueUsageContext: UsageContext? = null



    /**
     *
     */
    var valueDosage: Dosage? = null



    /**
     *
     */
    var valueMeta: Meta? = null




}

/**
 * How an extension context is interpreted.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class ExtensionContextType(
    @JsonValue val text: String) {
    FHIRPATH("fhirpath"),
    ELEMENT("element"),
    EXTENSION("extension")
}




/**
 * A code that identifies the status of the family history record.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class FamilyHistoryStatus(
    @JsonValue val text: String) {
    PARTIAL("partial"),
    COMPLETED("completed"),
    ENTERED_IN_ERROR("entered-in-error"),
    HEALTH_UNKNOWN("health-unknown")
}




/**
 * Significant health conditions for a person related to the patient relevant in the context of care for the patient.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class FamilyMemberHistory(
    val status: FamilyHistoryStatus,
    val patient: Reference,
    val relationship: CodeableConcept): DomainResource() {


    /**
     * Business identifiers assigned to this family member history by the performer or other systems which remain constant as the resource is updated and propagates from server to server.
     */
    var identifier: List<Identifier>? = null



    /**
     * The URL pointing to a FHIR-defined protocol, guideline, orderset or other definition that is adhered to in whole or in part by this FamilyMemberHistory.
     */
    var instantiatesCanonical: List<CanonicalType>? = null



    /**
     * The URL pointing to an externally maintained protocol, guideline, orderset or other definition that is adhered to in whole or in part by this FamilyMemberHistory.
     */
    var instantiatesUri: List<UriType>? = null



    /**
     * Describes why the family member's history is not available.
     */
    var dataAbsentReason: CodeableConcept? = null



    /**
     * The date (and possibly time) when the family member history was recorded or last updated.
     */
    var date: DateTimeType? = null



    /**
     * This will either be a name or a description; e.g. "Aunt Susan", "my cousin with the red hair".
     */
    var name: StringType? = null



    /**
     * The birth sex of the family member.
     */
    var sex: CodeableConcept? = null



    /**
     *
     */
    var bornPeriod: Period? = null



    /**
     *
     */
    var bornDate: DateType? = null



    /**
     *
     */
    var bornString: StringType? = null



    /**
     *
     */
    var ageAge: Age? = null



    /**
     *
     */
    var ageRange: Range? = null



    /**
     *
     */
    var ageString: StringType? = null



    /**
     * If true, indicates that the age value specified is an estimated value.
     */
    var estimatedAge: BooleanType? = null



    /**
     *
     */
    var deceasedBoolean: BooleanType? = null



    /**
     *
     */
    var deceasedAge: Age? = null



    /**
     *
     */
    var deceasedRange: Range? = null



    /**
     *
     */
    var deceasedDate: DateType? = null



    /**
     *
     */
    var deceasedString: StringType? = null



    /**
     * Describes why the family member history occurred in coded or textual form.
     */
    var reasonCode: List<CodeableConcept>? = null



    /**
     * Indicates a Condition, Observation, AllergyIntolerance, or QuestionnaireResponse that justifies this family member history event.
     */
    var reasonReference: List<Reference>? = null

    @JsonIgnore
    var reasonReferenceTarget: List<Resource>? = null

    /**
     * This property allows a non condition-specific note to the made about the related person. Ideally, the note would be in the condition property, but this is not always possible.
     */
    var note: List<Annotation>? = null



    /**
     * The significant Conditions (or condition) that the family member had. This is a repeating section to allow a system to represent more than one condition per resource, though there is nothing stopping multiple resources - one per condition.
     */
    var condition: List<FamilyMemberHistoryCondition>? = null




}

/**
 * Significant health conditions for a person related to the patient relevant in the context of care for the patient.
 */
class FamilyMemberHistoryCondition(
    val code: CodeableConcept): BackboneElement() {


    /**
     * Indicates what happened following the condition.  If the condition resulted in death, deceased date is captured on the relation.
     */
    var outcome: CodeableConcept? = null



    /**
     * This condition contributed to the cause of death of the related person. If contributedToDeath is not populated, then it is unknown.
     */
    var contributedToDeath: BooleanType? = null



    /**
     *
     */
    var onsetAge: Age? = null



    /**
     *
     */
    var onsetRange: Range? = null



    /**
     *
     */
    var onsetPeriod: Period? = null



    /**
     *
     */
    var onsetString: StringType? = null



    /**
     * An area where general notes can be placed about this specific condition.
     */
    var note: List<Annotation>? = null




}

/**
 * The availability status of the device.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class FHIRDeviceStatus(
    @JsonValue val text: String) {
    ACTIVE("active"),
    INACTIVE("inactive"),
    ENTERED_IN_ERROR("entered-in-error"),
    UNKNOWN("unknown")
}




/**
 * A code to indicate if the substance is actively used.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class FHIRSubstanceStatus(
    @JsonValue val text: String) {
    ACTIVE("active"),
    INACTIVE("inactive"),
    ENTERED_IN_ERROR("entered-in-error")
}




/**
 *
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class FHIRVersion(
    @JsonValue val text: String) {
    UNDERSCORE_001("0.01"),
    UNDERSCORE_005("0.05"),
    UNDERSCORE_006("0.06"),
    UNDERSCORE_011("0.11"),
    UNDERSCORE_0080("0.0.80"),
    UNDERSCORE_0081("0.0.81"),
    UNDERSCORE_0082("0.0.82"),
    UNDERSCORE_040("0.4.0"),
    UNDERSCORE_050("0.5.0"),
    UNDERSCORE_100("1.0.0"),
    UNDERSCORE_101("1.0.1"),
    UNDERSCORE_102("1.0.2"),
    UNDERSCORE_110("1.1.0"),
    UNDERSCORE_140("1.4.0"),
    UNDERSCORE_160("1.6.0"),
    UNDERSCORE_180("1.8.0"),
    UNDERSCORE_300("3.0.0"),
    UNDERSCORE_301("3.0.1"),
    UNDERSCORE_330("3.3.0"),
    UNDERSCORE_350("3.5.0"),
    UNDERSCORE_400("4.0.0"),
    UNDERSCORE_401("4.0.1")
}




/**
 * The kind of operation to perform as a part of a property based filter.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class FilterOperator(
    @JsonValue val text: String) {
    UNDERSCORE("="),
    IS_A("is-a"),
    DESCENDENT_OF("descendent-of"),
    IS_NOT_A("is-not-a"),
    REGEX("regex"),
    IN("in"),
    NOT_IN("not-in"),
    GENERALIZES("generalizes"),
    EXISTS("exists")
}




/**
 * A code specifying the state of the resource instance.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class FinancialResourceStatusCodes(
    @JsonValue val text: String) {
    ACTIVE("active"),
    CANCELLED("cancelled"),
    DRAFT("draft"),
    ENTERED_IN_ERROR("entered-in-error")
}




/**
 * Prospective warnings of potential issues when providing care to the patient.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class Flag(
    val status: FlagStatus,
    val code: CodeableConcept,
    val subject: Reference): DomainResource() {


    /**
     * Business identifiers assigned to this flag by the performer or other systems which remain constant as the resource is updated and propagates from server to server.
     */
    var identifier: List<Identifier>? = null



    /**
     * Allows a flag to be divided into different categories like clinical, administrative etc. Intended to be used as a means of filtering which flags are displayed to particular user or in a given context.
     */
    var category: List<CodeableConcept>? = null



    /**
     * The period of time from the activation of the flag to inactivation of the flag. If the flag is active, the end of the period should be unspecified.
     */
    var period: Period? = null



    /**
     * This alert is only relevant during the encounter.
     */
    var encounter: Reference? = null

    @JsonIgnore
    var encounterTarget: Resource? = null

    /**
     * The person, organization or device that created the flag.
     */
    var author: Reference? = null

    @JsonIgnore
    var authorTarget: Resource? = null


}

/**
 * Indicates whether this flag is active and needs to be displayed to a user, or whether it is no longer needed or was entered in error.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class FlagStatus(
    @JsonValue val text: String) {
    ACTIVE("active"),
    INACTIVE("inactive"),
    ENTERED_IN_ERROR("entered-in-error")
}




/**
 * Describes the intended objective(s) for a patient, group or organization care, for example, weight loss, restoring an activity of daily living, obtaining herd immunity via immunization, meeting a process improvement objective, etc.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class Goal(
    val lifecycleStatus: GoalLifecycleStatus,
    val description: CodeableConcept,
    val subject: Reference): DomainResource() {


    /**
     * Business identifiers assigned to this goal by the performer or other systems which remain constant as the resource is updated and propagates from server to server.
     */
    var identifier: List<Identifier>? = null



    /**
     * Describes the progression, or lack thereof, towards the goal against the target.
     */
    var achievementStatus: CodeableConcept? = null



    /**
     * Indicates a category the goal falls within.
     */
    var category: List<CodeableConcept>? = null



    /**
     * Identifies the mutually agreed level of importance associated with reaching/sustaining the goal.
     */
    var priority: CodeableConcept? = null



    /**
     *
     */
    var startDate: DateType? = null



    /**
     *
     */
    var startCodeableConcept: CodeableConcept? = null



    /**
     * Indicates what should be done by when.
     */
    var target: List<GoalTarget>? = null



    /**
     * Identifies when the current status.  I.e. When initially created, when achieved, when cancelled, etc.
     */
    var statusDate: DateType? = null



    /**
     * Captures the reason for the current status.
     */
    var statusReason: StringType? = null



    /**
     * Indicates whose goal this is - patient goal, practitioner goal, etc.
     */
    var expressedBy: Reference? = null

    @JsonIgnore
    var expressedByTarget: Resource? = null

    /**
     * The identified conditions and other health record elements that are intended to be addressed by the goal.
     */
    var addresses: List<Reference>? = null

    @JsonIgnore
    var addressesTarget: List<Resource>? = null

    /**
     * Any comments related to the goal.
     */
    var note: List<Annotation>? = null



    /**
     * Identifies the change (or lack of change) at the point when the status of the goal is assessed.
     */
    var outcomeCode: List<CodeableConcept>? = null



    /**
     * Details of what's changed (or not changed).
     */
    var outcomeReference: List<Reference>? = null

    @JsonIgnore
    var outcomeReferenceTarget: List<Resource>? = null


}

/**
 * Codes that reflect the current state of a goal and whether the goal is still being targeted.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class GoalLifecycleStatus(
    @JsonValue val text: String) {
    PROPOSED("proposed"),
    PLANNED("planned"),
    ACCEPTED("accepted"),
    ACTIVE("active"),
    ON_HOLD("on-hold"),
    COMPLETED("completed"),
    CANCELLED("cancelled"),
    ENTERED_IN_ERROR("entered-in-error"),
    REJECTED("rejected")
}




/**
 * Describes the intended objective(s) for a patient, group or organization care, for example, weight loss, restoring an activity of daily living, obtaining herd immunity via immunization, meeting a process improvement objective, etc.
 */
class GoalTarget: BackboneElement()
{


    /**
     * The parameter whose value is being tracked, e.g. body weight, blood pressure, or hemoglobin A1c level.
     */
    var measure: CodeableConcept? = null



    /**
     *
     */
    var detailQuantity: Quantity? = null



    /**
     *
     */
    var detailRange: Range? = null



    /**
     *
     */
    var detailCodeableConcept: CodeableConcept? = null



    /**
     *
     */
    var detailString: StringType? = null



    /**
     *
     */
    var detailBoolean: BooleanType? = null



    /**
     *
     */
    var detailInteger: IntegerType? = null



    /**
     *
     */
    var detailRatio: Ratio? = null



    /**
     *
     */
    var dueDate: DateType? = null



    /**
     *
     */
    var dueDuration: Duration? = null




}

/**
 * How a compartment must be linked.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class GraphCompartmentRule(
    @JsonValue val text: String) {
    IDENTICAL("identical"),
    MATCHING("matching"),
    DIFFERENT("different"),
    CUSTOM("custom")
}




/**
 * Defines how a compartment rule is used.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class GraphCompartmentUse(
    @JsonValue val text: String) {
    CONDITION("condition"),
    REQUIREMENT("requirement")
}




/**
 * A formal computable definition of a graph of resources - that is, a coherent set of resources that form a graph by following references. The Graph Definition resource defines a set and makes rules about the set.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class GraphDefinition(
    val name: StringType,
    val status: PublicationStatus,
    val start: CodeType): DomainResource() {


    /**
     * An absolute URI that is used to identify this graph definition when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which at which an authoritative instance of this graph definition is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the graph definition is stored on different servers.
     */
    var url: UriType? = null



    /**
     * The identifier that is used to identify this version of the graph definition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the graph definition author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
     */
    var version: StringType? = null



    /**
     * A Boolean value to indicate that this graph definition is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
     */
    var experimental: BooleanType? = null



    /**
     * The date  (and optionally time) when the graph definition was published. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the graph definition changes.
     */
    var date: DateTimeType? = null



    /**
     * The name of the organization or individual that published the graph definition.
     */
    var publisher: StringType? = null



    /**
     * Contact details to assist a user in finding and communicating with the publisher.
     */
    var contact: List<ContactDetail>? = null



    /**
     * A free text natural language description of the graph definition from a consumer's perspective.
     */
    var description: MarkdownType? = null



    /**
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate graph definition instances.
     */
    var useContext: List<UsageContext>? = null



    /**
     * A legal or geographic region in which the graph definition is intended to be used.
     */
    var jurisdiction: List<CodeableConcept>? = null



    /**
     * Explanation of why this graph definition is needed and why it has been designed as it has.
     */
    var purpose: MarkdownType? = null



    /**
     * The profile that describes the use of the base resource.
     */
    var profile: CanonicalType? = null



    /**
     * Links this graph makes rules about.
     */
    var link: List<GraphDefinitionLink>? = null




}

/**
 * A formal computable definition of a graph of resources - that is, a coherent set of resources that form a graph by following references. The Graph Definition resource defines a set and makes rules about the set.
 */
class GraphDefinitionCompartment(
    val use: GraphCompartmentUse,
    val code: CompartmentType,
    val rule: GraphCompartmentRule): BackboneElement() {


    /**
     * Custom rule, as a FHIRPath expression.
     */
    var expression: StringType? = null



    /**
     * Documentation for FHIRPath expression.
     */
    var description: StringType? = null




}

/**
 * A formal computable definition of a graph of resources - that is, a coherent set of resources that form a graph by following references. The Graph Definition resource defines a set and makes rules about the set.
 */
class GraphDefinitionLink: BackboneElement()
{


    /**
     * A FHIR expression that identifies one of FHIR References to other resources.
     */
    var path: StringType? = null



    /**
     * Which slice (if profiled).
     */
    var sliceName: StringType? = null



    /**
     * Minimum occurrences for this link.
     */
    var min: IntegerType? = null



    /**
     * Maximum occurrences for this link.
     */
    var max: StringType? = null



    /**
     * Information about why this link is of interest in this graph definition.
     */
    var description: StringType? = null



    /**
     * Potential target for the link.
     */
    var target: List<GraphDefinitionTarget>? = null




}

/**
 * A formal computable definition of a graph of resources - that is, a coherent set of resources that form a graph by following references. The Graph Definition resource defines a set and makes rules about the set.
 */
class GraphDefinitionTarget(
    val type: CodeType): BackboneElement() {


    /**
     * A set of parameters to look up.
     */
    var params: StringType? = null



    /**
     * Profile for the target resource.
     */
    var profile: CanonicalType? = null



    /**
     * Compartment Consistency Rules.
     */
    var compartment: List<GraphDefinitionCompartment>? = null



    /**
     * Additional links from target resource.
     */
    var link: List<GraphDefinitionLink>? = null




}

/**
 * Represents a defined collection of entities that may be discussed or acted upon collectively but which are not expected to act collectively, and are not formally or legally recognized; i.e. a collection of entities that isn't an Organization.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class Group(
    val type: GroupType,
    val actual: BooleanType): DomainResource() {


    /**
     * A unique business identifier for this group.
     */
    var identifier: List<Identifier>? = null



    /**
     * Indicates whether the record for the group is available for use or is merely being retained for historical purposes.
     */
    var active: BooleanType? = null



    /**
     * Provides a specific type of resource the group includes; e.g. "cow", "syringe", etc.
     */
    var code: CodeableConcept? = null



    /**
     * A label assigned to the group for human identification and communication.
     */
    var name: StringType? = null



    /**
     * A count of the number of resource instances that are part of the group.
     */
    var quantity: UnsignedIntType? = null



    /**
     * Entity responsible for defining and maintaining Group characteristics and/or registered members.
     */
    var managingEntity: Reference? = null

    @JsonIgnore
    var managingEntityTarget: Resource? = null

    /**
     * Identifies traits whose presence r absence is shared by members of the group.
     */
    var characteristic: List<GroupCharacteristic>? = null



    /**
     * Identifies the resource instances that are members of the group.
     */
    var member: List<GroupMember>? = null




}

/**
 * Represents a defined collection of entities that may be discussed or acted upon collectively but which are not expected to act collectively, and are not formally or legally recognized; i.e. a collection of entities that isn't an Organization.
 */
class GroupCharacteristic(
    val code: CodeableConcept,
    val exclude: BooleanType): BackboneElement() {


    /**
     *
     */
    var valueCodeableConcept: CodeableConcept? = null



    /**
     *
     */
    var valueBoolean: BooleanType? = null



    /**
     *
     */
    var valueQuantity: Quantity? = null



    /**
     *
     */
    var valueRange: Range? = null



    /**
     *
     */
    var valueReference: Reference? = null

    @JsonIgnore
    var valueReferenceTarget: Resource? = null

    /**
     * The period over which the characteristic is tested; e.g. the patient had an operation during the month of June.
     */
    var period: Period? = null




}

/**
 * Possible group measure aggregates (E.g. Mean, Median).
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class GroupMeasure(
    @JsonValue val text: String) {
    MEAN("mean"),
    MEDIAN("median"),
    MEAN_OF_MEAN("mean-of-mean"),
    MEAN_OF_MEDIAN("mean-of-median"),
    MEDIAN_OF_MEAN("median-of-mean"),
    MEDIAN_OF_MEDIAN("median-of-median")
}




/**
 * Represents a defined collection of entities that may be discussed or acted upon collectively but which are not expected to act collectively, and are not formally or legally recognized; i.e. a collection of entities that isn't an Organization.
 */
class GroupMember(
    val entity: Reference): BackboneElement() {


    /**
     * The period that the member was in the group, if known.
     */
    var period: Period? = null



    /**
     * A flag to indicate that the member is no longer in the group, but previously may have been a member.
     */
    var inactive: BooleanType? = null




}

/**
 * Types of resources that are part of group.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class GroupType(
    @JsonValue val text: String) {
    PERSON("person"),
    ANIMAL("animal"),
    PRACTITIONER("practitioner"),
    DEVICE("device"),
    MEDICATION("medication"),
    SUBSTANCE("substance")
}




/**
 * A guidance response is the formal response to a guidance request, including any output parameters returned by the evaluation, as well as the description of any proposed actions to be taken.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class GuidanceResponse(
    val status: GuidanceResponseStatus): DomainResource() {


    /**
     * The identifier of the request associated with this response. If an identifier was given as part of the request, it will be reproduced here to enable the requester to more easily identify the response in a multi-request scenario.
     */
    var requestIdentifier: Identifier? = null



    /**
     * Allows a service to provide  unique, business identifiers for the response.
     */
    var identifier: List<Identifier>? = null



    /**
     *
     */
    var moduleUri: UriType? = null



    /**
     *
     */
    var moduleCanonical: CanonicalType? = null



    /**
     *
     */
    var moduleCodeableConcept: CodeableConcept? = null



    /**
     * The patient for which the request was processed.
     */
    var subject: Reference? = null

    @JsonIgnore
    var subjectTarget: Resource? = null

    /**
     * The encounter during which this response was created or to which the creation of this record is tightly associated.
     */
    var encounter: Reference? = null

    @JsonIgnore
    var encounterTarget: Resource? = null

    /**
     * Indicates when the guidance response was processed.
     */
    var occurrenceDateTime: DateTimeType? = null



    /**
     * Provides a reference to the device that performed the guidance.
     */
    var performer: Reference? = null

    @JsonIgnore
    var performerTarget: Resource? = null

    /**
     * Describes the reason for the guidance response in coded or textual form.
     */
    var reasonCode: List<CodeableConcept>? = null



    /**
     * Indicates the reason the request was initiated. This is typically provided as a parameter to the evaluation and echoed by the service, although for some use cases, such as subscription- or event-based scenarios, it may provide an indication of the cause for the response.
     */
    var reasonReference: List<Reference>? = null

    @JsonIgnore
    var reasonReferenceTarget: List<Resource>? = null

    /**
     * Provides a mechanism to communicate additional information about the response.
     */
    var note: List<Annotation>? = null



    /**
     * Messages resulting from the evaluation of the artifact or artifacts. As part of evaluating the request, the engine may produce informational or warning messages. These messages will be provided by this element.
     */
    var evaluationMessage: List<Reference>? = null

    @JsonIgnore
    var evaluationMessageTarget: List<Resource>? = null

    /**
     * The output parameters of the evaluation, if any. Many modules will result in the return of specific resources such as procedure or communication requests that are returned as part of the operation result. However, modules may define specific outputs that would be returned as the result of the evaluation, and these would be returned in this element.
     */
    var outputParameters: Reference? = null

    @JsonIgnore
    var outputParametersTarget: Resource? = null

    /**
     * The actions, if any, produced by the evaluation of the artifact.
     */
    var result: Reference? = null

    @JsonIgnore
    var resultTarget: Resource? = null

    /**
     * If the evaluation could not be completed due to lack of information, or additional information would potentially result in a more accurate response, this element will a description of the data required in order to proceed with the evaluation. A subsequent request to the service should include this data.
     */
    var dataRequirement: List<DataRequirement>? = null




}

/**
 * The status of a guidance response.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class GuidanceResponseStatus(
    @JsonValue val text: String) {
    SUCCESS("success"),
    DATA_REQUESTED("data-requested"),
    DATA_REQUIRED("data-required"),
    IN_PROGRESS("in-progress"),
    FAILURE("failure"),
    ENTERED_IN_ERROR("entered-in-error")
}




/**
 * A code that indicates how the page is generated.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class GuidePageGeneration(
    @JsonValue val text: String) {
    HTML("html"),
    MARKDOWN("markdown"),
    XML("xml"),
    GENERATED("generated")
}




/**
 * Code of parameter that is input to the guide.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class GuideParameterCode(
    @JsonValue val text: String) {
    APPLY("apply"),
    PATH_RESOURCE("path-resource"),
    PATH_PAGES("path-pages"),
    PATH_TX_CACHE("path-tx-cache"),
    EXPANSION_PARAMETER("expansion-parameter"),
    RULE_BROKEN_LINKS("rule-broken-links"),
    GENERATE_XML("generate-xml"),
    GENERATE_JSON("generate-json"),
    GENERATE_TURTLE("generate-turtle"),
    HTML_TEMPLATE("html-template")
}




/**
 * The details of a healthcare service available at a location.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class HealthcareService: DomainResource()
{


    /**
     * External identifiers for this item.
     */
    var identifier: List<Identifier>? = null



    /**
     * This flag is used to mark the record to not be used. This is not used when a center is closed for maintenance, or for holidays, the notAvailable period is to be used for this.
     */
    var active: BooleanType? = null



    /**
     * The organization that provides this healthcare service.
     */
    var providedBy: Reference? = null

    @JsonIgnore
    var providedByTarget: Resource? = null

    /**
     * Identifies the broad category of service being performed or delivered.
     */
    var category: List<CodeableConcept>? = null



    /**
     * The specific type of service that may be delivered or performed.
     */
    var type: List<CodeableConcept>? = null



    /**
     * Collection of specialties handled by the service site. This is more of a medical term.
     */
    var specialty: List<CodeableConcept>? = null



    /**
     * The location(s) where this healthcare service may be provided.
     */
    var location: List<Reference>? = null

    @JsonIgnore
    var locationTarget: List<Resource>? = null

    /**
     * Further description of the service as it would be presented to a consumer while searching.
     */
    var name: StringType? = null



    /**
     * Any additional description of the service and/or any specific issues not covered by the other attributes, which can be displayed as further detail under the serviceName.
     */
    var comment: StringType? = null



    /**
     * Extra details about the service that can't be placed in the other fields.
     */
    var extraDetails: MarkdownType? = null



    /**
     * If there is a photo/symbol associated with this HealthcareService, it may be included here to facilitate quick identification of the service in a list.
     */
    var photo: Attachment? = null



    /**
     * List of contacts related to this specific healthcare service.
     */
    var telecom: List<ContactPoint>? = null



    /**
     * The location(s) that this service is available to (not where the service is provided).
     */
    var coverageArea: List<Reference>? = null

    @JsonIgnore
    var coverageAreaTarget: List<Resource>? = null

    /**
     * The code(s) that detail the conditions under which the healthcare service is available/offered.
     */
    var serviceProvisionCode: List<CodeableConcept>? = null



    /**
     * Does this service have specific eligibility requirements that need to be met in order to use the service?
     */
    var eligibility: List<HealthcareServiceEligibility>? = null



    /**
     * Programs that this service is applicable to.
     */
    var program: List<CodeableConcept>? = null



    /**
     * Collection of characteristics (attributes).
     */
    var characteristic: List<CodeableConcept>? = null



    /**
     * Some services are specifically made available in multiple languages, this property permits a directory to declare the languages this is offered in. Typically this is only provided where a service operates in communities with mixed languages used.
     */
    var communication: List<CodeableConcept>? = null



    /**
     * Ways that the service accepts referrals, if this is not provided then it is implied that no referral is required.
     */
    var referralMethod: List<CodeableConcept>? = null



    /**
     * Indicates whether or not a prospective consumer will require an appointment for a particular service at a site to be provided by the Organization. Indicates if an appointment is required for access to this service.
     */
    var appointmentRequired: BooleanType? = null



    /**
     * A collection of times that the Service Site is available.
     */
    var availableTime: List<HealthcareServiceAvailableTime>? = null



    /**
     * The HealthcareService is not available during this period of time due to the provided reason.
     */
    var notAvailable: List<HealthcareServiceNotAvailable>? = null



    /**
     * A description of site availability exceptions, e.g. public holiday availability. Succinctly describing all possible exceptions to normal site availability as details in the available Times and not available Times.
     */
    var availabilityExceptions: StringType? = null



    /**
     * Technical endpoints providing access to services operated for the specific healthcare services defined at this resource.
     */
    var endpoint: List<Reference>? = null

    @JsonIgnore
    var endpointTarget: List<Resource>? = null


}

/**
 * The details of a healthcare service available at a location.
 */
class HealthcareServiceAvailableTime: BackboneElement()
{


    /**
     * Indicates which days of the week are available between the start and end Times.
     */
    var daysOfWeek: List<DaysOfWeek>? = null



    /**
     * Is this always available? (hence times are irrelevant) e.g. 24 hour service.
     */
    var allDay: BooleanType? = null



    /**
     * The opening time of day. Note: If the AllDay flag is set, then this time is ignored.
     */
    var availableStartTime: TimeType? = null



    /**
     * The closing time of day. Note: If the AllDay flag is set, then this time is ignored.
     */
    var availableEndTime: TimeType? = null




}

/**
 * The details of a healthcare service available at a location.
 */
class HealthcareServiceEligibility: BackboneElement()
{


    /**
     * Coded value for the eligibility.
     */
    var code: CodeableConcept? = null



    /**
     * Describes the eligibility conditions for the service.
     */
    var comment: MarkdownType? = null




}

/**
 * The details of a healthcare service available at a location.
 */
class HealthcareServiceNotAvailable(
    val description: StringType): BackboneElement() {


    /**
     * Service is not available (seasonally or for a public holiday) from this date.
     */
    var during: Period? = null




}

/**
 * HTTP verbs (in the HTTP command line). See [HTTP rfc](https://tools.ietf.org/html/rfc7231) for details.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class HTTPVerb(
    @JsonValue val text: String) {
    GET("GET"),
    HEAD("HEAD"),
    POST("POST"),
    PUT("PUT"),
    DELETE("DELETE"),
    PATCH("PATCH")
}




/**
 * A human's name with the ability to identify parts and usage.
 * If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions
 */
class HumanName: Element()
{


    /**
     * Identifies the purpose for this name.
     */
    var use: NameUse? = null



    /**
     * Specifies the entire name as it should be displayed e.g. on an application UI. This may be provided instead of or as well as the specific parts.
     */
    var text: StringType? = null



    /**
     * The part of a name that links to the genealogy. In some cultures (e.g. Eritrea) the family name of a son is the first name of his father.
     */
    var family: StringType? = null



    /**
     * Given name.
     */
    var given: List<StringType>? = null



    /**
     * Part of the name that is acquired as a title due to academic, legal, employment or nobility status, etc. and that appears at the start of the name.
     */
    var prefix: List<StringType>? = null



    /**
     * Part of the name that is acquired as a title due to academic, legal, employment or nobility status, etc. and that appears at the end of the name.
     */
    var suffix: List<StringType>? = null



    /**
     * Indicates the period of time when this name was valid for the named person.
     */
    var period: Period? = null




}

/**
 * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
 * RFC 4122
 * If the element is present, it must have either a @value, an @id referenced from the Narrative, or extensions
 */
data class IdType(@JsonValue val value: String) {
    companion object {
        @JvmStatic
        @JsonCreator
        fun create(value: String) = IdType(value)
    }
}


/**
 * An identifier - identifies some entity uniquely and unambiguously. Typically this is used for business identifiers.
 * If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions
 */
class Identifier: Element()
{


    /**
     * The purpose of this identifier.
     */
    var use: IdentifierUse? = null



    /**
     * A coded type for the identifier that can be used to determine which identifier to use for a specific purpose.
     */
    var type: CodeableConcept? = null



    /**
     * Establishes the namespace for the value - that is, a URL that describes a set values that are unique.
     */
    var system: UriType? = null



    /**
     * The portion of the identifier typically relevant to the user and which is unique within the context of the system.
     */
    var value: StringType? = null



    /**
     * Time period during which identifier is/was valid for use.
     */
    var period: Period? = null



    /**
     * Organization that issued/manages the identifier.
     */
    var assigner: Reference? = null

    @JsonIgnore
    var assignerTarget: Resource? = null


}

/**
 * Identifies the purpose for this identifier, if known .
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class IdentifierUse(
    @JsonValue val text: String) {
    USUAL("usual"),
    OFFICIAL("official"),
    TEMP("temp"),
    SECONDARY("secondary"),
    OLD("old")
}




/**
 * The level of confidence that this link represents the same actual person, based on NIST Authentication Levels.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class IdentityAssuranceLevel(
    @JsonValue val text: String) {
    LEVEL1("level1"),
    LEVEL2("level2"),
    LEVEL3("level3"),
    LEVEL4("level4")
}





/**
 * Representation of the content produced in a DICOM imaging study. A study comprises a set of series, each of which includes a set of Service-Object Pair Instances (SOP Instances - images or other data) acquired or produced in a common context.  A series is of only one modality (e.g. X-ray, CT, MR, ultrasound), but a study may have multiple series of different modalities.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class ImagingStudy(
    val status: ImagingStudyStatus,
    val subject: Reference): DomainResource() {


    /**
     * Identifiers for the ImagingStudy such as DICOM Study Instance UID, and Accession Number.
     */
    var identifier: List<Identifier>? = null



    /**
     * A list of all the series.modality values that are actual acquisition modalities, i.e. those in the DICOM Context Group 29 (value set OID 1.2.840.10008.6.1.19).
     */
    var modality: List<Coding>? = null



    /**
     * The healthcare event (e.g. a patient and healthcare provider interaction) during which this ImagingStudy is made.
     */
    var encounter: Reference? = null

    @JsonIgnore
    var encounterTarget: Resource? = null

    /**
     * Date and time the study started.
     */
    var started: DateTimeType? = null



    /**
     * A list of the diagnostic requests that resulted in this imaging study being performed.
     */
    var basedOn: List<Reference>? = null

    @JsonIgnore
    var basedOnTarget: List<Resource>? = null

    /**
     * The requesting/referring physician.
     */
    var referrer: Reference? = null

    @JsonIgnore
    var referrerTarget: Resource? = null

    /**
     * Who read the study and interpreted the images or other content.
     */
    var interpreter: List<Reference>? = null

    @JsonIgnore
    var interpreterTarget: List<Resource>? = null

    /**
     * The network service providing access (e.g., query, view, or retrieval) for the study. See implementation notes for information about using DICOM endpoints. A study-level endpoint applies to each series in the study, unless overridden by a series-level endpoint with the same Endpoint.connectionType.
     */
    var endpoint: List<Reference>? = null

    @JsonIgnore
    var endpointTarget: List<Resource>? = null

    /**
     * Number of Series in the Study. This value given may be larger than the number of series elements this Resource contains due to resource availability, security, or other factors. This element should be present if any series elements are present.
     */
    var numberOfSeries: UnsignedIntType? = null



    /**
     * Number of SOP Instances in Study. This value given may be larger than the number of instance elements this resource contains due to resource availability, security, or other factors. This element should be present if any instance elements are present.
     */
    var numberOfInstances: UnsignedIntType? = null



    /**
     * The procedure which this ImagingStudy was part of.
     */
    var procedureReference: Reference? = null

    @JsonIgnore
    var procedureReferenceTarget: Resource? = null

    /**
     * The code for the performed procedure type.
     */
    var procedureCode: List<CodeableConcept>? = null



    /**
     * The principal physical location where the ImagingStudy was performed.
     */
    var location: Reference? = null

    @JsonIgnore
    var locationTarget: Resource? = null

    /**
     * Description of clinical condition indicating why the ImagingStudy was requested.
     */
    var reasonCode: List<CodeableConcept>? = null



    /**
     * Indicates another resource whose existence justifies this Study.
     */
    var reasonReference: List<Reference>? = null

    @JsonIgnore
    var reasonReferenceTarget: List<Resource>? = null

    /**
     * Per the recommended DICOM mapping, this element is derived from the Study Description attribute (0008,1030). Observations or findings about the imaging study should be recorded in another resource, e.g. Observation, and not in this element.
     */
    var note: List<Annotation>? = null



    /**
     * The Imaging Manager description of the study. Institution-generated description or classification of the Study (component) performed.
     */
    var description: StringType? = null



    /**
     * Each study has one or more series of images or other content.
     */
    var series: List<ImagingStudySeries>? = null




}

/**
 * Representation of the content produced in a DICOM imaging study. A study comprises a set of series, each of which includes a set of Service-Object Pair Instances (SOP Instances - images or other data) acquired or produced in a common context.  A series is of only one modality (e.g. X-ray, CT, MR, ultrasound), but a study may have multiple series of different modalities.
 */
class ImagingStudyInstance(
    val uid: IdType,
    val sopClass: Coding): BackboneElement() {


    /**
     * The number of instance in the series.
     */
    var number: UnsignedIntType? = null



    /**
     * The description of the instance.
     */
    var title: StringType? = null




}

/**
 * Representation of the content produced in a DICOM imaging study. A study comprises a set of series, each of which includes a set of Service-Object Pair Instances (SOP Instances - images or other data) acquired or produced in a common context.  A series is of only one modality (e.g. X-ray, CT, MR, ultrasound), but a study may have multiple series of different modalities.
 */
class ImagingStudyPerformer(
    val actor: Reference): BackboneElement() {


    /**
     * Distinguishes the type of involvement of the performer in the series.
     */
    var function: CodeableConcept? = null




}

/**
 * Representation of the content produced in a DICOM imaging study. A study comprises a set of series, each of which includes a set of Service-Object Pair Instances (SOP Instances - images or other data) acquired or produced in a common context.  A series is of only one modality (e.g. X-ray, CT, MR, ultrasound), but a study may have multiple series of different modalities.
 */
class ImagingStudySeries(
    val uid: IdType,
    val modality: Coding): BackboneElement() {


    /**
     * The numeric identifier of this series in the study.
     */
    var number: UnsignedIntType? = null



    /**
     * A description of the series.
     */
    var description: StringType? = null



    /**
     * Number of SOP Instances in the Study. The value given may be larger than the number of instance elements this resource contains due to resource availability, security, or other factors. This element should be present if any instance elements are present.
     */
    var numberOfInstances: UnsignedIntType? = null



    /**
     * The network service providing access (e.g., query, view, or retrieval) for this series. See implementation notes for information about using DICOM endpoints. A series-level endpoint, if present, has precedence over a study-level endpoint with the same Endpoint.connectionType.
     */
    var endpoint: List<Reference>? = null

    @JsonIgnore
    var endpointTarget: List<Resource>? = null

    /**
     * The anatomic structures examined. See DICOM Part 16 Annex L (http://dicom.nema.org/medical/dicom/current/output/chtml/part16/chapter_L.html) for DICOM to SNOMED-CT mappings. The bodySite may indicate the laterality of body part imaged; if so, it shall be consistent with any content of ImagingStudy.series.laterality.
     */
    var bodySite: Coding? = null



    /**
     * The laterality of the (possibly paired) anatomic structures examined. E.g., the left knee, both lungs, or unpaired abdomen. If present, shall be consistent with any laterality information indicated in ImagingStudy.series.bodySite.
     */
    var laterality: Coding? = null



    /**
     * The specimen imaged, e.g., for whole slide imaging of a biopsy.
     */
    var specimen: List<Reference>? = null

    @JsonIgnore
    var specimenTarget: List<Resource>? = null

    /**
     * The date and time the series was started.
     */
    var started: DateTimeType? = null



    /**
     * Indicates who or what performed the series and how they were involved.
     */
    var performer: List<ImagingStudyPerformer>? = null



    /**
     * A single SOP instance within the series, e.g. an image, or presentation state.
     */
    var instance: List<ImagingStudyInstance>? = null




}

/**
 * The status of the ImagingStudy.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class ImagingStudyStatus(
    @JsonValue val text: String) {
    REGISTERED("registered"),
    AVAILABLE("available"),
    CANCELLED("cancelled"),
    ENTERED_IN_ERROR("entered-in-error"),
    UNKNOWN("unknown")
}




/**
 * Describes the event of a patient being administered a vaccine or a record of an immunization as reported by a patient, a clinician or another party.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class Immunization(
    val status: ImmunizationStatusCodes,
    val vaccineCode: CodeableConcept,
    val patient: Reference): DomainResource() {


    /**
     * A unique identifier assigned to this immunization record.
     */
    var identifier: List<Identifier>? = null



    /**
     * Indicates the reason the immunization event was not performed.
     */
    var statusReason: CodeableConcept? = null



    /**
     * The visit or admission or other contact between patient and health care provider the immunization was performed as part of.
     */
    var encounter: Reference? = null

    @JsonIgnore
    var encounterTarget: Resource? = null

    /**
     *
     */
    var occurrenceDateTime: DateTimeType? = null



    /**
     *
     */
    var occurrenceString: StringType? = null



    /**
     * The date the occurrence of the immunization was first captured in the record - potentially significantly after the occurrence of the event.
     */
    var recorded: DateTimeType? = null



    /**
     * An indication that the content of the record is based on information from the person who administered the vaccine. This reflects the context under which the data was originally recorded.
     */
    var primarySource: BooleanType? = null



    /**
     * The source of the data when the report of the immunization event is not based on information from the person who administered the vaccine.
     */
    var reportOrigin: CodeableConcept? = null



    /**
     * The service delivery location where the vaccine administration occurred.
     */
    var location: Reference? = null

    @JsonIgnore
    var locationTarget: Resource? = null

    /**
     * Name of vaccine manufacturer.
     */
    var manufacturer: Reference? = null

    @JsonIgnore
    var manufacturerTarget: Resource? = null

    /**
     * Lot number of the  vaccine product.
     */
    var lotNumber: StringType? = null



    /**
     * Date vaccine batch expires.
     */
    var expirationDate: DateType? = null



    /**
     * Body site where vaccine was administered.
     */
    var site: CodeableConcept? = null



    /**
     * The path by which the vaccine product is taken into the body.
     */
    var route: CodeableConcept? = null



    /**
     * The quantity of vaccine product that was administered.
     */
    var doseQuantity: Quantity? = null



    /**
     * Indicates who performed the immunization event.
     */
    var performer: List<ImmunizationPerformer>? = null



    /**
     * Extra information about the immunization that is not conveyed by the other attributes.
     */
    var note: List<Annotation>? = null



    /**
     * Reasons why the vaccine was administered.
     */
    var reasonCode: List<CodeableConcept>? = null



    /**
     * Condition, Observation or DiagnosticReport that supports why the immunization was administered.
     */
    var reasonReference: List<Reference>? = null

    @JsonIgnore
    var reasonReferenceTarget: List<Resource>? = null

    /**
     * Indication if a dose is considered to be subpotent. By default, a dose should be considered to be potent.
     */
    var isSubpotent: BooleanType? = null



    /**
     * Reason why a dose is considered to be subpotent.
     */
    var subpotentReason: List<CodeableConcept>? = null



    /**
     * Educational material presented to the patient (or guardian) at the time of vaccine administration.
     */
    var education: List<ImmunizationEducation>? = null



    /**
     * Indicates a patient's eligibility for a funding program.
     */
    var programEligibility: List<CodeableConcept>? = null



    /**
     * Indicates the source of the vaccine actually administered. This may be different than the patient eligibility (e.g. the patient may be eligible for a publically purchased vaccine but due to inventory issues, vaccine purchased with private funds was actually administered).
     */
    var fundingSource: CodeableConcept? = null



    /**
     * Categorical data indicating that an adverse event is associated in time to an immunization.
     */
    var reaction: List<ImmunizationReaction>? = null



    /**
     * The protocol (set of recommendations) being followed by the provider who administered the dose.
     */
    var protocolApplied: List<ImmunizationProtocolApplied>? = null




}

/**
 * Describes the event of a patient being administered a vaccine or a record of an immunization as reported by a patient, a clinician or another party.
 */
class ImmunizationEducation: BackboneElement()
{


    /**
     * Identifier of the material presented to the patient.
     */
    var documentType: StringType? = null



    /**
     * Reference pointer to the educational material given to the patient if the information was on line.
     */
    var reference: UriType? = null



    /**
     * Date the educational material was published.
     */
    var publicationDate: DateTimeType? = null



    /**
     * Date the educational material was given to the patient.
     */
    var presentationDate: DateTimeType? = null




}

/**
 * Describes a comparison of an immunization event against published recommendations to determine if the administration is "valid" in relation to those  recommendations.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class ImmunizationEvaluation(
    val status: ImmunizationEvaluationStatusCodes,
    val patient: Reference,
    val targetDisease: CodeableConcept,
    val immunizationEvent: Reference,
    val doseStatus: CodeableConcept): DomainResource() {


    /**
     * A unique identifier assigned to this immunization evaluation record.
     */
    var identifier: List<Identifier>? = null



    /**
     * The date the evaluation of the vaccine administration event was performed.
     */
    var date: DateTimeType? = null



    /**
     * Indicates the authority who published the protocol (e.g. ACIP).
     */
    var authority: Reference? = null

    @JsonIgnore
    var authorityTarget: Resource? = null

    /**
     * Provides an explanation as to why the vaccine administration event is valid or not relative to the published recommendations.
     */
    var doseStatusReason: List<CodeableConcept>? = null



    /**
     * Additional information about the evaluation.
     */
    var description: StringType? = null



    /**
     * One possible path to achieve presumed immunity against a disease - within the context of an authority.
     */
    var series: StringType? = null



    /**
     *
     */
    var doseNumberPositiveInt: PositiveIntType? = null



    /**
     *
     */
    var doseNumberString: StringType? = null



    /**
     *
     */
    var seriesDosesPositiveInt: PositiveIntType? = null



    /**
     *
     */
    var seriesDosesString: StringType? = null




}

/**
 * The status of the evaluation being done.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class ImmunizationEvaluationStatusCodes(
    @JsonValue val text: String) {
    COMPLETED("completed"),
    ENTERED_IN_ERROR("entered-in-error")
}




/**
 * Describes the event of a patient being administered a vaccine or a record of an immunization as reported by a patient, a clinician or another party.
 */
class ImmunizationPerformer(
    val actor: Reference): BackboneElement() {


    /**
     * Describes the type of performance (e.g. ordering provider, administering provider, etc.).
     */
    var function: CodeableConcept? = null




}

/**
 * Describes the event of a patient being administered a vaccine or a record of an immunization as reported by a patient, a clinician or another party.
 */
class ImmunizationProtocolApplied: BackboneElement()
{


    /**
     * One possible path to achieve presumed immunity against a disease - within the context of an authority.
     */
    var series: StringType? = null



    /**
     * Indicates the authority who published the protocol (e.g. ACIP) that is being followed.
     */
    var authority: Reference? = null

    @JsonIgnore
    var authorityTarget: Resource? = null

    /**
     * The vaccine preventable disease the dose is being administered against.
     */
    var targetDisease: List<CodeableConcept>? = null



    /**
     *
     */
    var doseNumberPositiveInt: PositiveIntType? = null



    /**
     *
     */
    var doseNumberString: StringType? = null



    /**
     *
     */
    var seriesDosesPositiveInt: PositiveIntType? = null



    /**
     *
     */
    var seriesDosesString: StringType? = null




}

/**
 * Describes the event of a patient being administered a vaccine or a record of an immunization as reported by a patient, a clinician or another party.
 */
class ImmunizationReaction: BackboneElement()
{


    /**
     * Date of reaction to the immunization.
     */
    var date: DateTimeType? = null



    /**
     * Details of the reaction.
     */
    var detail: Reference? = null

    @JsonIgnore
    var detailTarget: Resource? = null

    /**
     * Self-reported indicator.
     */
    var reported: BooleanType? = null




}

/**
 * A patient's point-in-time set of recommendations (i.e. forecasting) according to a published schedule with optional supporting justification.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class ImmunizationRecommendation(
    val patient: Reference,
    val date: DateTimeType,
    val recommendation: List<ImmunizationRecommendationRecommendation>): DomainResource() {


    /**
     * A unique identifier assigned to this particular recommendation record.
     */
    var identifier: List<Identifier>? = null



    /**
     * Indicates the authority who published the protocol (e.g. ACIP).
     */
    var authority: Reference? = null

    @JsonIgnore
    var authorityTarget: Resource? = null


}

/**
 * A patient's point-in-time set of recommendations (i.e. forecasting) according to a published schedule with optional supporting justification.
 */
class ImmunizationRecommendationDateCriterion(
    val code: CodeableConcept,
    val value: DateTimeType): BackboneElement()

/**
 * A patient's point-in-time set of recommendations (i.e. forecasting) according to a published schedule with optional supporting justification.
 */
class ImmunizationRecommendationRecommendation(
    val forecastStatus: CodeableConcept): BackboneElement() {


    /**
     * Vaccine(s) or vaccine group that pertain to the recommendation.
     */
    var vaccineCode: List<CodeableConcept>? = null



    /**
     * The targeted disease for the recommendation.
     */
    var targetDisease: CodeableConcept? = null



    /**
     * Vaccine(s) which should not be used to fulfill the recommendation.
     */
    var contraindicatedVaccineCode: List<CodeableConcept>? = null



    /**
     * The reason for the assigned forecast status.
     */
    var forecastReason: List<CodeableConcept>? = null



    /**
     * Vaccine date recommendations.  For example, earliest date to administer, latest date to administer, etc.
     */
    var dateCriterion: List<ImmunizationRecommendationDateCriterion>? = null



    /**
     * Contains the description about the protocol under which the vaccine was administered.
     */
    var description: StringType? = null



    /**
     * One possible path to achieve presumed immunity against a disease - within the context of an authority.
     */
    var series: StringType? = null



    /**
     *
     */
    var doseNumberPositiveInt: PositiveIntType? = null



    /**
     *
     */
    var doseNumberString: StringType? = null



    /**
     *
     */
    var seriesDosesPositiveInt: PositiveIntType? = null



    /**
     *
     */
    var seriesDosesString: StringType? = null



    /**
     * Immunization event history and/or evaluation that supports the status and recommendation.
     */
    var supportingImmunization: List<Reference>? = null

    @JsonIgnore
    var supportingImmunizationTarget: List<Resource>? = null

    /**
     * Patient Information that supports the status and recommendation.  This includes patient observations, adverse reactions and allergy/intolerance information.
     */
    var supportingPatientInformation: List<Reference>? = null

    @JsonIgnore
    var supportingPatientInformationTarget: List<Resource>? = null


}

/**
 * A set of codes indicating the current status of an Immunization.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class ImmunizationStatusCodes(
    @JsonValue val text: String) {
    COMPLETED("completed"),
    ENTERED_IN_ERROR("entered-in-error"),
    NOT_DONE("not-done")
}




/**
 * A set of rules of how a particular interoperability or standards problem is solved - typically through the use of FHIR resources. This resource is used to gather all the parts of an implementation guide into a logical whole and to publish a computable definition of all the parts.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class ImplementationGuide(
    val url: UriType,
    val name: StringType,
    val status: PublicationStatus,
    val packageId: IdType,
    val fhirVersion: List<FHIRVersion>): DomainResource() {


    /**
     * The identifier that is used to identify this version of the implementation guide when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the implementation guide author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
     */
    var version: StringType? = null



    /**
     * A short, descriptive, user-friendly title for the implementation guide.
     */
    var title: StringType? = null



    /**
     * A Boolean value to indicate that this implementation guide is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
     */
    var experimental: BooleanType? = null



    /**
     * The date  (and optionally time) when the implementation guide was published. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the implementation guide changes.
     */
    var date: DateTimeType? = null



    /**
     * The name of the organization or individual that published the implementation guide.
     */
    var publisher: StringType? = null



    /**
     * Contact details to assist a user in finding and communicating with the publisher.
     */
    var contact: List<ContactDetail>? = null



    /**
     * A free text natural language description of the implementation guide from a consumer's perspective.
     */
    var description: MarkdownType? = null



    /**
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate implementation guide instances.
     */
    var useContext: List<UsageContext>? = null



    /**
     * A legal or geographic region in which the implementation guide is intended to be used.
     */
    var jurisdiction: List<CodeableConcept>? = null



    /**
     * A copyright statement relating to the implementation guide and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the implementation guide.
     */
    var copyright: MarkdownType? = null



    /**
     * The license that applies to this Implementation Guide, using an SPDX license code, or 'not-open-source'.
     */
    var license: SPDXLicense? = null



    /**
     * Another implementation guide that this implementation depends on. Typically, an implementation guide uses value sets, profiles etc.defined in other implementation guides.
     */
    var dependsOn: List<ImplementationGuideDependsOn>? = null



    /**
     * A set of profiles that all resources covered by this implementation guide must conform to.
     */
    var global: List<ImplementationGuideGlobal>? = null



    /**
     * The information needed by an IG publisher tool to publish the whole implementation guide.
     */
    var definition: ImplementationGuideDefinition? = null



    /**
     * Information about an assembled implementation guide, created by the publication tooling.
     */
    var manifest: ImplementationGuideManifest? = null




}

/**
 * A set of rules of how a particular interoperability or standards problem is solved - typically through the use of FHIR resources. This resource is used to gather all the parts of an implementation guide into a logical whole and to publish a computable definition of all the parts.
 */
class ImplementationGuideDefinition(
    val resource: List<ImplementationGuideResource>): BackboneElement() {


    /**
     * A logical group of resources. Logical groups can be used when building pages.
     */
    var grouping: List<ImplementationGuideGrouping>? = null



    /**
     * A page / section in the implementation guide. The root page is the implementation guide home page.
     */
    var page: ImplementationGuidePage? = null



    /**
     * Defines how IG is built by tools.
     */
    var parameter: List<ImplementationGuideParameter>? = null



    /**
     * A template for building resources.
     */
    var template: List<ImplementationGuideTemplate>? = null




}

/**
 * A set of rules of how a particular interoperability or standards problem is solved - typically through the use of FHIR resources. This resource is used to gather all the parts of an implementation guide into a logical whole and to publish a computable definition of all the parts.
 */
class ImplementationGuideDependsOn(
    val uri: CanonicalType): BackboneElement() {


    /**
     * The NPM package name for the Implementation Guide that this IG depends on.
     */
    var packageId: IdType? = null



    /**
     * The version of the IG that is depended on, when the correct version is required to understand the IG correctly.
     */
    var version: StringType? = null




}

/**
 * A set of rules of how a particular interoperability or standards problem is solved - typically through the use of FHIR resources. This resource is used to gather all the parts of an implementation guide into a logical whole and to publish a computable definition of all the parts.
 */
class ImplementationGuideGlobal(
    val type: CodeType,
    val profile: CanonicalType): BackboneElement()

/**
 * A set of rules of how a particular interoperability or standards problem is solved - typically through the use of FHIR resources. This resource is used to gather all the parts of an implementation guide into a logical whole and to publish a computable definition of all the parts.
 */
class ImplementationGuideGrouping(
    val name: StringType): BackboneElement() {


    /**
     * Human readable text describing the package.
     */
    var description: StringType? = null




}

/**
 * A set of rules of how a particular interoperability or standards problem is solved - typically through the use of FHIR resources. This resource is used to gather all the parts of an implementation guide into a logical whole and to publish a computable definition of all the parts.
 */
class ImplementationGuideManifest(
    val resource: List<ImplementationGuideResource1>): BackboneElement() {


    /**
     * A pointer to official web page, PDF or other rendering of the implementation guide.
     */
    var rendering: UrlType? = null



    /**
     * Information about a page within the IG.
     */
    var page: List<ImplementationGuidePage1>? = null



    /**
     * Indicates a relative path to an image that exists within the IG.
     */
    var image: List<StringType>? = null



    /**
     * Indicates the relative path of an additional non-page, non-image file that is part of the IG - e.g. zip, jar and similar files that could be the target of a hyperlink in a derived IG.
     */
    var other: List<StringType>? = null




}

/**
 * A set of rules of how a particular interoperability or standards problem is solved - typically through the use of FHIR resources. This resource is used to gather all the parts of an implementation guide into a logical whole and to publish a computable definition of all the parts.
 */
class ImplementationGuidePage(
    val title: StringType,
    val generation: GuidePageGeneration): BackboneElement() {


    /**
     *
     */
    var nameUrl: UrlType? = null



    /**
     *
     */
    var nameReference: Reference? = null

    @JsonIgnore
    var nameReferenceTarget: Resource? = null

    /**
     * Nested Pages/Sections under this page.
     */
    var page: List<ImplementationGuidePage>? = null




}

/**
 * A set of rules of how a particular interoperability or standards problem is solved - typically through the use of FHIR resources. This resource is used to gather all the parts of an implementation guide into a logical whole and to publish a computable definition of all the parts.
 */
class ImplementationGuidePage1(
    val name: StringType): BackboneElement() {


    /**
     * Label for the page intended for human display.
     */
    var title: StringType? = null



    /**
     * The name of an anchor available on the page.
     */
    var anchor: List<StringType>? = null




}

/**
 * A set of rules of how a particular interoperability or standards problem is solved - typically through the use of FHIR resources. This resource is used to gather all the parts of an implementation guide into a logical whole and to publish a computable definition of all the parts.
 */
class ImplementationGuideParameter(
    val code: GuideParameterCode,
    val value: StringType): BackboneElement()

/**
 * A set of rules of how a particular interoperability or standards problem is solved - typically through the use of FHIR resources. This resource is used to gather all the parts of an implementation guide into a logical whole and to publish a computable definition of all the parts.
 */
class ImplementationGuideResource(
    val reference: Reference): BackboneElement() {


    /**
     * Indicates the FHIR Version(s) this artifact is intended to apply to. If no versions are specified, the resource is assumed to apply to all the versions stated in ImplementationGuide.fhirVersion.
     */
    var fhirVersion: List<FHIRVersion>? = null



    /**
     * A human assigned name for the resource. All resources SHOULD have a name, but the name may be extracted from the resource (e.g. ValueSet.name).
     */
    var name: StringType? = null



    /**
     * A description of the reason that a resource has been included in the implementation guide.
     */
    var description: StringType? = null



    /**
     *
     */
    var exampleBoolean: BooleanType? = null



    /**
     *
     */
    var exampleCanonical: CanonicalType? = null



    /**
     * Reference to the id of the grouping this resource appears in.
     */
    var groupingId: IdType? = null




}

/**
 * A set of rules of how a particular interoperability or standards problem is solved - typically through the use of FHIR resources. This resource is used to gather all the parts of an implementation guide into a logical whole and to publish a computable definition of all the parts.
 */
class ImplementationGuideResource1(
    val reference: Reference): BackboneElement() {


    /**
     *
     */
    var exampleBoolean: BooleanType? = null



    /**
     *
     */
    var exampleCanonical: CanonicalType? = null



    /**
     * The relative path for primary page for this resource within the IG.
     */
    var relativePath: UrlType? = null




}

/**
 * A set of rules of how a particular interoperability or standards problem is solved - typically through the use of FHIR resources. This resource is used to gather all the parts of an implementation guide into a logical whole and to publish a computable definition of all the parts.
 */
class ImplementationGuideTemplate(
    val code: CodeType,
    val source: StringType): BackboneElement() {


    /**
     * The scope in which the template applies.
     */
    var scope: StringType? = null




}

/**
 * An instant in time - known at least to the second
 * Note: This is intended for where precisely observed times are required, typically system logs etc., and not human-reported times - for them, see date and dateTime (which can be as precise as instant, but is not required to be) below. Time zone is always required
 * If the element is present, it must have either a @value, an @id, or extensions
 */
data class InstantType(@JsonValue val value: String) {
    companion object {
        @JvmStatic
        @JsonCreator
        fun create(value: String) = InstantType(value)
    }
}



/**
 * Details of a Health Insurance product/plan provided by an organization.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class InsurancePlan: DomainResource()
{


    /**
     * Business identifiers assigned to this health insurance product which remain constant as the resource is updated and propagates from server to server.
     */
    var identifier: List<Identifier>? = null



    /**
     * The current state of the health insurance product.
     */
    var status: PublicationStatus? = null



    /**
     * The kind of health insurance product.
     */
    var type: List<CodeableConcept>? = null



    /**
     * Official name of the health insurance product as designated by the owner.
     */
    var name: StringType? = null



    /**
     * A list of alternate names that the product is known as, or was known as in the past.
     */
    var alias: List<StringType>? = null



    /**
     * The period of time that the health insurance product is available.
     */
    var period: Period? = null



    /**
     * The entity that is providing  the health insurance product and underwriting the risk.  This is typically an insurance carriers, other third-party payers, or health plan sponsors comonly referred to as 'payers'.
     */
    var ownedBy: Reference? = null

    @JsonIgnore
    var ownedByTarget: Resource? = null

    /**
     * An organization which administer other services such as underwriting, customer service and/or claims processing on behalf of the health insurance product owner.
     */
    var administeredBy: Reference? = null

    @JsonIgnore
    var administeredByTarget: Resource? = null

    /**
     * The geographic region in which a health insurance product's benefits apply.
     */
    var coverageArea: List<Reference>? = null

    @JsonIgnore
    var coverageAreaTarget: List<Resource>? = null

    /**
     * The contact for the health insurance product for a certain purpose.
     */
    var contact: List<InsurancePlanContact>? = null



    /**
     * The technical endpoints providing access to services operated for the health insurance product.
     */
    var endpoint: List<Reference>? = null

    @JsonIgnore
    var endpointTarget: List<Resource>? = null

    /**
     * Reference to the network included in the health insurance product.
     */
    var network: List<Reference>? = null

    @JsonIgnore
    var networkTarget: List<Resource>? = null

    /**
     * Details about the coverage offered by the insurance product.
     */
    var coverage: List<InsurancePlanCoverage>? = null



    /**
     * Details about an insurance plan.
     */
    var plan: List<InsurancePlanPlan>? = null




}

/**
 * Details of a Health Insurance product/plan provided by an organization.
 */
class InsurancePlanBenefit(
    val type: CodeableConcept): BackboneElement() {


    /**
     * The referral requirements to have access/coverage for this benefit.
     */
    var requirement: StringType? = null



    /**
     * The specific limits on the benefit.
     */
    var limit: List<InsurancePlanLimit>? = null




}

/**
 * Details of a Health Insurance product/plan provided by an organization.
 */
class InsurancePlanBenefit1(
    val type: CodeableConcept): BackboneElement() {


    /**
     * List of the costs associated with a specific benefit.
     */
    var cost: List<InsurancePlanCost>? = null




}

/**
 * Details of a Health Insurance product/plan provided by an organization.
 */
class InsurancePlanContact: BackboneElement()
{


    /**
     * Indicates a purpose for which the contact can be reached.
     */
    var purpose: CodeableConcept? = null



    /**
     * A name associated with the contact.
     */
    var name: HumanName? = null



    /**
     * A contact detail (e.g. a telephone number or an email address) by which the party may be contacted.
     */
    var telecom: List<ContactPoint>? = null



    /**
     * Visiting or postal addresses for the contact.
     */
    var address: Address? = null




}

/**
 * Details of a Health Insurance product/plan provided by an organization.
 */
class InsurancePlanCost(
    val type: CodeableConcept): BackboneElement() {


    /**
     * Whether the cost applies to in-network or out-of-network providers (in-network; out-of-network; other).
     */
    var applicability: CodeableConcept? = null



    /**
     * Additional information about the cost, such as information about funding sources (e.g. HSA, HRA, FSA, RRA).
     */
    var qualifiers: List<CodeableConcept>? = null



    /**
     * The actual cost value. (some of the costs may be represented as percentages rather than currency, e.g. 10% coinsurance).
     */
    var value: Quantity? = null




}

/**
 * Details of a Health Insurance product/plan provided by an organization.
 */
class InsurancePlanCoverage(
    val type: CodeableConcept,
    val benefit: List<InsurancePlanBenefit>): BackboneElement() {


    /**
     * Reference to the network that providing the type of coverage.
     */
    var network: List<Reference>? = null

    @JsonIgnore
    var networkTarget: List<Resource>? = null


}

/**
 * Details of a Health Insurance product/plan provided by an organization.
 */
class InsurancePlanGeneralCost: BackboneElement()
{


    /**
     * Type of cost.
     */
    var type: CodeableConcept? = null



    /**
     * Number of participants enrolled in the plan.
     */
    var groupSize: PositiveIntType? = null



    /**
     * Value of the cost.
     */
    var cost: Money? = null



    /**
     * Additional information about the general costs associated with this plan.
     */
    var comment: StringType? = null




}

/**
 * Details of a Health Insurance product/plan provided by an organization.
 */
class InsurancePlanLimit: BackboneElement()
{


    /**
     * The maximum amount of a service item a plan will pay for a covered benefit.  For examples. wellness visits, or eyeglasses.
     */
    var value: Quantity? = null



    /**
     * The specific limit on the benefit.
     */
    var code: CodeableConcept? = null




}

/**
 * Details of a Health Insurance product/plan provided by an organization.
 */
class InsurancePlanPlan: BackboneElement()
{


    /**
     * Business identifiers assigned to this health insurance plan which remain constant as the resource is updated and propagates from server to server.
     */
    var identifier: List<Identifier>? = null



    /**
     * Type of plan. For example, "Platinum" or "High Deductable".
     */
    var type: CodeableConcept? = null



    /**
     * The geographic region in which a health insurance plan's benefits apply.
     */
    var coverageArea: List<Reference>? = null

    @JsonIgnore
    var coverageAreaTarget: List<Resource>? = null

    /**
     * Reference to the network that providing the type of coverage.
     */
    var network: List<Reference>? = null

    @JsonIgnore
    var networkTarget: List<Resource>? = null

    /**
     * Overall costs associated with the plan.
     */
    var generalCost: List<InsurancePlanGeneralCost>? = null



    /**
     * Costs associated with the coverage provided by the product.
     */
    var specificCost: List<InsurancePlanSpecificCost>? = null




}

/**
 * Details of a Health Insurance product/plan provided by an organization.
 */
class InsurancePlanSpecificCost(
    val category: CodeableConcept): BackboneElement() {


    /**
     * List of the specific benefits under this category of benefit.
     */
    var benefit: List<InsurancePlanBenefit1>? = null




}

/**
 * A whole number
 * 32 bit number; for values larger than this, use decimal
 * If the element is present, it must have either a @value, an @id, or extensions
 */
data class IntegerType(@JsonValue val value: Int) {
    companion object {
        @JvmStatic
        @JsonCreator
        fun create(value: Int) = IntegerType(value)
    }
}




/**
 * Invoice containing collected ChargeItems from an Account with calculated individual and total price for Billing purpose.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class Invoice(
    val status: InvoiceStatus): DomainResource() {


    /**
     * Identifier of this Invoice, often used for reference in correspondence about this invoice or for tracking of payments.
     */
    var identifier: List<Identifier>? = null



    /**
     * In case of Invoice cancellation a reason must be given (entered in error, superseded by corrected invoice etc.).
     */
    var cancelledReason: StringType? = null



    /**
     * Type of Invoice depending on domain, realm an usage (e.g. internal/external, dental, preliminary).
     */
    var type: CodeableConcept? = null



    /**
     * The individual or set of individuals receiving the goods and services billed in this invoice.
     */
    var subject: Reference? = null

    @JsonIgnore
    var subjectTarget: Resource? = null

    /**
     * The individual or Organization responsible for balancing of this invoice.
     */
    var recipient: Reference? = null

    @JsonIgnore
    var recipientTarget: Resource? = null

    /**
     * Date/time(s) of when this Invoice was posted.
     */
    var date: DateTimeType? = null



    /**
     * Indicates who or what performed or participated in the charged service.
     */
    var participant: List<InvoiceParticipant>? = null



    /**
     * The organizationissuing the Invoice.
     */
    var issuer: Reference? = null

    @JsonIgnore
    var issuerTarget: Resource? = null

    /**
     * Account which is supposed to be balanced with this Invoice.
     */
    var account: Reference? = null

    @JsonIgnore
    var accountTarget: Resource? = null

    /**
     * Each line item represents one charge for goods and services rendered. Details such as date, code and amount are found in the referenced ChargeItem resource.
     */
    var lineItem: List<InvoiceLineItem>? = null



    /**
     * The total amount for the Invoice may be calculated as the sum of the line items with surcharges/deductions that apply in certain conditions.  The priceComponent element can be used to offer transparency to the recipient of the Invoice of how the total price was calculated.
     */
    var totalPriceComponent: List<InvoicePriceComponent>? = null



    /**
     * Invoice total , taxes excluded.
     */
    var totalNet: Money? = null



    /**
     * Invoice total, tax included.
     */
    var totalGross: Money? = null



    /**
     * Payment details such as banking details, period of payment, deductibles, methods of payment.
     */
    var paymentTerms: MarkdownType? = null



    /**
     * Comments made about the invoice by the issuer, subject, or other participants.
     */
    var note: List<Annotation>? = null




}

/**
 * Invoice containing collected ChargeItems from an Account with calculated individual and total price for Billing purpose.
 */
class InvoiceLineItem: BackboneElement()
{


    /**
     * Sequence in which the items appear on the invoice.
     */
    var sequence: PositiveIntType? = null



    /**
     *
     */
    var chargeItemReference: Reference? = null

    @JsonIgnore
    var chargeItemReferenceTarget: Resource? = null

    /**
     *
     */
    var chargeItemCodeableConcept: CodeableConcept? = null



    /**
     * The price for a ChargeItem may be calculated as a base price with surcharges/deductions that apply in certain conditions. A ChargeItemDefinition resource that defines the prices, factors and conditions that apply to a billing code is currently under development. The priceComponent element can be used to offer transparency to the recipient of the Invoice as to how the prices have been calculated.
     */
    var priceComponent: List<InvoicePriceComponent>? = null




}

/**
 * Invoice containing collected ChargeItems from an Account with calculated individual and total price for Billing purpose.
 */
class InvoiceParticipant(
    val actor: Reference): BackboneElement() {


    /**
     * Describes the type of involvement (e.g. transcriptionist, creator etc.). If the invoice has been created automatically, the Participant may be a billing engine or another kind of device.
     */
    var role: CodeableConcept? = null




}

/**
 * Invoice containing collected ChargeItems from an Account with calculated individual and total price for Billing purpose.
 */
class InvoicePriceComponent(
    val type: InvoicePriceComponentType): BackboneElement() {


    /**
     * A code that identifies the component. Codes may be used to differentiate between kinds of taxes, surcharges, discounts etc.
     */
    var code: CodeableConcept? = null



    /**
     * The factor that has been applied on the base price for calculating this component.
     */
    var factor: DecimalType? = null



    /**
     * The amount calculated for this component.
     */
    var amount: Money? = null




}

/**
 * Codes indicating the kind of the price component.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class InvoicePriceComponentType(
    @JsonValue val text: String) {
    BASE("base"),
    SURCHARGE("surcharge"),
    DEDUCTION("deduction"),
    DISCOUNT("discount"),
    TAX("tax"),
    INFORMATIONAL("informational")
}




/**
 * Codes identifying the lifecycle stage of an Invoice.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class InvoiceStatus(
    @JsonValue val text: String) {
    DRAFT("draft"),
    ISSUED("issued"),
    BALANCED("balanced"),
    CANCELLED("cancelled"),
    ENTERED_IN_ERROR("entered-in-error")
}




/**
 * How the issue affects the success of the action.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class IssueSeverity(
    @JsonValue val text: String) {
    FATAL("fatal"),
    ERROR("error"),
    WARNING("warning"),
    INFORMATION("information")
}




/**
 * A code that describes the type of issue.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class IssueType(
    @JsonValue val text: String) {
    INVALID("invalid"),
    STRUCTURE("structure"),
    REQUIRED("required"),
    VALUE("value"),
    INVARIANT("invariant"),
    SECURITY("security"),
    LOGIN("login"),
    UNKNOWN("unknown"),
    EXPIRED("expired"),
    FORBIDDEN("forbidden"),
    SUPPRESSED("suppressed"),
    PROCESSING("processing"),
    NOT_SUPPORTED("not-supported"),
    DUPLICATE("duplicate"),
    MULTIPLE_MATCHES("multiple-matches"),
    NOT_FOUND("not-found"),
    DELETED("deleted"),
    TOO_LONG("too-long"),
    CODE_INVALID("code-invalid"),
    EXTENSION("extension"),
    TOO_COSTLY("too-costly"),
    BUSINESS_RULE("business-rule"),
    CONFLICT("conflict"),
    TRANSIENT("transient"),
    LOCK_ERROR("lock-error"),
    NO_STORE("no-store"),
    EXCEPTION("exception"),
    TIMEOUT("timeout"),
    INCOMPLETE("incomplete"),
    THROTTLED("throttled"),
    INFORMATIONAL("informational")
}




/**
 * The Library resource is a general-purpose container for knowledge asset definitions. It can be used to describe and expose existing knowledge assets such as logic libraries and information model descriptions, as well as to describe a collection of knowledge assets.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class Library(
    val status: PublicationStatus,
    val type: CodeableConcept): DomainResource() {


    /**
     * An absolute URI that is used to identify this library when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which at which an authoritative instance of this library is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the library is stored on different servers.
     */
    var url: UriType? = null



    /**
     * A formal identifier that is used to identify this library when it is represented in other formats, or referenced in a specification, model, design or an instance. e.g. CMS or NQF identifiers for a measure artifact. Note that at least one identifier is required for non-experimental active artifacts.
     */
    var identifier: List<Identifier>? = null



    /**
     * The identifier that is used to identify this version of the library when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the library author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence. To provide a version consistent with the Decision Support Service specification, use the format Major.Minor.Revision (e.g. 1.0.0). For more information on versioning knowledge assets, refer to the Decision Support Service specification. Note that a version is required for non-experimental active artifacts.
     */
    var version: StringType? = null



    /**
     * A natural language name identifying the library. This name should be usable as an identifier for the module by machine processing applications such as code generation.
     */
    var name: StringType? = null



    /**
     * A short, descriptive, user-friendly title for the library.
     */
    var title: StringType? = null



    /**
     * An explanatory or alternate title for the library giving additional information about its content.
     */
    var subtitle: StringType? = null



    /**
     * A Boolean value to indicate that this library is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
     */
    var experimental: BooleanType? = null



    /**
     *
     */
    var subjectCodeableConcept: CodeableConcept? = null



    /**
     *
     */
    var subjectReference: Reference? = null

    @JsonIgnore
    var subjectReferenceTarget: Resource? = null

    /**
     * The date  (and optionally time) when the library was published. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the library changes.
     */
    var date: DateTimeType? = null



    /**
     * The name of the organization or individual that published the library.
     */
    var publisher: StringType? = null



    /**
     * Contact details to assist a user in finding and communicating with the publisher.
     */
    var contact: List<ContactDetail>? = null



    /**
     * A free text natural language description of the library from a consumer's perspective.
     */
    var description: MarkdownType? = null



    /**
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate library instances.
     */
    var useContext: List<UsageContext>? = null



    /**
     * A legal or geographic region in which the library is intended to be used.
     */
    var jurisdiction: List<CodeableConcept>? = null



    /**
     * Explanation of why this library is needed and why it has been designed as it has.
     */
    var purpose: MarkdownType? = null



    /**
     * A detailed description of how the library is used from a clinical perspective.
     */
    var usage: StringType? = null



    /**
     * A copyright statement relating to the library and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the library.
     */
    var copyright: MarkdownType? = null



    /**
     * The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage.
     */
    var approvalDate: DateType? = null



    /**
     * The date on which the resource content was last reviewed. Review happens periodically after approval but does not change the original approval date.
     */
    var lastReviewDate: DateType? = null



    /**
     * The period during which the library content was or is planned to be in active use.
     */
    var effectivePeriod: Period? = null



    /**
     * Descriptive topics related to the content of the library. Topics provide a high-level categorization of the library that can be useful for filtering and searching.
     */
    var topic: List<CodeableConcept>? = null



    /**
     * An individiual or organization primarily involved in the creation and maintenance of the content.
     */
    var author: List<ContactDetail>? = null



    /**
     * An individual or organization primarily responsible for internal coherence of the content.
     */
    var editor: List<ContactDetail>? = null



    /**
     * An individual or organization primarily responsible for review of some aspect of the content.
     */
    var reviewer: List<ContactDetail>? = null



    /**
     * An individual or organization responsible for officially endorsing the content for use in some setting.
     */
    var endorser: List<ContactDetail>? = null



    /**
     * Related artifacts such as additional documentation, justification, or bibliographic references.
     */
    var relatedArtifact: List<RelatedArtifact>? = null



    /**
     * The parameter element defines parameters used by the library.
     */
    var parameter: List<ParameterDefinition>? = null



    /**
     * Describes a set of data that must be provided in order to be able to successfully perform the computations defined by the library.
     */
    var dataRequirement: List<DataRequirement>? = null



    /**
     * The content of the library as an Attachment. The content may be a reference to a url, or may be directly embedded as a base-64 string. Either way, the contentType of the attachment determines how to interpret the content.
     */
    var content: List<Attachment>? = null




}

/**
 * Identifies two or more records (resource instances) that refer to the same real-world "occurrence".
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class Linkage(
    val item: List<LinkageItem>): DomainResource() {


    /**
     * Indicates whether the asserted set of linkages are considered to be "in effect".
     */
    var active: BooleanType? = null



    /**
     * Identifies the user or organization responsible for asserting the linkages as well as the user or organization who establishes the context in which the nature of each linkage is evaluated.
     */
    var author: Reference? = null

    @JsonIgnore
    var authorTarget: Resource? = null


}

/**
 * Identifies two or more records (resource instances) that refer to the same real-world "occurrence".
 */
class LinkageItem(
    val type: LinkageType,
    val resource: Reference): BackboneElement()

/**
 * Used to distinguish different roles a resource can play within a set of linked resources.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class LinkageType(
    @JsonValue val text: String) {
    SOURCE("source"),
    ALTERNATE("alternate"),
    HISTORICAL("historical")
}




/**
 * The type of link between this patient resource and another patient resource.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class LinkType(
    @JsonValue val text: String) {
    REPLACED_BY("replaced-by"),
    REPLACES("replaces"),
    REFER("refer"),
    SEEALSO("seealso")
}




/**
 * A list is a curated collection of resources.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class List(
    val status: ListStatus,
    val mode: ListMode): DomainResource() {


    /**
     * Identifier for the List assigned for business purposes outside the context of FHIR.
     */
    var identifier: List<Identifier>? = null



    /**
     * A label for the list assigned by the author.
     */
    var title: StringType? = null



    /**
     * This code defines the purpose of the list - why it was created.
     */
    var code: CodeableConcept? = null



    /**
     * The common subject (or patient) of the resources that are in the list if there is one.
     */
    var subject: Reference? = null

    @JsonIgnore
    var subjectTarget: Resource? = null

    /**
     * The encounter that is the context in which this list was created.
     */
    var encounter: Reference? = null

    @JsonIgnore
    var encounterTarget: Resource? = null

    /**
     * The date that the list was prepared.
     */
    var date: DateTimeType? = null



    /**
     * The entity responsible for deciding what the contents of the list were. Where the list was created by a human, this is the same as the author of the list.
     */
    var source: Reference? = null

    @JsonIgnore
    var sourceTarget: Resource? = null

    /**
     * What order applies to the items in the list.
     */
    var orderedBy: CodeableConcept? = null



    /**
     * Comments that apply to the overall list.
     */
    var note: List<Annotation>? = null



    /**
     * Entries in this list.
     */
    var entry: List<ListEntry>? = null



    /**
     * If the list is empty, why the list is empty.
     */
    var emptyReason: CodeableConcept? = null




}

/**
 * A list is a curated collection of resources.
 */
class ListEntry(
    val item: Reference): BackboneElement() {


    /**
     * The flag allows the system constructing the list to indicate the role and significance of the item in the list.
     */
    var flag: CodeableConcept? = null



    /**
     * True if this item is marked as deleted in the list.
     */
    var deleted: BooleanType? = null



    /**
     * When this item was added to the list.
     */
    var date: DateTimeType? = null




}

/**
 * The processing mode that applies to this section.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class ListMode(
    @JsonValue val text: String) {
    WORKING("working"),
    SNAPSHOT("snapshot"),
    CHANGES("changes")
}




/**
 * The current state of the list.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class ListStatus(
    @JsonValue val text: String) {
    CURRENT("current"),
    RETIRED("retired"),
    ENTERED_IN_ERROR("entered-in-error")
}




/**
 * Details and position information for a physical place where services are provided and resources and participants may be stored, found, contained, or accommodated.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class Location: DomainResource()
{


    /**
     * Unique code or number identifying the location to its users.
     */
    var identifier: List<Identifier>? = null



    /**
     * The status property covers the general availability of the resource, not the current value which may be covered by the operationStatus, or by a schedule/slots if they are configured for the location.
     */
    var status: LocationStatus? = null



    /**
     * The operational status covers operation values most relevant to beds (but can also apply to rooms/units/chairs/etc. such as an isolation unit/dialysis chair). This typically covers concepts such as contamination, housekeeping, and other activities like maintenance.
     */
    var operationalStatus: Coding? = null



    /**
     * Name of the location as used by humans. Does not need to be unique.
     */
    var name: StringType? = null



    /**
     * A list of alternate names that the location is known as, or was known as, in the past.
     */
    var alias: List<StringType>? = null



    /**
     * Description of the Location, which helps in finding or referencing the place.
     */
    var description: StringType? = null



    /**
     * Indicates whether a resource instance represents a specific location or a class of locations.
     */
    var mode: LocationMode? = null



    /**
     * Indicates the type of function performed at the location.
     */
    var type: List<CodeableConcept>? = null



    /**
     * The contact details of communication devices available at the location. This can include phone numbers, fax numbers, mobile numbers, email addresses and web sites.
     */
    var telecom: List<ContactPoint>? = null



    /**
     * Physical location.
     */
    var address: Address? = null



    /**
     * Physical form of the location, e.g. building, room, vehicle, road.
     */
    var physicalType: CodeableConcept? = null



    /**
     * The absolute geographic location of the Location, expressed using the WGS84 datum (This is the same co-ordinate system used in KML).
     */
    var position: LocationPosition? = null



    /**
     * The organization responsible for the provisioning and upkeep of the location.
     */
    var managingOrganization: Reference? = null

    @JsonIgnore
    var managingOrganizationTarget: Resource? = null

    /**
     * Another Location of which this Location is physically a part of.
     */
    var partOf: Reference? = null

    @JsonIgnore
    var partOfTarget: Resource? = null

    /**
     * What days/times during a week is this location usually open.
     */
    var hoursOfOperation: List<LocationHoursOfOperation>? = null



    /**
     * A description of when the locations opening ours are different to normal, e.g. public holiday availability. Succinctly describing all possible exceptions to normal site availability as detailed in the opening hours Times.
     */
    var availabilityExceptions: StringType? = null



    /**
     * Technical endpoints providing access to services operated for the location.
     */
    var endpoint: List<Reference>? = null

    @JsonIgnore
    var endpointTarget: List<Resource>? = null


}

/**
 * Details and position information for a physical place where services are provided and resources and participants may be stored, found, contained, or accommodated.
 */
class LocationHoursOfOperation: BackboneElement()
{


    /**
     * Indicates which days of the week are available between the start and end Times.
     */
    var daysOfWeek: List<DaysOfWeek>? = null



    /**
     * The Location is open all day.
     */
    var allDay: BooleanType? = null



    /**
     * Time that the Location opens.
     */
    var openingTime: TimeType? = null



    /**
     * Time that the Location closes.
     */
    var closingTime: TimeType? = null




}

/**
 * Indicates whether a resource instance represents a specific location or a class of locations.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class LocationMode(
    @JsonValue val text: String) {
    INSTANCE("instance"),
    KIND("kind")
}




/**
 * Details and position information for a physical place where services are provided and resources and participants may be stored, found, contained, or accommodated.
 */
class LocationPosition(
    val longitude: DecimalType,
    val latitude: DecimalType): BackboneElement() {


    /**
     * Altitude. The value domain and the interpretation are the same as for the text of the altitude element in KML (see notes below).
     */
    var altitude: DecimalType? = null




}

/**
 * Indicates whether the location is still in use.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class LocationStatus(
    @JsonValue val text: String) {
    ACTIVE("active"),
    SUSPENDED("suspended"),
    INACTIVE("inactive")
}




/**
 * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
 * Systems are not required to have markdown support, so the text should be readable without markdown processing. The markdown syntax is GFM - see https://github.github.com/gfm/
 * If the element is present, it must have either a @value, an @id referenced from the Narrative, or extensions
 */
data class MarkdownType(@JsonValue val value: String) {
    companion object {
        @JvmStatic
        @JsonCreator
        fun create(value: String) = MarkdownType(value)
    }
}



/**
 * The marketing status describes the date when a medicinal product is actually put on the market or the date as of which it is no longer available.
 * If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions
 */
class MarketingStatus(
    val country: CodeableConcept,
    val status: CodeableConcept,
    val dateRange: Period): BackboneElement() {


    /**
     * Where a Medicines Regulatory Agency has granted a marketing authorisation for which specific provisions within a jurisdiction apply, the jurisdiction can be specified using an appropriate controlled terminology The controlled term and the controlled term identifier shall be specified.
     */
    var jurisdiction: CodeableConcept? = null



    /**
     * The date when the Medicinal Product is placed on the market by the Marketing Authorisation Holder (or where applicable, the manufacturer/distributor) in a country and/or jurisdiction shall be provided A complete date consisting of day, month and year shall be specified using the ISO 8601 date format NOTE “Placed on the market” refers to the release of the Medicinal Product into the distribution chain.
     */
    var restoreDate: DateTimeType? = null




}

/**
 * The Measure resource provides the definition of a quality measure.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class Measure(
    val status: PublicationStatus): DomainResource() {


    /**
     * An absolute URI that is used to identify this measure when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which at which an authoritative instance of this measure is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the measure is stored on different servers.
     */
    var url: UriType? = null



    /**
     * A formal identifier that is used to identify this measure when it is represented in other formats, or referenced in a specification, model, design or an instance.
     */
    var identifier: List<Identifier>? = null



    /**
     * The identifier that is used to identify this version of the measure when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the measure author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence. To provide a version consistent with the Decision Support Service specification, use the format Major.Minor.Revision (e.g. 1.0.0). For more information on versioning knowledge assets, refer to the Decision Support Service specification. Note that a version is required for non-experimental active artifacts.
     */
    var version: StringType? = null



    /**
     * A natural language name identifying the measure. This name should be usable as an identifier for the module by machine processing applications such as code generation.
     */
    var name: StringType? = null



    /**
     * A short, descriptive, user-friendly title for the measure.
     */
    var title: StringType? = null



    /**
     * An explanatory or alternate title for the measure giving additional information about its content.
     */
    var subtitle: StringType? = null



    /**
     * A Boolean value to indicate that this measure is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
     */
    var experimental: BooleanType? = null



    /**
     *
     */
    var subjectCodeableConcept: CodeableConcept? = null



    /**
     *
     */
    var subjectReference: Reference? = null

    @JsonIgnore
    var subjectReferenceTarget: Resource? = null

    /**
     * The date  (and optionally time) when the measure was published. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the measure changes.
     */
    var date: DateTimeType? = null



    /**
     * The name of the organization or individual that published the measure.
     */
    var publisher: StringType? = null



    /**
     * Contact details to assist a user in finding and communicating with the publisher.
     */
    var contact: List<ContactDetail>? = null



    /**
     * A free text natural language description of the measure from a consumer's perspective.
     */
    var description: MarkdownType? = null



    /**
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate measure instances.
     */
    var useContext: List<UsageContext>? = null



    /**
     * A legal or geographic region in which the measure is intended to be used.
     */
    var jurisdiction: List<CodeableConcept>? = null



    /**
     * Explanation of why this measure is needed and why it has been designed as it has.
     */
    var purpose: MarkdownType? = null



    /**
     * A detailed description, from a clinical perspective, of how the measure is used.
     */
    var usage: StringType? = null



    /**
     * A copyright statement relating to the measure and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the measure.
     */
    var copyright: MarkdownType? = null



    /**
     * The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage.
     */
    var approvalDate: DateType? = null



    /**
     * The date on which the resource content was last reviewed. Review happens periodically after approval but does not change the original approval date.
     */
    var lastReviewDate: DateType? = null



    /**
     * The period during which the measure content was or is planned to be in active use.
     */
    var effectivePeriod: Period? = null



    /**
     * Descriptive topics related to the content of the measure. Topics provide a high-level categorization grouping types of measures that can be useful for filtering and searching.
     */
    var topic: List<CodeableConcept>? = null



    /**
     * An individiual or organization primarily involved in the creation and maintenance of the content.
     */
    var author: List<ContactDetail>? = null



    /**
     * An individual or organization primarily responsible for internal coherence of the content.
     */
    var editor: List<ContactDetail>? = null



    /**
     * An individual or organization primarily responsible for review of some aspect of the content.
     */
    var reviewer: List<ContactDetail>? = null



    /**
     * An individual or organization responsible for officially endorsing the content for use in some setting.
     */
    var endorser: List<ContactDetail>? = null



    /**
     * Related artifacts such as additional documentation, justification, or bibliographic references.
     */
    var relatedArtifact: List<RelatedArtifact>? = null



    /**
     * A reference to a Library resource containing the formal logic used by the measure.
     */
    var library: List<CanonicalType>? = null



    /**
     * Notices and disclaimers regarding the use of the measure or related to intellectual property (such as code systems) referenced by the measure.
     */
    var disclaimer: MarkdownType? = null



    /**
     * Indicates how the calculation is performed for the measure, including proportion, ratio, continuous-variable, and cohort. The value set is extensible, allowing additional measure scoring types to be represented.
     */
    var scoring: CodeableConcept? = null



    /**
     * If this is a composite measure, the scoring method used to combine the component measures to determine the composite score.
     */
    var compositeScoring: CodeableConcept? = null



    /**
     * Indicates whether the measure is used to examine a process, an outcome over time, a patient-reported outcome, or a structure measure such as utilization.
     */
    var type: List<CodeableConcept>? = null



    /**
     * A description of the risk adjustment factors that may impact the resulting score for the measure and how they may be accounted for when computing and reporting measure results.
     */
    var riskAdjustment: StringType? = null



    /**
     * Describes how to combine the information calculated, based on logic in each of several populations, into one summarized result.
     */
    var rateAggregation: StringType? = null



    /**
     * Provides a succinct statement of the need for the measure. Usually includes statements pertaining to importance criterion: impact, gap in care, and evidence.
     */
    var rationale: MarkdownType? = null



    /**
     * Provides a summary of relevant clinical guidelines or other clinical recommendations supporting the measure.
     */
    var clinicalRecommendationStatement: MarkdownType? = null



    /**
     * Information on whether an increase or decrease in score is the preferred result (e.g., a higher score indicates better quality OR a lower score indicates better quality OR quality is within a range).
     */
    var improvementNotation: CodeableConcept? = null



    /**
     * Provides a description of an individual term used within the measure.
     */
    var definition: List<MarkdownType>? = null



    /**
     * Additional guidance for the measure including how it can be used in a clinical context, and the intent of the measure.
     */
    var guidance: MarkdownType? = null



    /**
     * A group of population criteria for the measure.
     */
    var group: List<MeasureGroup>? = null



    /**
     * The supplemental data criteria for the measure report, specified as either the name of a valid CQL expression within a referenced library, or a valid FHIR Resource Path.
     */
    var supplementalData: List<MeasureSupplementalData>? = null




}

/**
 * The Measure resource provides the definition of a quality measure.
 */
class MeasureComponent(
    val criteria: Expression): BackboneElement() {


    /**
     * Indicates a meaning for the stratifier component. This can be as simple as a unique identifier, or it can establish meaning in a broader context by drawing from a terminology, allowing stratifiers to be correlated across measures.
     */
    var code: CodeableConcept? = null



    /**
     * The human readable description of this stratifier criteria component.
     */
    var description: StringType? = null




}

/**
 * The Measure resource provides the definition of a quality measure.
 */
class MeasureGroup: BackboneElement()
{


    /**
     * Indicates a meaning for the group. This can be as simple as a unique identifier, or it can establish meaning in a broader context by drawing from a terminology, allowing groups to be correlated across measures.
     */
    var code: CodeableConcept? = null



    /**
     * The human readable description of this population group.
     */
    var description: StringType? = null



    /**
     * A population criteria for the measure.
     */
    var population: List<MeasurePopulation>? = null



    /**
     * The stratifier criteria for the measure report, specified as either the name of a valid CQL expression defined within a referenced library or a valid FHIR Resource Path.
     */
    var stratifier: List<MeasureStratifier>? = null




}

/**
 * The Measure resource provides the definition of a quality measure.
 */
class MeasurePopulation(
    val criteria: Expression): BackboneElement() {


    /**
     * The type of population criteria.
     */
    var code: CodeableConcept? = null



    /**
     * The human readable description of this population criteria.
     */
    var description: StringType? = null




}

/**
 * The MeasureReport resource contains the results of the calculation of a measure; and optionally a reference to the resources involved in that calculation.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class MeasureReport(
    val status: MeasureReportStatus,
    val type: MeasureReportType,
    val measure: CanonicalType,
    val period: Period): DomainResource() {


    /**
     * A formal identifier that is used to identify this MeasureReport when it is represented in other formats or referenced in a specification, model, design or an instance.
     */
    var identifier: List<Identifier>? = null



    /**
     * Optional subject identifying the individual or individuals the report is for.
     */
    var subject: Reference? = null

    @JsonIgnore
    var subjectTarget: Resource? = null

    /**
     * The date this measure report was generated.
     */
    var date: DateTimeType? = null



    /**
     * The individual, location, or organization that is reporting the data.
     */
    var reporter: Reference? = null

    @JsonIgnore
    var reporterTarget: Resource? = null

    /**
     * Whether improvement in the measure is noted by an increase or decrease in the measure score.
     */
    var improvementNotation: CodeableConcept? = null



    /**
     * The results of the calculation, one for each population group in the measure.
     */
    var group: List<MeasureReportGroup>? = null



    /**
     * A reference to a Bundle containing the Resources that were used in the calculation of this measure.
     */
    var evaluatedResource: List<Reference>? = null

    @JsonIgnore
    var evaluatedResourceTarget: List<Resource>? = null


}

/**
 * The MeasureReport resource contains the results of the calculation of a measure; and optionally a reference to the resources involved in that calculation.
 */
class MeasureReportComponent(
    val code: CodeableConcept,
    val value: CodeableConcept): BackboneElement()

/**
 * The MeasureReport resource contains the results of the calculation of a measure; and optionally a reference to the resources involved in that calculation.
 */
class MeasureReportGroup: BackboneElement()
{


    /**
     * The meaning of the population group as defined in the measure definition.
     */
    var code: CodeableConcept? = null



    /**
     * The populations that make up the population group, one for each type of population appropriate for the measure.
     */
    var population: List<MeasureReportPopulation>? = null



    /**
     * The measure score for this population group, calculated as appropriate for the measure type and scoring method, and based on the contents of the populations defined in the group.
     */
    var measureScore: Quantity? = null



    /**
     * When a measure includes multiple stratifiers, there will be a stratifier group for each stratifier defined by the measure.
     */
    var stratifier: List<MeasureReportStratifier>? = null




}

/**
 * The MeasureReport resource contains the results of the calculation of a measure; and optionally a reference to the resources involved in that calculation.
 */
class MeasureReportPopulation: BackboneElement()
{


    /**
     * The type of the population.
     */
    var code: CodeableConcept? = null



    /**
     * The number of members of the population.
     */
    var count: IntegerType? = null



    /**
     * This element refers to a List of subject level MeasureReport resources, one for each subject in this population.
     */
    var subjectResults: Reference? = null

    @JsonIgnore
    var subjectResultsTarget: Resource? = null


}

/**
 * The MeasureReport resource contains the results of the calculation of a measure; and optionally a reference to the resources involved in that calculation.
 */
class MeasureReportPopulation1: BackboneElement()
{


    /**
     * The type of the population.
     */
    var code: CodeableConcept? = null



    /**
     * The number of members of the population in this stratum.
     */
    var count: IntegerType? = null



    /**
     * This element refers to a List of subject level MeasureReport resources, one for each subject in this population in this stratum.
     */
    var subjectResults: Reference? = null

    @JsonIgnore
    var subjectResultsTarget: Resource? = null


}

/**
 * The status of the measure report.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class MeasureReportStatus(
    @JsonValue val text: String) {
    COMPLETE("complete"),
    PENDING("pending"),
    ERROR("error")
}




/**
 * The MeasureReport resource contains the results of the calculation of a measure; and optionally a reference to the resources involved in that calculation.
 */
class MeasureReportStratifier: BackboneElement()
{


    /**
     * The meaning of this stratifier, as defined in the measure definition.
     */
    var code: List<CodeableConcept>? = null



    /**
     * This element contains the results for a single stratum within the stratifier. For example, when stratifying on administrative gender, there will be four strata, one for each possible gender value.
     */
    var stratum: List<MeasureReportStratum>? = null




}

/**
 * The MeasureReport resource contains the results of the calculation of a measure; and optionally a reference to the resources involved in that calculation.
 */
class MeasureReportStratum: BackboneElement()
{


    /**
     * The value for this stratum, expressed as a CodeableConcept. When defining stratifiers on complex values, the value must be rendered such that the value for each stratum within the stratifier is unique.
     */
    var value: CodeableConcept? = null



    /**
     * A stratifier component value.
     */
    var component: List<MeasureReportComponent>? = null



    /**
     * The populations that make up the stratum, one for each type of population appropriate to the measure.
     */
    var population: List<MeasureReportPopulation1>? = null



    /**
     * The measure score for this stratum, calculated as appropriate for the measure type and scoring method, and based on only the members of this stratum.
     */
    var measureScore: Quantity? = null




}

/**
 * The type of the measure report.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class MeasureReportType(
    @JsonValue val text: String) {
    INDIVIDUAL("individual"),
    SUBJECT_LIST("subject-list"),
    SUMMARY("summary"),
    DATA_COLLECTION("data-collection")
}




/**
 * The Measure resource provides the definition of a quality measure.
 */
class MeasureStratifier: BackboneElement()
{


    /**
     * Indicates a meaning for the stratifier. This can be as simple as a unique identifier, or it can establish meaning in a broader context by drawing from a terminology, allowing stratifiers to be correlated across measures.
     */
    var code: CodeableConcept? = null



    /**
     * The human readable description of this stratifier criteria.
     */
    var description: StringType? = null



    /**
     * An expression that specifies the criteria for the stratifier. This is typically the name of an expression defined within a referenced library, but it may also be a path to a stratifier element.
     */
    var criteria: Expression? = null



    /**
     * A component of the stratifier criteria for the measure report, specified as either the name of a valid CQL expression defined within a referenced library or a valid FHIR Resource Path.
     */
    var component: List<MeasureComponent>? = null




}

/**
 * The Measure resource provides the definition of a quality measure.
 */
class MeasureSupplementalData(
    val criteria: Expression): BackboneElement() {


    /**
     * Indicates a meaning for the supplemental data. This can be as simple as a unique identifier, or it can establish meaning in a broader context by drawing from a terminology, allowing supplemental data to be correlated across measures.
     */
    var code: CodeableConcept? = null



    /**
     * An indicator of the intended usage for the supplemental data element. Supplemental data indicates the data is additional information requested to augment the measure information. Risk adjustment factor indicates the data is additional information used to calculate risk adjustment factors when applying a risk model to the measure calculation.
     */
    var usage: List<CodeableConcept>? = null



    /**
     * The human readable description of this supplemental data.
     */
    var description: StringType? = null




}

/**
 * A photo, video, or audio recording acquired or used in healthcare. The actual content may be inline or provided by direct reference.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class Media(
    val status: EventStatus,
    val content: Attachment): DomainResource() {


    /**
     * Identifiers associated with the image - these may include identifiers for the image itself, identifiers for the context of its collection (e.g. series ids) and context ids such as accession numbers or other workflow identifiers.
     */
    var identifier: List<Identifier>? = null



    /**
     * A procedure that is fulfilled in whole or in part by the creation of this media.
     */
    var basedOn: List<Reference>? = null

    @JsonIgnore
    var basedOnTarget: List<Resource>? = null

    /**
     * A larger event of which this particular event is a component or step.
     */
    var partOf: List<Reference>? = null

    @JsonIgnore
    var partOfTarget: List<Resource>? = null

    /**
     * A code that classifies whether the media is an image, video or audio recording or some other media category.
     */
    var type: CodeableConcept? = null



    /**
     * Details of the type of the media - usually, how it was acquired (what type of device). If images sourced from a DICOM system, are wrapped in a Media resource, then this is the modality.
     */
    var modality: CodeableConcept? = null



    /**
     * The name of the imaging view e.g. Lateral or Antero-posterior (AP).
     */
    var view: CodeableConcept? = null



    /**
     * Who/What this Media is a record of.
     */
    var subject: Reference? = null

    @JsonIgnore
    var subjectTarget: Resource? = null

    /**
     * The encounter that establishes the context for this media.
     */
    var encounter: Reference? = null

    @JsonIgnore
    var encounterTarget: Resource? = null

    /**
     *
     */
    var createdDateTime: DateTimeType? = null



    /**
     *
     */
    var createdPeriod: Period? = null



    /**
     * The date and time this version of the media was made available to providers, typically after having been reviewed.
     */
    var issued: InstantType? = null



    /**
     * The person who administered the collection of the image.
     */
    var operator: Reference? = null

    @JsonIgnore
    var operatorTarget: Resource? = null

    /**
     * Describes why the event occurred in coded or textual form.
     */
    var reasonCode: List<CodeableConcept>? = null



    /**
     * Indicates the site on the subject's body where the observation was made (i.e. the target site).
     */
    var bodySite: CodeableConcept? = null



    /**
     * The name of the device / manufacturer of the device  that was used to make the recording.
     */
    var deviceName: StringType? = null



    /**
     * The device used to collect the media.
     */
    var device: Reference? = null

    @JsonIgnore
    var deviceTarget: Resource? = null

    /**
     * Height of the image in pixels (photo/video).
     */
    var height: PositiveIntType? = null



    /**
     * Width of the image in pixels (photo/video).
     */
    var width: PositiveIntType? = null



    /**
     * The number of frames in a photo. This is used with a multi-page fax, or an imaging acquisition context that takes multiple slices in a single image, or an animated gif. If there is more than one frame, this SHALL have a value in order to alert interface software that a multi-frame capable rendering widget is required.
     */
    var frames: PositiveIntType? = null



    /**
     * The duration of the recording in seconds - for audio and video.
     */
    var duration: DecimalType? = null



    /**
     * Comments made about the media by the performer, subject or other participants.
     */
    var note: List<Annotation>? = null




}

/**
 * This resource is primarily used for the identification and definition of a medication for the purposes of prescribing, dispensing, and administering a medication as well as for making statements about medication use.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class Medication: DomainResource()
{


    /**
     * Business identifier for this medication.
     */
    var identifier: List<Identifier>? = null



    /**
     * A code (or set of codes) that specify this medication, or a textual description if no code is available. Usage note: This could be a standard medication code such as a code from RxNorm, SNOMED CT, IDMP etc. It could also be a national or local formulary code, optionally with translations to other code systems.
     */
    var code: CodeableConcept? = null



    /**
     * A code to indicate if the medication is in active use.
     */
    var status: MedicationStatusCodes? = null



    /**
     * Describes the details of the manufacturer of the medication product.  This is not intended to represent the distributor of a medication product.
     */
    var manufacturer: Reference? = null

    @JsonIgnore
    var manufacturerTarget: Resource? = null

    /**
     * Describes the form of the item.  Powder; tablets; capsule.
     */
    var form: CodeableConcept? = null



    /**
     * Specific amount of the drug in the packaged product.  For example, when specifying a product that has the same strength (For example, Insulin glargine 100 unit per mL solution for injection), this attribute provides additional clarification of the package amount (For example, 3 mL, 10mL, etc.).
     */
    var amount: Ratio? = null



    /**
     * Identifies a particular constituent of interest in the product.
     */
    var ingredient: List<MedicationIngredient>? = null



    /**
     * Information that only applies to packages (not products).
     */
    var batch: MedicationBatch? = null




}

/**
 * Describes the event of a patient consuming or otherwise being administered a medication.  This may be as simple as swallowing a tablet or it may be a long running infusion.  Related resources tie this event to the authorizing prescription, and the specific encounter between patient and health care practitioner.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class MedicationAdministration(
    val status: CodeType,
    val subject: Reference): DomainResource() {


    /**
     * Identifiers associated with this Medication Administration that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate. They are business identifiers assigned to this resource by the performer or other systems and remain constant as the resource is updated and propagates from server to server.
     */
    var identifier: List<Identifier>? = null



    /**
     * A protocol, guideline, orderset, or other definition that was adhered to in whole or in part by this event.
     */
    var instantiates: List<UriType>? = null



    /**
     * A larger event of which this particular event is a component or step.
     */
    var partOf: List<Reference>? = null

    @JsonIgnore
    var partOfTarget: List<Resource>? = null

    /**
     * A code indicating why the administration was not performed.
     */
    var statusReason: List<CodeableConcept>? = null



    /**
     * Indicates where the medication is expected to be consumed or administered.
     */
    var category: CodeableConcept? = null



    /**
     *
     */
    var medicationCodeableConcept: CodeableConcept? = null



    /**
     *
     */
    var medicationReference: Reference? = null

    @JsonIgnore
    var medicationReferenceTarget: Resource? = null

    /**
     * The visit, admission, or other contact between patient and health care provider during which the medication administration was performed.
     */
    var context: Reference? = null

    @JsonIgnore
    var contextTarget: Resource? = null

    /**
     * Additional information (for example, patient height and weight) that supports the administration of the medication.
     */
    var supportingInformation: List<Reference>? = null

    @JsonIgnore
    var supportingInformationTarget: List<Resource>? = null

    /**
     *
     */
    var effectiveDateTime: DateTimeType? = null



    /**
     *
     */
    var effectivePeriod: Period? = null



    /**
     * Indicates who or what performed the medication administration and how they were involved.
     */
    var performer: List<MedicationAdministrationPerformer>? = null



    /**
     * A code indicating why the medication was given.
     */
    var reasonCode: List<CodeableConcept>? = null



    /**
     * Condition or observation that supports why the medication was administered.
     */
    var reasonReference: List<Reference>? = null

    @JsonIgnore
    var reasonReferenceTarget: List<Resource>? = null

    /**
     * The original request, instruction or authority to perform the administration.
     */
    var request: Reference? = null

    @JsonIgnore
    var requestTarget: Resource? = null

    /**
     * The device used in administering the medication to the patient.  For example, a particular infusion pump.
     */
    var device: List<Reference>? = null

    @JsonIgnore
    var deviceTarget: List<Resource>? = null

    /**
     * Extra information about the medication administration that is not conveyed by the other attributes.
     */
    var note: List<Annotation>? = null



    /**
     * Describes the medication dosage information details e.g. dose, rate, site, route, etc.
     */
    var dosage: MedicationAdministrationDosage? = null



    /**
     * A summary of the events of interest that have occurred, such as when the administration was verified.
     */
    var eventHistory: List<Reference>? = null

    @JsonIgnore
    var eventHistoryTarget: List<Resource>? = null


}

/**
 * Describes the event of a patient consuming or otherwise being administered a medication.  This may be as simple as swallowing a tablet or it may be a long running infusion.  Related resources tie this event to the authorizing prescription, and the specific encounter between patient and health care practitioner.
 */
class MedicationAdministrationDosage: BackboneElement()
{


    /**
     * Free text dosage can be used for cases where the dosage administered is too complex to code. When coded dosage is present, the free text dosage may still be present for display to humans.
     *
     * The dosage instructions should reflect the dosage of the medication that was administered.
     */
    var text: StringType? = null



    /**
     * A coded specification of the anatomic site where the medication first entered the body.  For example, "left arm".
     */
    var site: CodeableConcept? = null



    /**
     * A code specifying the route or physiological path of administration of a therapeutic agent into or onto the patient.  For example, topical, intravenous, etc.
     */
    var route: CodeableConcept? = null



    /**
     * A coded value indicating the method by which the medication is intended to be or was introduced into or on the body.  This attribute will most often NOT be populated.  It is most commonly used for injections.  For example, Slow Push, Deep IV.
     */
    var method: CodeableConcept? = null



    /**
     * The amount of the medication given at one administration event.   Use this value when the administration is essentially an instantaneous event such as a swallowing a tablet or giving an injection.
     */
    var dose: Quantity? = null



    /**
     *
     */
    var rateRatio: Ratio? = null



    /**
     *
     */
    var rateQuantity: Quantity? = null




}

/**
 * Describes the event of a patient consuming or otherwise being administered a medication.  This may be as simple as swallowing a tablet or it may be a long running infusion.  Related resources tie this event to the authorizing prescription, and the specific encounter between patient and health care practitioner.
 */
class MedicationAdministrationPerformer(
    val actor: Reference): BackboneElement() {


    /**
     * Distinguishes the type of involvement of the performer in the medication administration.
     */
    var function: CodeableConcept? = null




}

/**
 * This resource is primarily used for the identification and definition of a medication for the purposes of prescribing, dispensing, and administering a medication as well as for making statements about medication use.
 */
class MedicationBatch: BackboneElement()
{


    /**
     * The assigned lot number of a batch of the specified product.
     */
    var lotNumber: StringType? = null



    /**
     * When this specific batch of product will expire.
     */
    var expirationDate: DateTimeType? = null




}

/**
 * Indicates that a medication product is to be or has been dispensed for a named person/patient.  This includes a description of the medication product (supply) provided and the instructions for administering the medication.  The medication dispense is the result of a pharmacy system responding to a medication order.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class MedicationDispense(
    val status: CodeType): DomainResource() {


    /**
     * Identifiers associated with this Medication Dispense that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate. They are business identifiers assigned to this resource by the performer or other systems and remain constant as the resource is updated and propagates from server to server.
     */
    var identifier: List<Identifier>? = null



    /**
     * The procedure that trigger the dispense.
     */
    var partOf: List<Reference>? = null

    @JsonIgnore
    var partOfTarget: List<Resource>? = null

    /**
     *
     */
    var statusReasonCodeableConcept: CodeableConcept? = null



    /**
     *
     */
    var statusReasonReference: Reference? = null

    @JsonIgnore
    var statusReasonReferenceTarget: Resource? = null

    /**
     * Indicates the type of medication dispense (for example, where the medication is expected to be consumed or administered (i.e. inpatient or outpatient)).
     */
    var category: CodeableConcept? = null



    /**
     *
     */
    var medicationCodeableConcept: CodeableConcept? = null



    /**
     *
     */
    var medicationReference: Reference? = null

    @JsonIgnore
    var medicationReferenceTarget: Resource? = null

    /**
     * A link to a resource representing the person or the group to whom the medication will be given.
     */
    var subject: Reference? = null

    @JsonIgnore
    var subjectTarget: Resource? = null

    /**
     * The encounter or episode of care that establishes the context for this event.
     */
    var context: Reference? = null

    @JsonIgnore
    var contextTarget: Resource? = null

    /**
     * Additional information that supports the medication being dispensed.
     */
    var supportingInformation: List<Reference>? = null

    @JsonIgnore
    var supportingInformationTarget: List<Resource>? = null

    /**
     * Indicates who or what performed the event.
     */
    var performer: List<MedicationDispensePerformer>? = null



    /**
     * The principal physical location where the dispense was performed.
     */
    var location: Reference? = null

    @JsonIgnore
    var locationTarget: Resource? = null

    /**
     * Indicates the medication order that is being dispensed against.
     */
    var authorizingPrescription: List<Reference>? = null

    @JsonIgnore
    var authorizingPrescriptionTarget: List<Resource>? = null

    /**
     * Indicates the type of dispensing event that is performed. For example, Trial Fill, Completion of Trial, Partial Fill, Emergency Fill, Samples, etc.
     */
    var type: CodeableConcept? = null



    /**
     * The amount of medication that has been dispensed. Includes unit of measure.
     */
    var quantity: Quantity? = null



    /**
     * The amount of medication expressed as a timing amount.
     */
    var daysSupply: Quantity? = null



    /**
     * The time when the dispensed product was packaged and reviewed.
     */
    var whenPrepared: DateTimeType? = null



    /**
     * The time the dispensed product was provided to the patient or their representative.
     */
    var whenHandedOver: DateTimeType? = null



    /**
     * Identification of the facility/location where the medication was shipped to, as part of the dispense event.
     */
    var destination: Reference? = null

    @JsonIgnore
    var destinationTarget: Resource? = null

    /**
     * Identifies the person who picked up the medication.  This will usually be a patient or their caregiver, but some cases exist where it can be a healthcare professional.
     */
    var receiver: List<Reference>? = null

    @JsonIgnore
    var receiverTarget: List<Resource>? = null

    /**
     * Extra information about the dispense that could not be conveyed in the other attributes.
     */
    var note: List<Annotation>? = null



    /**
     * Indicates how the medication is to be used by the patient.
     */
    var dosageInstruction: List<Dosage>? = null



    /**
     * Indicates whether or not substitution was made as part of the dispense.  In some cases, substitution will be expected but does not happen, in other cases substitution is not expected but does happen.  This block explains what substitution did or did not happen and why.  If nothing is specified, substitution was not done.
     */
    var substitution: MedicationDispenseSubstitution? = null



    /**
     * Indicates an actual or potential clinical issue with or between one or more active or proposed clinical actions for a patient; e.g. drug-drug interaction, duplicate therapy, dosage alert etc.
     */
    var detectedIssue: List<Reference>? = null

    @JsonIgnore
    var detectedIssueTarget: List<Resource>? = null

    /**
     * A summary of the events of interest that have occurred, such as when the dispense was verified.
     */
    var eventHistory: List<Reference>? = null

    @JsonIgnore
    var eventHistoryTarget: List<Resource>? = null


}

/**
 * Indicates that a medication product is to be or has been dispensed for a named person/patient.  This includes a description of the medication product (supply) provided and the instructions for administering the medication.  The medication dispense is the result of a pharmacy system responding to a medication order.
 */
class MedicationDispensePerformer(
    val actor: Reference): BackboneElement() {


    /**
     * Distinguishes the type of performer in the dispense.  For example, date enterer, packager, final checker.
     */
    var function: CodeableConcept? = null




}

/**
 * Indicates that a medication product is to be or has been dispensed for a named person/patient.  This includes a description of the medication product (supply) provided and the instructions for administering the medication.  The medication dispense is the result of a pharmacy system responding to a medication order.
 */
class MedicationDispenseSubstitution(
    val wasSubstituted: BooleanType): BackboneElement() {


    /**
     * A code signifying whether a different drug was dispensed from what was prescribed.
     */
    var type: CodeableConcept? = null



    /**
     * Indicates the reason for the substitution (or lack of substitution) from what was prescribed.
     */
    var reason: List<CodeableConcept>? = null



    /**
     * The person or organization that has primary responsibility for the substitution.
     */
    var responsibleParty: List<Reference>? = null

    @JsonIgnore
    var responsiblePartyTarget: List<Resource>? = null


}

/**
 * This resource is primarily used for the identification and definition of a medication for the purposes of prescribing, dispensing, and administering a medication as well as for making statements about medication use.
 */
class MedicationIngredient: BackboneElement()
{


    /**
     *
     */
    var itemCodeableConcept: CodeableConcept? = null



    /**
     *
     */
    var itemReference: Reference? = null

    @JsonIgnore
    var itemReferenceTarget: Resource? = null

    /**
     * Indication of whether this ingredient affects the therapeutic action of the drug.
     */
    var isActive: BooleanType? = null



    /**
     * Specifies how many (or how much) of the items there are in this Medication.  For example, 250 mg per tablet.  This is expressed as a ratio where the numerator is 250mg and the denominator is 1 tablet.
     */
    var strength: Ratio? = null




}

/**
 * Information about a medication that is used to support knowledge.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class MedicationKnowledge: DomainResource()
{


    /**
     * A code that specifies this medication, or a textual description if no code is available. Usage note: This could be a standard medication code such as a code from RxNorm, SNOMED CT, IDMP etc. It could also be a national or local formulary code, optionally with translations to other code systems.
     */
    var code: CodeableConcept? = null



    /**
     * A code to indicate if the medication is in active use.  The status refers to the validity about the information of the medication and not to its medicinal properties.
     */
    var status: CodeType? = null



    /**
     * Describes the details of the manufacturer of the medication product.  This is not intended to represent the distributor of a medication product.
     */
    var manufacturer: Reference? = null

    @JsonIgnore
    var manufacturerTarget: Resource? = null

    /**
     * Describes the form of the item.  Powder; tablets; capsule.
     */
    var doseForm: CodeableConcept? = null



    /**
     * Specific amount of the drug in the packaged product.  For example, when specifying a product that has the same strength (For example, Insulin glargine 100 unit per mL solution for injection), this attribute provides additional clarification of the package amount (For example, 3 mL, 10mL, etc.).
     */
    var amount: Quantity? = null



    /**
     * Additional names for a medication, for example, the name(s) given to a medication in different countries.  For example, acetaminophen and paracetamol or salbutamol and albuterol.
     */
    var synonym: List<StringType>? = null



    /**
     * Associated or related knowledge about a medication.
     */
    var relatedMedicationKnowledge: List<MedicationKnowledgeRelatedMedicationKnowledge>? = null



    /**
     * Associated or related medications.  For example, if the medication is a branded product (e.g. Crestor), this is the Therapeutic Moeity (e.g. Rosuvastatin) or if this is a generic medication (e.g. Rosuvastatin), this would link to a branded product (e.g. Crestor).
     */
    var associatedMedication: List<Reference>? = null

    @JsonIgnore
    var associatedMedicationTarget: List<Resource>? = null

    /**
     * Category of the medication or product (e.g. branded product, therapeutic moeity, generic product, innovator product, etc.).
     */
    var productType: List<CodeableConcept>? = null



    /**
     * Associated documentation about the medication.
     */
    var monograph: List<MedicationKnowledgeMonograph>? = null



    /**
     * Identifies a particular constituent of interest in the product.
     */
    var ingredient: List<MedicationKnowledgeIngredient>? = null



    /**
     * The instructions for preparing the medication.
     */
    var preparationInstruction: MarkdownType? = null



    /**
     * The intended or approved route of administration.
     */
    var intendedRoute: List<CodeableConcept>? = null



    /**
     * The price of the medication.
     */
    var cost: List<MedicationKnowledgeCost>? = null



    /**
     * The program under which the medication is reviewed.
     */
    var monitoringProgram: List<MedicationKnowledgeMonitoringProgram>? = null



    /**
     * Guidelines for the administration of the medication.
     */
    var administrationGuidelines: List<MedicationKnowledgeAdministrationGuidelines>? = null



    /**
     * Categorization of the medication within a formulary or classification system.
     */
    var medicineClassification: List<MedicationKnowledgeMedicineClassification>? = null



    /**
     * Information that only applies to packages (not products).
     */
    var packaging: MedicationKnowledgePackaging? = null



    /**
     * Specifies descriptive properties of the medicine, such as color, shape, imprints, etc.
     */
    var drugCharacteristic: List<MedicationKnowledgeDrugCharacteristic>? = null



    /**
     * Potential clinical issue with or between medication(s) (for example, drug-drug interaction, drug-disease contraindication, drug-allergy interaction, etc.).
     */
    var contraindication: List<Reference>? = null

    @JsonIgnore
    var contraindicationTarget: List<Resource>? = null

    /**
     * Regulatory information about a medication.
     */
    var regulatory: List<MedicationKnowledgeRegulatory>? = null



    /**
     * The time course of drug absorption, distribution, metabolism and excretion of a medication from the body.
     */
    var kinetics: List<MedicationKnowledgeKinetics>? = null




}

/**
 * Information about a medication that is used to support knowledge.
 */
class MedicationKnowledgeAdministrationGuidelines: BackboneElement()
{


    /**
     * Dosage for the medication for the specific guidelines.
     */
    var dosage: List<MedicationKnowledgeDosage>? = null



    /**
     *
     */
    var indicationCodeableConcept: CodeableConcept? = null



    /**
     *
     */
    var indicationReference: Reference? = null

    @JsonIgnore
    var indicationReferenceTarget: Resource? = null

    /**
     * Characteristics of the patient that are relevant to the administration guidelines (for example, height, weight, gender, etc.).
     */
    var patientCharacteristics: List<MedicationKnowledgePatientCharacteristics>? = null




}

/**
 * Information about a medication that is used to support knowledge.
 */
class MedicationKnowledgeCost(
    val type: CodeableConcept,
    val cost: Money): BackboneElement() {


    /**
     * The source or owner that assigns the price to the medication.
     */
    var source: StringType? = null




}

/**
 * Information about a medication that is used to support knowledge.
 */
class MedicationKnowledgeDosage(
    val type: CodeableConcept,
    val dosage: List<Dosage>): BackboneElement()

/**
 * Information about a medication that is used to support knowledge.
 */
class MedicationKnowledgeDrugCharacteristic: BackboneElement()
{


    /**
     * A code specifying which characteristic of the medicine is being described (for example, colour, shape, imprint).
     */
    var type: CodeableConcept? = null



    /**
     *
     */
    var valueCodeableConcept: CodeableConcept? = null



    /**
     *
     */
    var valueString: StringType? = null



    /**
     *
     */
    var valueQuantity: Quantity? = null



    /**
     *
     */
    var valueBase64Binary: Base64BinaryType? = null




}

/**
 * Information about a medication that is used to support knowledge.
 */
class MedicationKnowledgeIngredient: BackboneElement()
{


    /**
     *
     */
    var itemCodeableConcept: CodeableConcept? = null



    /**
     *
     */
    var itemReference: Reference? = null

    @JsonIgnore
    var itemReferenceTarget: Resource? = null

    /**
     * Indication of whether this ingredient affects the therapeutic action of the drug.
     */
    var isActive: BooleanType? = null



    /**
     * Specifies how many (or how much) of the items there are in this Medication.  For example, 250 mg per tablet.  This is expressed as a ratio where the numerator is 250mg and the denominator is 1 tablet.
     */
    var strength: Ratio? = null




}

/**
 * Information about a medication that is used to support knowledge.
 */
class MedicationKnowledgeKinetics: BackboneElement()
{


    /**
     * The drug concentration measured at certain discrete points in time.
     */
    var areaUnderCurve: List<Quantity>? = null



    /**
     * The median lethal dose of a drug.
     */
    var lethalDose50: List<Quantity>? = null



    /**
     * The time required for any specified property (e.g., the concentration of a substance in the body) to decrease by half.
     */
    var halfLifePeriod: Duration? = null




}

/**
 * Information about a medication that is used to support knowledge.
 */
class MedicationKnowledgeMaxDispense(
    val quantity: Quantity): BackboneElement() {


    /**
     * The period that applies to the maximum number of units.
     */
    var period: Duration? = null




}

/**
 * Information about a medication that is used to support knowledge.
 */
class MedicationKnowledgeMedicineClassification(
    val type: CodeableConcept): BackboneElement() {


    /**
     * Specific category assigned to the medication (e.g. anti-infective, anti-hypertensive, antibiotic, etc.).
     */
    var classification: List<CodeableConcept>? = null




}

/**
 * Information about a medication that is used to support knowledge.
 */
class MedicationKnowledgeMonitoringProgram: BackboneElement()
{


    /**
     * Type of program under which the medication is monitored.
     */
    var type: CodeableConcept? = null



    /**
     * Name of the reviewing program.
     */
    var name: StringType? = null




}

/**
 * Information about a medication that is used to support knowledge.
 */
class MedicationKnowledgeMonograph: BackboneElement()
{


    /**
     * The category of documentation about the medication. (e.g. professional monograph, patient education monograph).
     */
    var type: CodeableConcept? = null



    /**
     * Associated documentation about the medication.
     */
    var source: Reference? = null

    @JsonIgnore
    var sourceTarget: Resource? = null


}

/**
 * Information about a medication that is used to support knowledge.
 */
class MedicationKnowledgePackaging: BackboneElement()
{


    /**
     * A code that defines the specific type of packaging that the medication can be found in (e.g. blister sleeve, tube, bottle).
     */
    var type: CodeableConcept? = null



    /**
     * The number of product units the package would contain if fully loaded.
     */
    var quantity: Quantity? = null




}

/**
 * Information about a medication that is used to support knowledge.
 */
class MedicationKnowledgePatientCharacteristics: BackboneElement()
{


    /**
     *
     */
    var characteristicCodeableConcept: CodeableConcept? = null



    /**
     *
     */
    var characteristicQuantity: Quantity? = null



    /**
     * The specific characteristic (e.g. height, weight, gender, etc.).
     */
    var value: List<StringType>? = null




}

/**
 * Information about a medication that is used to support knowledge.
 */
class MedicationKnowledgeRegulatory(
    val regulatoryAuthority: Reference): BackboneElement() {


    /**
     * Specifies if changes are allowed when dispensing a medication from a regulatory perspective.
     */
    var substitution: List<MedicationKnowledgeSubstitution>? = null



    /**
     * Specifies the schedule of a medication in jurisdiction.
     */
    var schedule: List<MedicationKnowledgeSchedule>? = null



    /**
     * The maximum number of units of the medication that can be dispensed in a period.
     */
    var maxDispense: MedicationKnowledgeMaxDispense? = null




}

/**
 * Information about a medication that is used to support knowledge.
 */
class MedicationKnowledgeRelatedMedicationKnowledge(
    val type: CodeableConcept,
    val reference: List<Reference>): BackboneElement()

/**
 * Information about a medication that is used to support knowledge.
 */
class MedicationKnowledgeSchedule(
    val schedule: CodeableConcept): BackboneElement()

/**
 * Information about a medication that is used to support knowledge.
 */
class MedicationKnowledgeSubstitution(
    val type: CodeableConcept,
    val allowed: BooleanType): BackboneElement()

/**
 * An order or request for both supply of the medication and the instructions for administration of the medication to a patient. The resource is called "MedicationRequest" rather than "MedicationPrescription" or "MedicationOrder" to generalize the use across inpatient and outpatient settings, including care plans, etc., and to harmonize with workflow patterns.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class MedicationRequest(
    val status: MedicationRequestStatus,
    val intent: MedicationRequestIntent,
    val subject: Reference): DomainResource() {


    /**
     * Identifiers associated with this medication request that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate. They are business identifiers assigned to this resource by the performer or other systems and remain constant as the resource is updated and propagates from server to server.
     */
    var identifier: List<Identifier>? = null



    /**
     * Captures the reason for the current state of the MedicationRequest.
     */
    var statusReason: CodeableConcept? = null



    /**
     * Indicates the type of medication request (for example, where the medication is expected to be consumed or administered (i.e. inpatient or outpatient)).
     */
    var category: List<CodeableConcept>? = null



    /**
     * Indicates how quickly the Medication Request should be addressed with respect to other requests.
     */
    var priority: RequestPriority? = null



    /**
     * If true indicates that the provider is asking for the medication request not to occur.
     */
    var doNotPerform: BooleanType? = null



    /**
     *
     */
    var reportedBoolean: BooleanType? = null



    /**
     *
     */
    var reportedReference: Reference? = null

    @JsonIgnore
    var reportedReferenceTarget: Resource? = null

    /**
     *
     */
    var medicationCodeableConcept: CodeableConcept? = null



    /**
     *
     */
    var medicationReference: Reference? = null

    @JsonIgnore
    var medicationReferenceTarget: Resource? = null

    /**
     * The Encounter during which this [x] was created or to which the creation of this record is tightly associated.
     */
    var encounter: Reference? = null

    @JsonIgnore
    var encounterTarget: Resource? = null

    /**
     * Include additional information (for example, patient height and weight) that supports the ordering of the medication.
     */
    var supportingInformation: List<Reference>? = null

    @JsonIgnore
    var supportingInformationTarget: List<Resource>? = null

    /**
     * The date (and perhaps time) when the prescription was initially written or authored on.
     */
    var authoredOn: DateTimeType? = null



    /**
     * The individual, organization, or device that initiated the request and has responsibility for its activation.
     */
    var requester: Reference? = null

    @JsonIgnore
    var requesterTarget: Resource? = null

    /**
     * The specified desired performer of the medication treatment (e.g. the performer of the medication administration).
     */
    var performer: Reference? = null

    @JsonIgnore
    var performerTarget: Resource? = null

    /**
     * Indicates the type of performer of the administration of the medication.
     */
    var performerType: CodeableConcept? = null



    /**
     * The person who entered the order on behalf of another individual for example in the case of a verbal or a telephone order.
     */
    var recorder: Reference? = null

    @JsonIgnore
    var recorderTarget: Resource? = null

    /**
     * The reason or the indication for ordering or not ordering the medication.
     */
    var reasonCode: List<CodeableConcept>? = null



    /**
     * Condition or observation that supports why the medication was ordered.
     */
    var reasonReference: List<Reference>? = null

    @JsonIgnore
    var reasonReferenceTarget: List<Resource>? = null

    /**
     * The URL pointing to a protocol, guideline, orderset, or other definition that is adhered to in whole or in part by this MedicationRequest.
     */
    var instantiatesCanonical: List<CanonicalType>? = null



    /**
     * The URL pointing to an externally maintained protocol, guideline, orderset or other definition that is adhered to in whole or in part by this MedicationRequest.
     */
    var instantiatesUri: List<UriType>? = null



    /**
     * A plan or request that is fulfilled in whole or in part by this medication request.
     */
    var basedOn: List<Reference>? = null

    @JsonIgnore
    var basedOnTarget: List<Resource>? = null

    /**
     * A shared identifier common to all requests that were authorized more or less simultaneously by a single author, representing the identifier of the requisition or prescription.
     */
    var groupIdentifier: Identifier? = null



    /**
     * The description of the overall patte3rn of the administration of the medication to the patient.
     */
    var courseOfTherapyType: CodeableConcept? = null



    /**
     * Insurance plans, coverage extensions, pre-authorizations and/or pre-determinations that may be required for delivering the requested service.
     */
    var insurance: List<Reference>? = null

    @JsonIgnore
    var insuranceTarget: List<Resource>? = null

    /**
     * Extra information about the prescription that could not be conveyed by the other attributes.
     */
    var note: List<Annotation>? = null



    /**
     * Indicates how the medication is to be used by the patient.
     */
    var dosageInstruction: List<Dosage>? = null



    /**
     * Indicates the specific details for the dispense or medication supply part of a medication request (also known as a Medication Prescription or Medication Order).  Note that this information is not always sent with the order.  There may be in some settings (e.g. hospitals) institutional or system support for completing the dispense details in the pharmacy department.
     */
    var dispenseRequest: MedicationRequestDispenseRequest? = null



    /**
     * Indicates whether or not substitution can or should be part of the dispense. In some cases, substitution must happen, in other cases substitution must not happen. This block explains the prescriber's intent. If nothing is specified substitution may be done.
     */
    var substitution: MedicationRequestSubstitution? = null



    /**
     * A link to a resource representing an earlier order related order or prescription.
     */
    var priorPrescription: Reference? = null

    @JsonIgnore
    var priorPrescriptionTarget: Resource? = null

    /**
     * Indicates an actual or potential clinical issue with or between one or more active or proposed clinical actions for a patient; e.g. Drug-drug interaction, duplicate therapy, dosage alert etc.
     */
    var detectedIssue: List<Reference>? = null

    @JsonIgnore
    var detectedIssueTarget: List<Resource>? = null

    /**
     * Links to Provenance records for past versions of this resource or fulfilling request or event resources that identify key state transitions or updates that are likely to be relevant to a user looking at the current version of the resource.
     */
    var eventHistory: List<Reference>? = null

    @JsonIgnore
    var eventHistoryTarget: List<Resource>? = null


}

/**
 * An order or request for both supply of the medication and the instructions for administration of the medication to a patient. The resource is called "MedicationRequest" rather than "MedicationPrescription" or "MedicationOrder" to generalize the use across inpatient and outpatient settings, including care plans, etc., and to harmonize with workflow patterns.
 */
class MedicationRequestDispenseRequest: BackboneElement()
{


    /**
     * Indicates the quantity or duration for the first dispense of the medication.
     */
    var initialFill: MedicationRequestInitialFill? = null



    /**
     * The minimum period of time that must occur between dispenses of the medication.
     */
    var dispenseInterval: Duration? = null



    /**
     * This indicates the validity period of a prescription (stale dating the Prescription).
     */
    var validityPeriod: Period? = null



    /**
     * An integer indicating the number of times, in addition to the original dispense, (aka refills or repeats) that the patient can receive the prescribed medication. Usage Notes: This integer does not include the original order dispense. This means that if an order indicates dispense 30 tablets plus "3 repeats", then the order can be dispensed a total of 4 times and the patient can receive a total of 120 tablets.  A prescriber may explicitly say that zero refills are permitted after the initial dispense.
     */
    var numberOfRepeatsAllowed: UnsignedIntType? = null



    /**
     * The amount that is to be dispensed for one fill.
     */
    var quantity: Quantity? = null



    /**
     * Identifies the period time over which the supplied product is expected to be used, or the length of time the dispense is expected to last.
     */
    var expectedSupplyDuration: Duration? = null



    /**
     * Indicates the intended dispensing Organization specified by the prescriber.
     */
    var performer: Reference? = null

    @JsonIgnore
    var performerTarget: Resource? = null


}

/**
 * An order or request for both supply of the medication and the instructions for administration of the medication to a patient. The resource is called "MedicationRequest" rather than "MedicationPrescription" or "MedicationOrder" to generalize the use across inpatient and outpatient settings, including care plans, etc., and to harmonize with workflow patterns.
 */
class MedicationRequestInitialFill: BackboneElement()
{


    /**
     * The amount or quantity to provide as part of the first dispense.
     */
    var quantity: Quantity? = null



    /**
     * The length of time that the first dispense is expected to last.
     */
    var duration: Duration? = null




}

/**
 * The kind of medication order.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class MedicationRequestIntent(
    @JsonValue val text: String) {
    PROPOSAL("proposal"),
    PLAN("plan"),
    ORDER("order"),
    ORIGINAL_ORDER("original-order"),
    REFLEX_ORDER("reflex-order"),
    FILLER_ORDER("filler-order"),
    INSTANCE_ORDER("instance-order"),
    OPTION("option")
}




/**
 * A coded concept specifying the state of the prescribing event. Describes the lifecycle of the prescription.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class MedicationRequestStatus(
    @JsonValue val text: String) {
    ACTIVE("active"),
    ON_HOLD("on-hold"),
    CANCELLED("cancelled"),
    COMPLETED("completed"),
    ENTERED_IN_ERROR("entered-in-error"),
    STOPPED("stopped"),
    DRAFT("draft"),
    UNKNOWN("unknown")
}




/**
 * An order or request for both supply of the medication and the instructions for administration of the medication to a patient. The resource is called "MedicationRequest" rather than "MedicationPrescription" or "MedicationOrder" to generalize the use across inpatient and outpatient settings, including care plans, etc., and to harmonize with workflow patterns.
 */
class MedicationRequestSubstitution: BackboneElement()
{


    /**
     *
     */
    var allowedBoolean: BooleanType? = null



    /**
     *
     */
    var allowedCodeableConcept: CodeableConcept? = null



    /**
     * Indicates the reason for the substitution, or why substitution must or must not be performed.
     */
    var reason: CodeableConcept? = null




}

/**
 * A record of a medication that is being consumed by a patient.   A MedicationStatement may indicate that the patient may be taking the medication now or has taken the medication in the past or will be taking the medication in the future.  The source of this information can be the patient, significant other (such as a family member or spouse), or a clinician.  A common scenario where this information is captured is during the history taking process during a patient visit or stay.   The medication information may come from sources such as the patient's memory, from a prescription bottle,  or from a list of medications the patient, clinician or other party maintains.
 *
 * The primary difference between a medication statement and a medication administration is that the medication administration has complete administration information and is based on actual administration information from the person who administered the medication.  A medication statement is often, if not always, less specific.  There is no required date/time when the medication was administered, in fact we only know that a source has reported the patient is taking this medication, where details such as time, quantity, or rate or even medication product may be incomplete or missing or less precise.  As stated earlier, the medication statement information may come from the patient's memory, from a prescription bottle or from a list of medications the patient, clinician or other party maintains.  Medication administration is more formal and is not missing detailed information.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class MedicationStatement(
    val status: MedicationStatusCodes,
    val subject: Reference): DomainResource() {


    /**
     * Identifiers associated with this Medication Statement that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate. They are business identifiers assigned to this resource by the performer or other systems and remain constant as the resource is updated and propagates from server to server.
     */
    var identifier: List<Identifier>? = null



    /**
     * A plan, proposal or order that is fulfilled in whole or in part by this event.
     */
    var basedOn: List<Reference>? = null

    @JsonIgnore
    var basedOnTarget: List<Resource>? = null

    /**
     * A larger event of which this particular event is a component or step.
     */
    var partOf: List<Reference>? = null

    @JsonIgnore
    var partOfTarget: List<Resource>? = null

    /**
     * Captures the reason for the current state of the MedicationStatement.
     */
    var statusReason: List<CodeableConcept>? = null



    /**
     * Indicates where the medication is expected to be consumed or administered.
     */
    var category: CodeableConcept? = null



    /**
     *
     */
    var medicationCodeableConcept: CodeableConcept? = null



    /**
     *
     */
    var medicationReference: Reference? = null

    @JsonIgnore
    var medicationReferenceTarget: Resource? = null

    /**
     * The encounter or episode of care that establishes the context for this MedicationStatement.
     */
    var context: Reference? = null

    @JsonIgnore
    var contextTarget: Resource? = null

    /**
     *
     */
    var effectiveDateTime: DateTimeType? = null



    /**
     *
     */
    var effectivePeriod: Period? = null



    /**
     * The date when the medication statement was asserted by the information source.
     */
    var dateAsserted: DateTimeType? = null



    /**
     * The person or organization that provided the information about the taking of this medication. Note: Use derivedFrom when a MedicationStatement is derived from other resources, e.g. Claim or MedicationRequest.
     */
    var informationSource: Reference? = null

    @JsonIgnore
    var informationSourceTarget: Resource? = null

    /**
     * Allows linking the MedicationStatement to the underlying MedicationRequest, or to other information that supports or is used to derive the MedicationStatement.
     */
    var derivedFrom: List<Reference>? = null

    @JsonIgnore
    var derivedFromTarget: List<Resource>? = null

    /**
     * A reason for why the medication is being/was taken.
     */
    var reasonCode: List<CodeableConcept>? = null



    /**
     * Condition or observation that supports why the medication is being/was taken.
     */
    var reasonReference: List<Reference>? = null

    @JsonIgnore
    var reasonReferenceTarget: List<Resource>? = null

    /**
     * Provides extra information about the medication statement that is not conveyed by the other attributes.
     */
    var note: List<Annotation>? = null



    /**
     * Indicates how the medication is/was or should be taken by the patient.
     */
    var dosage: List<Dosage>? = null




}

/**
 * A coded concept defining if the medication is in active use.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class MedicationStatusCodes(
    @JsonValue val text: String) {
    ACTIVE("active"),
    INACTIVE("inactive"),
    ENTERED_IN_ERROR("entered-in-error")
}




/**
 * Detailed definition of a medicinal product, typically for uses other than direct patient care (e.g. regulatory use).
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class MedicinalProduct(
    val name: List<MedicinalProductName>): DomainResource() {


    /**
     * Business identifier for this product. Could be an MPID.
     */
    var identifier: List<Identifier>? = null



    /**
     * Regulatory type, e.g. Investigational or Authorized.
     */
    var type: CodeableConcept? = null



    /**
     * If this medicine applies to human or veterinary uses.
     */
    var domain: Coding? = null



    /**
     * The dose form for a single part product, or combined form of a multiple part product.
     */
    var combinedPharmaceuticalDoseForm: CodeableConcept? = null



    /**
     * The legal status of supply of the medicinal product as classified by the regulator.
     */
    var legalStatusOfSupply: CodeableConcept? = null



    /**
     * Whether the Medicinal Product is subject to additional monitoring for regulatory reasons.
     */
    var additionalMonitoringIndicator: CodeableConcept? = null



    /**
     * Whether the Medicinal Product is subject to special measures for regulatory reasons.
     */
    var specialMeasures: List<StringType>? = null



    /**
     * If authorised for use in children.
     */
    var paediatricUseIndicator: CodeableConcept? = null



    /**
     * Allows the product to be classified by various systems.
     */
    var productClassification: List<CodeableConcept>? = null



    /**
     * Marketing status of the medicinal product, in contrast to marketing authorizaton.
     */
    var marketingStatus: List<MarketingStatus>? = null



    /**
     * Pharmaceutical aspects of product.
     */
    var pharmaceuticalProduct: List<Reference>? = null

    @JsonIgnore
    var pharmaceuticalProductTarget: List<Resource>? = null

    /**
     * Package representation for the product.
     */
    var packagedMedicinalProduct: List<Reference>? = null

    @JsonIgnore
    var packagedMedicinalProductTarget: List<Resource>? = null

    /**
     * Supporting documentation, typically for regulatory submission.
     */
    var attachedDocument: List<Reference>? = null

    @JsonIgnore
    var attachedDocumentTarget: List<Resource>? = null

    /**
     * A master file for to the medicinal product (e.g. Pharmacovigilance System Master File).
     */
    var masterFile: List<Reference>? = null

    @JsonIgnore
    var masterFileTarget: List<Resource>? = null

    /**
     * A product specific contact, person (in a role), or an organization.
     */
    var contact: List<Reference>? = null

    @JsonIgnore
    var contactTarget: List<Resource>? = null

    /**
     * Clinical trials or studies that this product is involved in.
     */
    var clinicalTrial: List<Reference>? = null

    @JsonIgnore
    var clinicalTrialTarget: List<Resource>? = null

    /**
     * Reference to another product, e.g. for linking authorised to investigational product.
     */
    var crossReference: List<Identifier>? = null



    /**
     * An operation applied to the product, for manufacturing or adminsitrative purpose.
     */
    var manufacturingBusinessOperation: List<MedicinalProductManufacturingBusinessOperation>? = null



    /**
     * Indicates if the medicinal product has an orphan designation for the treatment of a rare disease.
     */
    var specialDesignation: List<MedicinalProductSpecialDesignation>? = null




}

/**
 * The regulatory authorization of a medicinal product.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class MedicinalProductAuthorization: DomainResource()
{


    /**
     * Business identifier for the marketing authorization, as assigned by a regulator.
     */
    var identifier: List<Identifier>? = null



    /**
     * The medicinal product that is being authorized.
     */
    var subject: Reference? = null

    @JsonIgnore
    var subjectTarget: Resource? = null

    /**
     * The country in which the marketing authorization has been granted.
     */
    var country: List<CodeableConcept>? = null



    /**
     * Jurisdiction within a country.
     */
    var jurisdiction: List<CodeableConcept>? = null



    /**
     * The status of the marketing authorization.
     */
    var status: CodeableConcept? = null



    /**
     * The date at which the given status has become applicable.
     */
    var statusDate: DateTimeType? = null



    /**
     * The date when a suspended the marketing or the marketing authorization of the product is anticipated to be restored.
     */
    var restoreDate: DateTimeType? = null



    /**
     * The beginning of the time period in which the marketing authorization is in the specific status shall be specified A complete date consisting of day, month and year shall be specified using the ISO 8601 date format.
     */
    var validityPeriod: Period? = null



    /**
     * A period of time after authorization before generic product applicatiosn can be submitted.
     */
    var dataExclusivityPeriod: Period? = null



    /**
     * The date when the first authorization was granted by a Medicines Regulatory Agency.
     */
    var dateOfFirstAuthorization: DateTimeType? = null



    /**
     * Date of first marketing authorization for a company's new medicinal product in any country in the World.
     */
    var internationalBirthDate: DateTimeType? = null



    /**
     * The legal framework against which this authorization is granted.
     */
    var legalBasis: CodeableConcept? = null



    /**
     * Authorization in areas within a country.
     */
    var jurisdictionalAuthorization: List<MedicinalProductAuthorizationJurisdictionalAuthorization>? = null



    /**
     * Marketing Authorization Holder.
     */
    var holder: Reference? = null

    @JsonIgnore
    var holderTarget: Resource? = null

    /**
     * Medicines Regulatory Agency.
     */
    var regulator: Reference? = null

    @JsonIgnore
    var regulatorTarget: Resource? = null

    /**
     * The regulatory procedure for granting or amending a marketing authorization.
     */
    var procedure: MedicinalProductAuthorizationProcedure? = null




}

/**
 * The regulatory authorization of a medicinal product.
 */
class MedicinalProductAuthorizationJurisdictionalAuthorization: BackboneElement()
{


    /**
     * The assigned number for the marketing authorization.
     */
    var identifier: List<Identifier>? = null



    /**
     * Country of authorization.
     */
    var country: CodeableConcept? = null



    /**
     * Jurisdiction within a country.
     */
    var jurisdiction: List<CodeableConcept>? = null



    /**
     * The legal status of supply in a jurisdiction or region.
     */
    var legalStatusOfSupply: CodeableConcept? = null



    /**
     * The start and expected end date of the authorization.
     */
    var validityPeriod: Period? = null




}

/**
 * The regulatory authorization of a medicinal product.
 */
class MedicinalProductAuthorizationProcedure(
    val type: CodeableConcept): BackboneElement() {


    /**
     * Identifier for this procedure.
     */
    var identifier: Identifier? = null



    /**
     *
     */
    var datePeriod: Period? = null



    /**
     *
     */
    var dateDateTime: DateTimeType? = null



    /**
     * Applcations submitted to obtain a marketing authorization.
     */
    var application: List<MedicinalProductAuthorizationProcedure>? = null




}

/**
 * The clinical particulars - indications, contraindications etc. of a medicinal product, including for regulatory purposes.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class MedicinalProductContraindication: DomainResource()
{


    /**
     * The medication for which this is an indication.
     */
    var subject: List<Reference>? = null

    @JsonIgnore
    var subjectTarget: List<Resource>? = null

    /**
     * The disease, symptom or procedure for the contraindication.
     */
    var disease: CodeableConcept? = null



    /**
     * The status of the disease or symptom for the contraindication.
     */
    var diseaseStatus: CodeableConcept? = null



    /**
     * A comorbidity (concurrent condition) or coinfection.
     */
    var comorbidity: List<CodeableConcept>? = null



    /**
     * Information about the use of the medicinal product in relation to other therapies as part of the indication.
     */
    var therapeuticIndication: List<Reference>? = null

    @JsonIgnore
    var therapeuticIndicationTarget: List<Resource>? = null

    /**
     * Information about the use of the medicinal product in relation to other therapies described as part of the indication.
     */
    var otherTherapy: List<MedicinalProductContraindicationOtherTherapy>? = null



    /**
     * The population group to which this applies.
     */
    var population: List<Population>? = null




}

/**
 * The clinical particulars - indications, contraindications etc. of a medicinal product, including for regulatory purposes.
 */
class MedicinalProductContraindicationOtherTherapy(
    val therapyRelationshipType: CodeableConcept): BackboneElement() {


    /**
     *
     */
    var medicationCodeableConcept: CodeableConcept? = null



    /**
     *
     */
    var medicationReference: Reference? = null

    @JsonIgnore
    var medicationReferenceTarget: Resource? = null


}

/**
 * Detailed definition of a medicinal product, typically for uses other than direct patient care (e.g. regulatory use).
 */
class MedicinalProductCountryLanguage(
    val country: CodeableConcept,
    val language: CodeableConcept): BackboneElement() {


    /**
     * Jurisdiction code for where this name applies.
     */
    var jurisdiction: CodeableConcept? = null




}

/**
 * Indication for the Medicinal Product.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class MedicinalProductIndication: DomainResource()
{


    /**
     * The medication for which this is an indication.
     */
    var subject: List<Reference>? = null

    @JsonIgnore
    var subjectTarget: List<Resource>? = null

    /**
     * The disease, symptom or procedure that is the indication for treatment.
     */
    var diseaseSymptomProcedure: CodeableConcept? = null



    /**
     * The status of the disease or symptom for which the indication applies.
     */
    var diseaseStatus: CodeableConcept? = null



    /**
     * Comorbidity (concurrent condition) or co-infection as part of the indication.
     */
    var comorbidity: List<CodeableConcept>? = null



    /**
     * The intended effect, aim or strategy to be achieved by the indication.
     */
    var intendedEffect: CodeableConcept? = null



    /**
     * Timing or duration information as part of the indication.
     */
    var duration: Quantity? = null



    /**
     * Information about the use of the medicinal product in relation to other therapies described as part of the indication.
     */
    var otherTherapy: List<MedicinalProductIndicationOtherTherapy>? = null



    /**
     * Describe the undesirable effects of the medicinal product.
     */
    var undesirableEffect: List<Reference>? = null

    @JsonIgnore
    var undesirableEffectTarget: List<Resource>? = null

    /**
     * The population group to which this applies.
     */
    var population: List<Population>? = null




}

/**
 * Indication for the Medicinal Product.
 */
class MedicinalProductIndicationOtherTherapy(
    val therapyRelationshipType: CodeableConcept): BackboneElement() {


    /**
     *
     */
    var medicationCodeableConcept: CodeableConcept? = null



    /**
     *
     */
    var medicationReference: Reference? = null

    @JsonIgnore
    var medicationReferenceTarget: Resource? = null


}

/**
 * An ingredient of a manufactured item or pharmaceutical product.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class MedicinalProductIngredient(
    val role: CodeableConcept): DomainResource() {


    /**
     * The identifier(s) of this Ingredient that are assigned by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate.
     */
    var identifier: Identifier? = null



    /**
     * If the ingredient is a known or suspected allergen.
     */
    var allergenicIndicator: BooleanType? = null



    /**
     * Manufacturer of this Ingredient.
     */
    var manufacturer: List<Reference>? = null

    @JsonIgnore
    var manufacturerTarget: List<Resource>? = null

    /**
     * A specified substance that comprises this ingredient.
     */
    var specifiedSubstance: List<MedicinalProductIngredientSpecifiedSubstance>? = null



    /**
     * The ingredient substance.
     */
    var substance: MedicinalProductIngredientSubstance? = null




}

/**
 * An ingredient of a manufactured item or pharmaceutical product.
 */
class MedicinalProductIngredientReferenceStrength(
    val strength: Ratio): BackboneElement() {


    /**
     * Relevant reference substance.
     */
    var substance: CodeableConcept? = null



    /**
     * Strength expressed in terms of a reference substance.
     */
    var strengthLowLimit: Ratio? = null



    /**
     * For when strength is measured at a particular point or distance.
     */
    var measurementPoint: StringType? = null



    /**
     * The country or countries for which the strength range applies.
     */
    var country: List<CodeableConcept>? = null




}

/**
 * An ingredient of a manufactured item or pharmaceutical product.
 */
class MedicinalProductIngredientSpecifiedSubstance(
    val code: CodeableConcept,
    val group: CodeableConcept): BackboneElement() {


    /**
     * Confidentiality level of the specified substance as the ingredient.
     */
    var confidentiality: CodeableConcept? = null



    /**
     * Quantity of the substance or specified substance present in the manufactured item or pharmaceutical product.
     */
    var strength: List<MedicinalProductIngredientStrength>? = null




}

/**
 * An ingredient of a manufactured item or pharmaceutical product.
 */
class MedicinalProductIngredientStrength(
    val presentation: Ratio): BackboneElement() {


    /**
     * A lower limit for the quantity of substance in the unit of presentation. For use when there is a range of strengths, this is the lower limit, with the presentation attribute becoming the upper limit.
     */
    var presentationLowLimit: Ratio? = null



    /**
     * The strength per unitary volume (or mass).
     */
    var concentration: Ratio? = null



    /**
     * A lower limit for the strength per unitary volume (or mass), for when there is a range. The concentration attribute then becomes the upper limit.
     */
    var concentrationLowLimit: Ratio? = null



    /**
     * For when strength is measured at a particular point or distance.
     */
    var measurementPoint: StringType? = null



    /**
     * The country or countries for which the strength range applies.
     */
    var country: List<CodeableConcept>? = null



    /**
     * Strength expressed in terms of a reference substance.
     */
    var referenceStrength: List<MedicinalProductIngredientReferenceStrength>? = null




}

/**
 * An ingredient of a manufactured item or pharmaceutical product.
 */
class MedicinalProductIngredientSubstance(
    val code: CodeableConcept): BackboneElement() {


    /**
     * Quantity of the substance or specified substance present in the manufactured item or pharmaceutical product.
     */
    var strength: List<MedicinalProductIngredientStrength>? = null




}

/**
 * The interactions of the medicinal product with other medicinal products, or other forms of interactions.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class MedicinalProductInteraction: DomainResource()
{


    /**
     * The medication for which this is a described interaction.
     */
    var subject: List<Reference>? = null

    @JsonIgnore
    var subjectTarget: List<Resource>? = null

    /**
     * The interaction described.
     */
    var description: StringType? = null



    /**
     * The specific medication, food or laboratory test that interacts.
     */
    var interactant: List<MedicinalProductInteractionInteractant>? = null



    /**
     * The type of the interaction e.g. drug-drug interaction, drug-food interaction, drug-lab test interaction.
     */
    var type: CodeableConcept? = null



    /**
     * The effect of the interaction, for example "reduced gastric absorption of primary medication".
     */
    var effect: CodeableConcept? = null



    /**
     * The incidence of the interaction, e.g. theoretical, observed.
     */
    var incidence: CodeableConcept? = null



    /**
     * Actions for managing the interaction.
     */
    var management: CodeableConcept? = null




}

/**
 * The interactions of the medicinal product with other medicinal products, or other forms of interactions.
 */
class MedicinalProductInteractionInteractant: BackboneElement()
{


    /**
     *
     */
    var itemReference: Reference? = null

    @JsonIgnore
    var itemReferenceTarget: Resource? = null

    /**
     *
     */
    var itemCodeableConcept: CodeableConcept? = null




}

/**
 * The manufactured item as contained in the packaged medicinal product.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class MedicinalProductManufactured(
    val manufacturedDoseForm: CodeableConcept,
    val quantity: Quantity): DomainResource() {


    /**
     * The “real world” units in which the quantity of the manufactured item is described.
     */
    var unitOfPresentation: CodeableConcept? = null



    /**
     * Manufacturer of the item (Note that this should be named "manufacturer" but it currently causes technical issues).
     */
    var manufacturer: List<Reference>? = null

    @JsonIgnore
    var manufacturerTarget: List<Resource>? = null

    /**
     * Ingredient.
     */
    var ingredient: List<Reference>? = null

    @JsonIgnore
    var ingredientTarget: List<Resource>? = null

    /**
     * Dimensions, color etc.
     */
    var physicalCharacteristics: ProdCharacteristic? = null



    /**
     * Other codeable characteristics.
     */
    var otherCharacteristics: List<CodeableConcept>? = null




}

/**
 * Detailed definition of a medicinal product, typically for uses other than direct patient care (e.g. regulatory use).
 */
class MedicinalProductManufacturingBusinessOperation: BackboneElement()
{


    /**
     * The type of manufacturing operation.
     */
    var operationType: CodeableConcept? = null



    /**
     * Regulatory authorization reference number.
     */
    var authorisationReferenceNumber: Identifier? = null



    /**
     * Regulatory authorization date.
     */
    var effectiveDate: DateTimeType? = null



    /**
     * To indicate if this proces is commercially confidential.
     */
    var confidentialityIndicator: CodeableConcept? = null



    /**
     * The manufacturer or establishment associated with the process.
     */
    var manufacturer: List<Reference>? = null

    @JsonIgnore
    var manufacturerTarget: List<Resource>? = null

    /**
     * A regulator which oversees the operation.
     */
    var regulator: Reference? = null

    @JsonIgnore
    var regulatorTarget: Resource? = null


}

/**
 * Detailed definition of a medicinal product, typically for uses other than direct patient care (e.g. regulatory use).
 */
class MedicinalProductName(
    val productName: StringType): BackboneElement() {


    /**
     * Coding words or phrases of the name.
     */
    var namePart: List<MedicinalProductNamePart>? = null



    /**
     * Country where the name applies.
     */
    var countryLanguage: List<MedicinalProductCountryLanguage>? = null




}

/**
 * Detailed definition of a medicinal product, typically for uses other than direct patient care (e.g. regulatory use).
 */
class MedicinalProductNamePart(
    val part: StringType,
    val type: Coding): BackboneElement()

/**
 * A medicinal product in a container or package.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class MedicinalProductPackaged(
    val packageItem: List<MedicinalProductPackagedPackageItem>): DomainResource() {


    /**
     * Unique identifier.
     */
    var identifier: List<Identifier>? = null



    /**
     * The product with this is a pack for.
     */
    var subject: List<Reference>? = null

    @JsonIgnore
    var subjectTarget: List<Resource>? = null

    /**
     * Textual description.
     */
    var description: StringType? = null



    /**
     * The legal status of supply of the medicinal product as classified by the regulator.
     */
    var legalStatusOfSupply: CodeableConcept? = null



    /**
     * Marketing information.
     */
    var marketingStatus: List<MarketingStatus>? = null



    /**
     * Manufacturer of this Package Item.
     */
    var marketingAuthorization: Reference? = null

    @JsonIgnore
    var marketingAuthorizationTarget: Resource? = null

    /**
     * Manufacturer of this Package Item.
     */
    var manufacturer: List<Reference>? = null

    @JsonIgnore
    var manufacturerTarget: List<Resource>? = null

    /**
     * Batch numbering.
     */
    var batchIdentifier: List<MedicinalProductPackagedBatchIdentifier>? = null




}

/**
 * A medicinal product in a container or package.
 */
class MedicinalProductPackagedBatchIdentifier(
    val outerPackaging: Identifier): BackboneElement() {


    /**
     * A number appearing on the immediate packaging (and not the outer packaging).
     */
    var immediatePackaging: Identifier? = null




}

/**
 * A medicinal product in a container or package.
 */
class MedicinalProductPackagedPackageItem(
    val type: CodeableConcept,
    val quantity: Quantity): BackboneElement() {


    /**
     * Including possibly Data Carrier Identifier.
     */
    var identifier: List<Identifier>? = null



    /**
     * Material type of the package item.
     */
    var material: List<CodeableConcept>? = null



    /**
     * A possible alternate material for the packaging.
     */
    var alternateMaterial: List<CodeableConcept>? = null



    /**
     * A device accompanying a medicinal product.
     */
    var device: List<Reference>? = null

    @JsonIgnore
    var deviceTarget: List<Resource>? = null

    /**
     * The manufactured item as contained in the packaged medicinal product.
     */
    var manufacturedItem: List<Reference>? = null

    @JsonIgnore
    var manufacturedItemTarget: List<Resource>? = null

    /**
     * Allows containers within containers.
     */
    var packageItem: List<MedicinalProductPackagedPackageItem>? = null



    /**
     * Dimensions, color etc.
     */
    var physicalCharacteristics: ProdCharacteristic? = null



    /**
     * Other codeable characteristics.
     */
    var otherCharacteristics: List<CodeableConcept>? = null



    /**
     * Shelf Life and storage information.
     */
    var shelfLifeStorage: List<ProductShelfLife>? = null



    /**
     * Manufacturer of this Package Item.
     */
    var manufacturer: List<Reference>? = null

    @JsonIgnore
    var manufacturerTarget: List<Resource>? = null


}

/**
 * A pharmaceutical product described in terms of its composition and dose form.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class MedicinalProductPharmaceutical(
    val administrableDoseForm: CodeableConcept,
    val routeOfAdministration: List<MedicinalProductPharmaceuticalRouteOfAdministration>): DomainResource() {


    /**
     * An identifier for the pharmaceutical medicinal product.
     */
    var identifier: List<Identifier>? = null



    /**
     * Todo.
     */
    var unitOfPresentation: CodeableConcept? = null



    /**
     * Ingredient.
     */
    var ingredient: List<Reference>? = null

    @JsonIgnore
    var ingredientTarget: List<Resource>? = null

    /**
     * Accompanying device.
     */
    var device: List<Reference>? = null

    @JsonIgnore
    var deviceTarget: List<Resource>? = null

    /**
     * Characteristics e.g. a products onset of action.
     */
    var characteristics: List<MedicinalProductPharmaceuticalCharacteristics>? = null




}

/**
 * A pharmaceutical product described in terms of its composition and dose form.
 */
class MedicinalProductPharmaceuticalCharacteristics(
    val code: CodeableConcept): BackboneElement() {


    /**
     * The status of characteristic e.g. assigned or pending.
     */
    var status: CodeableConcept? = null




}

/**
 * A pharmaceutical product described in terms of its composition and dose form.
 */
class MedicinalProductPharmaceuticalRouteOfAdministration(
    val code: CodeableConcept): BackboneElement() {


    /**
     * The first dose (dose quantity) administered in humans can be specified, for a product under investigation, using a numerical value and its unit of measurement.
     */
    var firstDose: Quantity? = null



    /**
     * The maximum single dose that can be administered as per the protocol of a clinical trial can be specified using a numerical value and its unit of measurement.
     */
    var maxSingleDose: Quantity? = null



    /**
     * The maximum dose per day (maximum dose quantity to be administered in any one 24-h period) that can be administered as per the protocol referenced in the clinical trial authorisation.
     */
    var maxDosePerDay: Quantity? = null



    /**
     * The maximum dose per treatment period that can be administered as per the protocol referenced in the clinical trial authorisation.
     */
    var maxDosePerTreatmentPeriod: Ratio? = null



    /**
     * The maximum treatment period during which an Investigational Medicinal Product can be administered as per the protocol referenced in the clinical trial authorisation.
     */
    var maxTreatmentPeriod: Duration? = null



    /**
     * A species for which this route applies.
     */
    var targetSpecies: List<MedicinalProductPharmaceuticalTargetSpecies>? = null




}

/**
 * A pharmaceutical product described in terms of its composition and dose form.
 */
class MedicinalProductPharmaceuticalTargetSpecies(
    val code: CodeableConcept): BackboneElement() {


    /**
     * A species specific time during which consumption of animal product is not appropriate.
     */
    var withdrawalPeriod: List<MedicinalProductPharmaceuticalWithdrawalPeriod>? = null




}

/**
 * A pharmaceutical product described in terms of its composition and dose form.
 */
class MedicinalProductPharmaceuticalWithdrawalPeriod(
    val tissue: CodeableConcept,
    val value: Quantity): BackboneElement() {


    /**
     * Extra information about the withdrawal period.
     */
    var supportingInformation: StringType? = null




}

/**
 * Detailed definition of a medicinal product, typically for uses other than direct patient care (e.g. regulatory use).
 */
class MedicinalProductSpecialDesignation: BackboneElement()
{


    /**
     * Identifier for the designation, or procedure number.
     */
    var identifier: List<Identifier>? = null



    /**
     * The type of special designation, e.g. orphan drug, minor use.
     */
    var type: CodeableConcept? = null



    /**
     * The intended use of the product, e.g. prevention, treatment.
     */
    var intendedUse: CodeableConcept? = null



    /**
     *
     */
    var indicationCodeableConcept: CodeableConcept? = null



    /**
     *
     */
    var indicationReference: Reference? = null

    @JsonIgnore
    var indicationReferenceTarget: Resource? = null

    /**
     * For example granted, pending, expired or withdrawn.
     */
    var status: CodeableConcept? = null



    /**
     * Date when the designation was granted.
     */
    var date: DateTimeType? = null



    /**
     * Animal species for which this applies.
     */
    var species: CodeableConcept? = null




}

/**
 * Describe the undesirable effects of the medicinal product.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class MedicinalProductUndesirableEffect: DomainResource()
{


    /**
     * The medication for which this is an indication.
     */
    var subject: List<Reference>? = null

    @JsonIgnore
    var subjectTarget: List<Resource>? = null

    /**
     * The symptom, condition or undesirable effect.
     */
    var symptomConditionEffect: CodeableConcept? = null



    /**
     * Classification of the effect.
     */
    var classification: CodeableConcept? = null



    /**
     * The frequency of occurrence of the effect.
     */
    var frequencyOfOccurrence: CodeableConcept? = null



    /**
     * The population group to which this applies.
     */
    var population: List<Population>? = null




}

/**
 * Defines the characteristics of a message that can be shared between systems, including the type of event that initiates the message, the content to be transmitted and what response(s), if any, are permitted.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class MessageDefinition(
    val status: PublicationStatus,
    val date: DateTimeType): DomainResource() {


    /**
     * The business identifier that is used to reference the MessageDefinition and *is* expected to be consistent from server to server.
     */
    var url: UriType? = null



    /**
     * A formal identifier that is used to identify this message definition when it is represented in other formats, or referenced in a specification, model, design or an instance.
     */
    var identifier: List<Identifier>? = null



    /**
     * The identifier that is used to identify this version of the message definition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the message definition author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
     */
    var version: StringType? = null



    /**
     * A natural language name identifying the message definition. This name should be usable as an identifier for the module by machine processing applications such as code generation.
     */
    var name: StringType? = null



    /**
     * A short, descriptive, user-friendly title for the message definition.
     */
    var title: StringType? = null



    /**
     * A MessageDefinition that is superseded by this definition.
     */
    var replaces: List<CanonicalType>? = null



    /**
     * A Boolean value to indicate that this message definition is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
     */
    var experimental: BooleanType? = null



    /**
     * The name of the organization or individual that published the message definition.
     */
    var publisher: StringType? = null



    /**
     * Contact details to assist a user in finding and communicating with the publisher.
     */
    var contact: List<ContactDetail>? = null



    /**
     * A free text natural language description of the message definition from a consumer's perspective.
     */
    var description: MarkdownType? = null



    /**
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate message definition instances.
     */
    var useContext: List<UsageContext>? = null



    /**
     * A legal or geographic region in which the message definition is intended to be used.
     */
    var jurisdiction: List<CodeableConcept>? = null



    /**
     * Explanation of why this message definition is needed and why it has been designed as it has.
     */
    var purpose: MarkdownType? = null



    /**
     * A copyright statement relating to the message definition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the message definition.
     */
    var copyright: MarkdownType? = null



    /**
     * The MessageDefinition that is the basis for the contents of this resource.
     */
    var base: CanonicalType? = null



    /**
     * Identifies a protocol or workflow that this MessageDefinition represents a step in.
     */
    var parent: List<CanonicalType>? = null



    /**
     *
     */
    var eventCoding: Coding? = null



    /**
     *
     */
    var eventUri: UriType? = null



    /**
     * The impact of the content of the message.
     */
    var category: MessageSignificanceCategory? = null



    /**
     * Identifies the resource (or resources) that are being addressed by the event.  For example, the Encounter for an admit message or two Account records for a merge.
     */
    var focus: List<MessageDefinitionFocus>? = null



    /**
     * Declare at a message definition level whether a response is required or only upon error or success, or never.
     */
    var responseRequired: MessageheaderResponseRequest? = null



    /**
     * Indicates what types of messages may be sent as an application-level response to this message.
     */
    var allowedResponse: List<MessageDefinitionAllowedResponse>? = null



    /**
     * Canonical reference to a GraphDefinition. If a URL is provided, it is the canonical reference to a [[[GraphDefinition]]] that it controls what resources are to be added to the bundle when building the document. The GraphDefinition can also specify profiles that apply to the various resources.
     */
    var graph: List<CanonicalType>? = null




}

/**
 * Defines the characteristics of a message that can be shared between systems, including the type of event that initiates the message, the content to be transmitted and what response(s), if any, are permitted.
 */
class MessageDefinitionAllowedResponse(
    val message: CanonicalType): BackboneElement() {


    /**
     * Provides a description of the circumstances in which this response should be used (as opposed to one of the alternative responses).
     */
    var situation: MarkdownType? = null




}

/**
 * Defines the characteristics of a message that can be shared between systems, including the type of event that initiates the message, the content to be transmitted and what response(s), if any, are permitted.
 */
class MessageDefinitionFocus(
    val code: CodeType,
    val min: UnsignedIntType): BackboneElement() {


    /**
     * A profile that reflects constraints for the focal resource (and potentially for related resources).
     */
    var profile: CanonicalType? = null



    /**
     * Identifies the maximum number of resources of this type that must be pointed to by a message in order for it to be valid against this MessageDefinition.
     */
    var max: StringType? = null




}

/**
 * The header for a message exchange that is either requesting or responding to an action.  The reference(s) that are the subject of the action as well as other information related to the action are typically transmitted in a bundle in which the MessageHeader resource instance is the first resource in the bundle.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class MessageHeader(
    val source: MessageHeaderSource): DomainResource() {


    /**
     *
     */
    var eventCoding: Coding? = null



    /**
     *
     */
    var eventUri: UriType? = null



    /**
     * The destination application which the message is intended for.
     */
    var destination: List<MessageHeaderDestination>? = null



    /**
     * Identifies the sending system to allow the use of a trust relationship.
     */
    var sender: Reference? = null

    @JsonIgnore
    var senderTarget: Resource? = null

    /**
     * The person or device that performed the data entry leading to this message. When there is more than one candidate, pick the most proximal to the message. Can provide other enterers in extensions.
     */
    var enterer: Reference? = null

    @JsonIgnore
    var entererTarget: Resource? = null

    /**
     * The logical author of the message - the person or device that decided the described event should happen. When there is more than one candidate, pick the most proximal to the MessageHeader. Can provide other authors in extensions.
     */
    var author: Reference? = null

    @JsonIgnore
    var authorTarget: Resource? = null

    /**
     * The person or organization that accepts overall responsibility for the contents of the message. The implication is that the message event happened under the policies of the responsible party.
     */
    var responsible: Reference? = null

    @JsonIgnore
    var responsibleTarget: Resource? = null

    /**
     * Coded indication of the cause for the event - indicates  a reason for the occurrence of the event that is a focus of this message.
     */
    var reason: CodeableConcept? = null



    /**
     * Information about the message that this message is a response to.  Only present if this message is a response.
     */
    var response: MessageHeaderResponse? = null



    /**
     * The actual data of the message - a reference to the root/focus class of the event.
     */
    var focus: List<Reference>? = null

    @JsonIgnore
    var focusTarget: List<Resource>? = null

    /**
     * Permanent link to the MessageDefinition for this message.
     */
    var definition: CanonicalType? = null




}

/**
 * The header for a message exchange that is either requesting or responding to an action.  The reference(s) that are the subject of the action as well as other information related to the action are typically transmitted in a bundle in which the MessageHeader resource instance is the first resource in the bundle.
 */
class MessageHeaderDestination(
    val endpoint: UrlType): BackboneElement() {


    /**
     * Human-readable name for the target system.
     */
    var name: StringType? = null



    /**
     * Identifies the target end system in situations where the initial message transmission is to an intermediary system.
     */
    var target: Reference? = null

    @JsonIgnore
    var targetTarget: Resource? = null

    /**
     * Allows data conveyed by a message to be addressed to a particular person or department when routing to a specific application isn't sufficient.
     */
    var receiver: Reference? = null

    @JsonIgnore
    var receiverTarget: Resource? = null


}

/**
 * The header for a message exchange that is either requesting or responding to an action.  The reference(s) that are the subject of the action as well as other information related to the action are typically transmitted in a bundle in which the MessageHeader resource instance is the first resource in the bundle.
 */
class MessageHeaderResponse(
    val identifier: IdType,
    val code: ResponseType): BackboneElement() {


    /**
     * Full details of any issues found in the message.
     */
    var details: Reference? = null

    @JsonIgnore
    var detailsTarget: Resource? = null


}

/**
 * HL7-defined table of codes which identify conditions under which acknowledgments are required to be returned in response to a message.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class MessageheaderResponseRequest(
    @JsonValue val text: String) {
    ALWAYS("always"),
    ON_ERROR("on-error"),
    NEVER("never"),
    ON_SUCCESS("on-success")
}




/**
 * The header for a message exchange that is either requesting or responding to an action.  The reference(s) that are the subject of the action as well as other information related to the action are typically transmitted in a bundle in which the MessageHeader resource instance is the first resource in the bundle.
 */
class MessageHeaderSource(
    val endpoint: UrlType): BackboneElement() {


    /**
     * Human-readable name for the source system.
     */
    var name: StringType? = null



    /**
     * May include configuration or other information useful in debugging.
     */
    var software: StringType? = null



    /**
     * Can convey versions of multiple systems in situations where a message passes through multiple hands.
     */
    var version: StringType? = null



    /**
     * An e-mail, phone, website or other contact point to use to resolve issues with message communications.
     */
    var contact: ContactPoint? = null




}

/**
 * The impact of the content of a message.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class MessageSignificanceCategory(
    @JsonValue val text: String) {
    CONSEQUENCE("consequence"),
    CURRENCY("currency"),
    NOTIFICATION("notification")
}




/**
 * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
 * If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions
 */
class Meta: Element()
{


    /**
     * The version specific identifier, as it appears in the version portion of the URL. This value changes when the resource is created, updated, or deleted.
     */
    var versionId: IdType? = null



    /**
     * When the resource last changed - e.g. when the version changed.
     */
    var lastUpdated: InstantType? = null



    /**
     * A uri that identifies the source system of the resource. This provides a minimal amount of [[[Provenance]]] information that can be used to track or differentiate the source of information in the resource. The source may identify another FHIR server, document, message, database, etc.
     */
    var source: UriType? = null



    /**
     * A list of profiles (references to [[[StructureDefinition]]] resources) that this resource claims to conform to. The URL is a reference to [[[StructureDefinition.url]]].
     */
    var profile: List<CanonicalType>? = null



    /**
     * Security labels applied to this resource. These tags connect specific resources to the overall security policy and infrastructure.
     */
    var security: List<Coding>? = null



    /**
     * Tags applied to this resource. Tags are intended to be used to identify and relate resources to process and workflow, and applications are not required to consider the tags when interpreting the meaning of a resource.
     */
    var tag: List<Coding>? = null




}

/**
 * Raw data describing a biological sequence.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class MolecularSequence(
    val coordinateSystem: IntegerType): DomainResource() {


    /**
     * A unique identifier for this particular sequence instance. This is a FHIR-defined id.
     */
    var identifier: List<Identifier>? = null



    /**
     * Amino Acid Sequence/ DNA Sequence / RNA Sequence.
     */
    var type: SequenceType? = null



    /**
     * The patient whose sequencing results are described by this resource.
     */
    var patient: Reference? = null

    @JsonIgnore
    var patientTarget: Resource? = null

    /**
     * Specimen used for sequencing.
     */
    var specimen: Reference? = null

    @JsonIgnore
    var specimenTarget: Resource? = null

    /**
     * The method for sequencing, for example, chip information.
     */
    var device: Reference? = null

    @JsonIgnore
    var deviceTarget: Resource? = null

    /**
     * The organization or lab that should be responsible for this result.
     */
    var performer: Reference? = null

    @JsonIgnore
    var performerTarget: Resource? = null

    /**
     * The number of copies of the sequence of interest. (RNASeq).
     */
    var quantity: Quantity? = null



    /**
     * A sequence that is used as a reference to describe variants that are present in a sequence analyzed.
     */
    var referenceSeq: MolecularSequenceReferenceSeq? = null



    /**
     * The definition of variant here originates from Sequence ontology ([variant_of](http://www.sequenceontology.org/browser/current_svn/term/variant_of)). This element can represent amino acid or nucleic sequence change(including insertion,deletion,SNP,etc.)  It can represent some complex mutation or segment variation with the assist of CIGAR string.
     */
    var variant: List<MolecularSequenceVariant>? = null



    /**
     * Sequence that was observed. It is the result marked by referenceSeq along with variant records on referenceSeq. This shall start from referenceSeq.windowStart and end by referenceSeq.windowEnd.
     */
    var observedSeq: StringType? = null



    /**
     * An experimental feature attribute that defines the quality of the feature in a quantitative way, such as a phred quality score ([SO:0001686](http://www.sequenceontology.org/browser/current_svn/term/SO:0001686)).
     */
    var quality: List<MolecularSequenceQuality>? = null



    /**
     * Coverage (read depth or depth) is the average number of reads representing a given nucleotide in the reconstructed sequence.
     */
    var readCoverage: IntegerType? = null



    /**
     * Configurations of the external repository. The repository shall store target's observedSeq or records related with target's observedSeq.
     */
    var repository: List<MolecularSequenceRepository>? = null



    /**
     * Pointer to next atomic sequence which at most contains one variant.
     */
    var pointer: List<Reference>? = null

    @JsonIgnore
    var pointerTarget: List<Resource>? = null

    /**
     * Information about chromosome structure variation.
     */
    var structureVariant: List<MolecularSequenceStructureVariant>? = null




}

/**
 * Raw data describing a biological sequence.
 */
class MolecularSequenceInner: BackboneElement()
{


    /**
     * Structural variant inner start. If the coordinate system is either 0-based or 1-based, then start position is inclusive.
     */
    var start: IntegerType? = null



    /**
     * Structural variant inner end. If the coordinate system is 0-based then end is exclusive and does not include the last position. If the coordinate system is 1-base, then end is inclusive and includes the last position.
     */
    var end: IntegerType? = null




}

/**
 * Raw data describing a biological sequence.
 */
class MolecularSequenceOuter: BackboneElement()
{


    /**
     * Structural variant outer start. If the coordinate system is either 0-based or 1-based, then start position is inclusive.
     */
    var start: IntegerType? = null



    /**
     * Structural variant outer end. If the coordinate system is 0-based then end is exclusive and does not include the last position. If the coordinate system is 1-base, then end is inclusive and includes the last position.
     */
    var end: IntegerType? = null




}

/**
 * Raw data describing a biological sequence.
 */
class MolecularSequenceQuality(
    val type: QualityType): BackboneElement() {


    /**
     * Gold standard sequence used for comparing against.
     */
    var standardSequence: CodeableConcept? = null



    /**
     * Start position of the sequence. If the coordinate system is either 0-based or 1-based, then start position is inclusive.
     */
    var start: IntegerType? = null



    /**
     * End position of the sequence. If the coordinate system is 0-based then end is exclusive and does not include the last position. If the coordinate system is 1-base, then end is inclusive and includes the last position.
     */
    var end: IntegerType? = null



    /**
     * The score of an experimentally derived feature such as a p-value ([SO:0001685](http://www.sequenceontology.org/browser/current_svn/term/SO:0001685)).
     */
    var score: Quantity? = null



    /**
     * Which method is used to get sequence quality.
     */
    var method: CodeableConcept? = null



    /**
     * True positives, from the perspective of the truth data, i.e. the number of sites in the Truth Call Set for which there are paths through the Query Call Set that are consistent with all of the alleles at this site, and for which there is an accurate genotype call for the event.
     */
    var truthTP: DecimalType? = null



    /**
     * True positives, from the perspective of the query data, i.e. the number of sites in the Query Call Set for which there are paths through the Truth Call Set that are consistent with all of the alleles at this site, and for which there is an accurate genotype call for the event.
     */
    var queryTP: DecimalType? = null



    /**
     * False negatives, i.e. the number of sites in the Truth Call Set for which there is no path through the Query Call Set that is consistent with all of the alleles at this site, or sites for which there is an inaccurate genotype call for the event. Sites with correct variant but incorrect genotype are counted here.
     */
    var truthFN: DecimalType? = null



    /**
     * False positives, i.e. the number of sites in the Query Call Set for which there is no path through the Truth Call Set that is consistent with this site. Sites with correct variant but incorrect genotype are counted here.
     */
    var queryFP: DecimalType? = null



    /**
     * The number of false positives where the non-REF alleles in the Truth and Query Call Sets match (i.e. cases where the truth is 1/1 and the query is 0/1 or similar).
     */
    var gtFP: DecimalType? = null



    /**
     * QUERY.TP / (QUERY.TP + QUERY.FP).
     */
    var precision: DecimalType? = null



    /**
     * TRUTH.TP / (TRUTH.TP + TRUTH.FN).
     */
    var recall: DecimalType? = null



    /**
     * Harmonic mean of Recall and Precision, computed as: 2 * precision * recall / (precision + recall).
     */
    var fScore: DecimalType? = null



    /**
     * Receiver Operator Characteristic (ROC) Curve  to give sensitivity/specificity tradeoff.
     */
    var roc: MolecularSequenceRoc? = null




}

/**
 * Raw data describing a biological sequence.
 */
class MolecularSequenceReferenceSeq: BackboneElement()
{


    /**
     * Structural unit composed of a nucleic acid molecule which controls its own replication through the interaction of specific proteins at one or more origins of replication ([SO:0000340](http://www.sequenceontology.org/browser/current_svn/term/SO:0000340)).
     */
    var chromosome: CodeableConcept? = null



    /**
     * The Genome Build used for reference, following GRCh build versions e.g. 'GRCh 37'.  Version number must be included if a versioned release of a primary build was used.
     */
    var genomeBuild: StringType? = null



    /**
     * A relative reference to a DNA strand based on gene orientation. The strand that contains the open reading frame of the gene is the "sense" strand, and the opposite complementary strand is the "antisense" strand.
     */
    var orientation: OrientationType? = null



    /**
     * Reference identifier of reference sequence submitted to NCBI. It must match the type in the MolecularSequence.type field. For example, the prefix, “NG_” identifies reference sequence for genes, “NM_” for messenger RNA transcripts, and “NP_” for amino acid sequences.
     */
    var referenceSeqId: CodeableConcept? = null



    /**
     * A pointer to another MolecularSequence entity as reference sequence.
     */
    var referenceSeqPointer: Reference? = null

    @JsonIgnore
    var referenceSeqPointerTarget: Resource? = null

    /**
     * A string like "ACGT".
     */
    var referenceSeqString: StringType? = null



    /**
     * An absolute reference to a strand. The Watson strand is the strand whose 5'-end is on the short arm of the chromosome, and the Crick strand as the one whose 5'-end is on the long arm.
     */
    var strand: StrandType? = null



    /**
     * Start position of the window on the reference sequence. If the coordinate system is either 0-based or 1-based, then start position is inclusive.
     */
    var windowStart: IntegerType? = null



    /**
     * End position of the window on the reference sequence. If the coordinate system is 0-based then end is exclusive and does not include the last position. If the coordinate system is 1-base, then end is inclusive and includes the last position.
     */
    var windowEnd: IntegerType? = null




}

/**
 * Raw data describing a biological sequence.
 */
class MolecularSequenceRepository(
    val type: RepositoryType): BackboneElement() {


    /**
     * URI of an external repository which contains further details about the genetics data.
     */
    var url: UriType? = null



    /**
     * URI of an external repository which contains further details about the genetics data.
     */
    var name: StringType? = null



    /**
     * Id of the variant in this external repository. The server will understand how to use this id to call for more info about datasets in external repository.
     */
    var datasetId: StringType? = null



    /**
     * Id of the variantset in this external repository. The server will understand how to use this id to call for more info about variantsets in external repository.
     */
    var variantsetId: StringType? = null



    /**
     * Id of the read in this external repository.
     */
    var readsetId: StringType? = null




}

/**
 * Raw data describing a biological sequence.
 */
class MolecularSequenceRoc: BackboneElement()
{


    /**
     * Invidual data point representing the GQ (genotype quality) score threshold.
     */
    var score: List<IntegerType>? = null



    /**
     * The number of true positives if the GQ score threshold was set to "score" field value.
     */
    var numTP: List<IntegerType>? = null



    /**
     * The number of false positives if the GQ score threshold was set to "score" field value.
     */
    var numFP: List<IntegerType>? = null



    /**
     * The number of false negatives if the GQ score threshold was set to "score" field value.
     */
    var numFN: List<IntegerType>? = null



    /**
     * Calculated precision if the GQ score threshold was set to "score" field value.
     */
    var precision: List<DecimalType>? = null



    /**
     * Calculated sensitivity if the GQ score threshold was set to "score" field value.
     */
    var sensitivity: List<DecimalType>? = null



    /**
     * Calculated fScore if the GQ score threshold was set to "score" field value.
     */
    var fMeasure: List<DecimalType>? = null




}

/**
 * Raw data describing a biological sequence.
 */
class MolecularSequenceStructureVariant: BackboneElement()
{


    /**
     * Information about chromosome structure variation DNA change type.
     */
    var variantType: CodeableConcept? = null



    /**
     * Used to indicate if the outer and inner start-end values have the same meaning.
     */
    var exact: BooleanType? = null



    /**
     * Length of the variant chromosome.
     */
    var length: IntegerType? = null



    /**
     * Structural variant outer.
     */
    var outer: MolecularSequenceOuter? = null



    /**
     * Structural variant inner.
     */
    var inner: MolecularSequenceInner? = null




}

/**
 * Raw data describing a biological sequence.
 */
class MolecularSequenceVariant: BackboneElement()
{


    /**
     * Start position of the variant on the  reference sequence. If the coordinate system is either 0-based or 1-based, then start position is inclusive.
     */
    var start: IntegerType? = null



    /**
     * End position of the variant on the reference sequence. If the coordinate system is 0-based then end is exclusive and does not include the last position. If the coordinate system is 1-base, then end is inclusive and includes the last position.
     */
    var end: IntegerType? = null



    /**
     * An allele is one of a set of coexisting sequence variants of a gene ([SO:0001023](http://www.sequenceontology.org/browser/current_svn/term/SO:0001023)).  Nucleotide(s)/amino acids from start position of sequence to stop position of sequence on the positive (+) strand of the observed  sequence. When the sequence  type is DNA, it should be the sequence on the positive (+) strand. This will lay in the range between variant.start and variant.end.
     */
    var observedAllele: StringType? = null



    /**
     * An allele is one of a set of coexisting sequence variants of a gene ([SO:0001023](http://www.sequenceontology.org/browser/current_svn/term/SO:0001023)). Nucleotide(s)/amino acids from start position of sequence to stop position of sequence on the positive (+) strand of the reference sequence. When the sequence  type is DNA, it should be the sequence on the positive (+) strand. This will lay in the range between variant.start and variant.end.
     */
    var referenceAllele: StringType? = null



    /**
     * Extended CIGAR string for aligning the sequence with reference bases. See detailed documentation [here](http://support.illumina.com/help/SequencingAnalysisWorkflow/Content/Vault/Informatics/Sequencing_Analysis/CASAVA/swSEQ_mCA_ExtendedCIGARFormat.htm).
     */
    var cigar: StringType? = null



    /**
     * A pointer to an Observation containing variant information.
     */
    var variantPointer: Reference? = null

    @JsonIgnore
    var variantPointerTarget: Resource? = null


}

/**
 * An amount of economic utility in some recognized currency.
 * If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions
 */
class Money: Element()
{


    /**
     * Numerical value (with implicit precision).
     */
    var value: DecimalType? = null



    /**
     * ISO 4217 Currency Code.
     */
    var currency: CodeType? = null




}

/**
 * The use of a human name.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class NameUse(
    @JsonValue val text: String) {
    USUAL("usual"),
    OFFICIAL("official"),
    TEMP("temp"),
    NICKNAME("nickname"),
    ANONYMOUS("anonymous"),
    OLD("old"),
    MAIDEN("maiden")
}




/**
 * A curated namespace that issues unique symbols within that namespace for the identification of concepts, people, devices, etc.  Represents a "System" used within the Identifier and Coding data types.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class NamingSystem(
    val name: StringType,
    val status: PublicationStatus,
    val kind: NamingSystemType,
    val date: DateTimeType,
    val uniqueId: List<NamingSystemUniqueId>): DomainResource() {


    /**
     * The name of the organization or individual that published the naming system.
     */
    var publisher: StringType? = null



    /**
     * Contact details to assist a user in finding and communicating with the publisher.
     */
    var contact: List<ContactDetail>? = null



    /**
     * The name of the organization that is responsible for issuing identifiers or codes for this namespace and ensuring their non-collision.
     */
    var responsible: StringType? = null



    /**
     * Categorizes a naming system for easier search by grouping related naming systems.
     */
    var type: CodeableConcept? = null



    /**
     * A free text natural language description of the naming system from a consumer's perspective. Details about what the namespace identifies including scope, granularity, version labeling, etc.
     */
    var description: MarkdownType? = null



    /**
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate naming system instances.
     */
    var useContext: List<UsageContext>? = null



    /**
     * A legal or geographic region in which the naming system is intended to be used.
     */
    var jurisdiction: List<CodeableConcept>? = null



    /**
     * Provides guidance on the use of the namespace, including the handling of formatting characters, use of upper vs. lower case, etc.
     */
    var usage: StringType? = null




}

/**
 * Identifies the style of unique identifier used to identify a namespace.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class NamingSystemIdentifierType(
    @JsonValue val text: String) {
    OID("oid"),
    UUID("uuid"),
    URI("uri"),
    OTHER("other")
}




/**
 * Identifies the purpose of the naming system.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class NamingSystemType(
    @JsonValue val text: String) {
    CODESYSTEM("codesystem"),
    IDENTIFIER("identifier"),
    ROOT("root")
}




/**
 * A curated namespace that issues unique symbols within that namespace for the identification of concepts, people, devices, etc.  Represents a "System" used within the Identifier and Coding data types.
 */
class NamingSystemUniqueId(
    val type: NamingSystemIdentifierType,
    val value: StringType): BackboneElement() {


    /**
     * Indicates whether this identifier is the "preferred" identifier of this type.
     */
    var preferred: BooleanType? = null



    /**
     * Notes about the past or intended usage of this identifier.
     */
    var comment: StringType? = null



    /**
     * Identifies the period of time over which this identifier is considered appropriate to refer to the naming system.  Outside of this window, the identifier might be non-deterministic.
     */
    var period: Period? = null




}

/**
 * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
 * If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions
 */
class Narrative(
    val status: NarrativeStatus,
    val div: String): Element()

/**
 * The status of a resource narrative.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class NarrativeStatus(
    @JsonValue val text: String) {
    GENERATED("generated"),
    EXTENSIONS("extensions"),
    ADDITIONAL("additional"),
    EMPTY("empty")
}




/**
 *
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class NoteType(
    @JsonValue val text: String) {
    DISPLAY("display"),
    PRINT("print"),
    PRINTOPER("printoper")
}




/**
 * A request to supply a diet, formula feeding (enteral) or oral nutritional supplement to a patient/resident.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class NutritionOrder(
    val status: RequestStatus,
    val intent: RequestIntent,
    val patient: Reference,
    val dateTime: DateTimeType): DomainResource() {


    /**
     * Identifiers assigned to this order by the order sender or by the order receiver.
     */
    var identifier: List<Identifier>? = null



    /**
     * The URL pointing to a FHIR-defined protocol, guideline, orderset or other definition that is adhered to in whole or in part by this NutritionOrder.
     */
    var instantiatesCanonical: List<CanonicalType>? = null



    /**
     * The URL pointing to an externally maintained protocol, guideline, orderset or other definition that is adhered to in whole or in part by this NutritionOrder.
     */
    var instantiatesUri: List<UriType>? = null



    /**
     * The URL pointing to a protocol, guideline, orderset or other definition that is adhered to in whole or in part by this NutritionOrder.
     */
    var instantiates: List<UriType>? = null



    /**
     * An encounter that provides additional information about the healthcare context in which this request is made.
     */
    var encounter: Reference? = null

    @JsonIgnore
    var encounterTarget: Resource? = null

    /**
     * The practitioner that holds legal responsibility for ordering the diet, nutritional supplement, or formula feedings.
     */
    var orderer: Reference? = null

    @JsonIgnore
    var ordererTarget: Resource? = null

    /**
     * A link to a record of allergies or intolerances  which should be included in the nutrition order.
     */
    var allergyIntolerance: List<Reference>? = null

    @JsonIgnore
    var allergyIntoleranceTarget: List<Resource>? = null

    /**
     * This modifier is used to convey order-specific modifiers about the type of food that should be given. These can be derived from patient allergies, intolerances, or preferences such as Halal, Vegan or Kosher. This modifier applies to the entire nutrition order inclusive of the oral diet, nutritional supplements and enteral formula feedings.
     */
    var foodPreferenceModifier: List<CodeableConcept>? = null



    /**
     * This modifier is used to convey Order-specific modifier about the type of oral food or oral fluids that should not be given. These can be derived from patient allergies, intolerances, or preferences such as No Red Meat, No Soy or No Wheat or  Gluten-Free.  While it should not be necessary to repeat allergy or intolerance information captured in the referenced AllergyIntolerance resource in the excludeFoodModifier, this element may be used to convey additional specificity related to foods that should be eliminated from the patient’s diet for any reason.  This modifier applies to the entire nutrition order inclusive of the oral diet, nutritional supplements and enteral formula feedings.
     */
    var excludeFoodModifier: List<CodeableConcept>? = null



    /**
     * Diet given orally in contrast to enteral (tube) feeding.
     */
    var oralDiet: NutritionOrderOralDiet? = null



    /**
     * Oral nutritional products given in order to add further nutritional value to the patient's diet.
     */
    var supplement: List<NutritionOrderSupplement>? = null



    /**
     * Feeding provided through the gastrointestinal tract via a tube, catheter, or stoma that delivers nutrition distal to the oral cavity.
     */
    var enteralFormula: NutritionOrderEnteralFormula? = null



    /**
     * Comments made about the {{title}} by the requester, performer, subject or other participants.
     */
    var note: List<Annotation>? = null




}

/**
 * A request to supply a diet, formula feeding (enteral) or oral nutritional supplement to a patient/resident.
 */
class NutritionOrderAdministration: BackboneElement()
{


    /**
     * The time period and frequency at which the enteral formula should be delivered to the patient.
     */
    var schedule: Timing? = null



    /**
     * The volume of formula to provide to the patient per the specified administration schedule.
     */
    var quantity: Quantity? = null



    /**
     *
     */
    var rateQuantity: Quantity? = null



    /**
     *
     */
    var rateRatio: Ratio? = null




}

/**
 * A request to supply a diet, formula feeding (enteral) or oral nutritional supplement to a patient/resident.
 */
class NutritionOrderEnteralFormula: BackboneElement()
{


    /**
     * The type of enteral or infant formula such as an adult standard formula with fiber or a soy-based infant formula.
     */
    var baseFormulaType: CodeableConcept? = null



    /**
     * The product or brand name of the enteral or infant formula product such as "ACME Adult Standard Formula".
     */
    var baseFormulaProductName: StringType? = null



    /**
     * Indicates the type of modular component such as protein, carbohydrate, fat or fiber to be provided in addition to or mixed with the base formula.
     */
    var additiveType: CodeableConcept? = null



    /**
     * The product or brand name of the type of modular component to be added to the formula.
     */
    var additiveProductName: StringType? = null



    /**
     * The amount of energy (calories) that the formula should provide per specified volume, typically per mL or fluid oz.  For example, an infant may require a formula that provides 24 calories per fluid ounce or an adult may require an enteral formula that provides 1.5 calorie/mL.
     */
    var caloricDensity: Quantity? = null



    /**
     * The route or physiological path of administration into the patient's gastrointestinal  tract for purposes of providing the formula feeding, e.g. nasogastric tube.
     */
    var routeofAdministration: CodeableConcept? = null



    /**
     * Formula administration instructions as structured data.  This repeating structure allows for changing the administration rate or volume over time for both bolus and continuous feeding.  An example of this would be an instruction to increase the rate of continuous feeding every 2 hours.
     */
    var administration: List<NutritionOrderAdministration>? = null



    /**
     * The maximum total quantity of formula that may be administered to a subject over the period of time, e.g. 1440 mL over 24 hours.
     */
    var maxVolumeToDeliver: Quantity? = null



    /**
     * Free text formula administration, feeding instructions or additional instructions or information.
     */
    var administrationInstruction: StringType? = null




}

/**
 * A request to supply a diet, formula feeding (enteral) or oral nutritional supplement to a patient/resident.
 */
class NutritionOrderNutrient: BackboneElement()
{


    /**
     * The nutrient that is being modified such as carbohydrate or sodium.
     */
    var modifier: CodeableConcept? = null



    /**
     * The quantity of the specified nutrient to include in diet.
     */
    var amount: Quantity? = null




}

/**
 * A request to supply a diet, formula feeding (enteral) or oral nutritional supplement to a patient/resident.
 */
class NutritionOrderOralDiet: BackboneElement()
{


    /**
     * The kind of diet or dietary restriction such as fiber restricted diet or diabetic diet.
     */
    var type: List<CodeableConcept>? = null



    /**
     * The time period and frequency at which the diet should be given.  The diet should be given for the combination of all schedules if more than one schedule is present.
     */
    var schedule: List<Timing>? = null



    /**
     * Class that defines the quantity and type of nutrient modifications (for example carbohydrate, fiber or sodium) required for the oral diet.
     */
    var nutrient: List<NutritionOrderNutrient>? = null



    /**
     * Class that describes any texture modifications required for the patient to safely consume various types of solid foods.
     */
    var texture: List<NutritionOrderTexture>? = null



    /**
     * The required consistency (e.g. honey-thick, nectar-thick, thin, thickened.) of liquids or fluids served to the patient.
     */
    var fluidConsistencyType: List<CodeableConcept>? = null



    /**
     * Free text or additional instructions or information pertaining to the oral diet.
     */
    var instruction: StringType? = null




}

/**
 * A request to supply a diet, formula feeding (enteral) or oral nutritional supplement to a patient/resident.
 */
class NutritionOrderSupplement: BackboneElement()
{


    /**
     * The kind of nutritional supplement product required such as a high protein or pediatric clear liquid supplement.
     */
    var type: CodeableConcept? = null



    /**
     * The product or brand name of the nutritional supplement such as "Acme Protein Shake".
     */
    var productName: StringType? = null



    /**
     * The time period and frequency at which the supplement(s) should be given.  The supplement should be given for the combination of all schedules if more than one schedule is present.
     */
    var schedule: List<Timing>? = null



    /**
     * The amount of the nutritional supplement to be given.
     */
    var quantity: Quantity? = null



    /**
     * Free text or additional instructions or information pertaining to the oral supplement.
     */
    var instruction: StringType? = null




}

/**
 * A request to supply a diet, formula feeding (enteral) or oral nutritional supplement to a patient/resident.
 */
class NutritionOrderTexture: BackboneElement()
{


    /**
     * Any texture modifications (for solid foods) that should be made, e.g. easy to chew, chopped, ground, and pureed.
     */
    var modifier: CodeableConcept? = null



    /**
     * The food type(s) (e.g. meats, all foods)  that the texture modification applies to.  This could be all foods types.
     */
    var foodType: CodeableConcept? = null




}

/**
 * Measurements and simple assertions made about a patient, device or other subject.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class Observation(
    val status: ObservationStatus,
    val code: CodeableConcept): DomainResource() {


    /**
     * A unique identifier assigned to this observation.
     */
    var identifier: List<Identifier>? = null



    /**
     * A plan, proposal or order that is fulfilled in whole or in part by this event.  For example, a MedicationRequest may require a patient to have laboratory test performed before  it is dispensed.
     */
    var basedOn: List<Reference>? = null

    @JsonIgnore
    var basedOnTarget: List<Resource>? = null

    /**
     * A larger event of which this particular Observation is a component or step.  For example,  an observation as part of a procedure.
     */
    var partOf: List<Reference>? = null

    @JsonIgnore
    var partOfTarget: List<Resource>? = null

    /**
     * A code that classifies the general type of observation being made.
     */
    var category: List<CodeableConcept>? = null



    /**
     * The patient, or group of patients, location, or device this observation is about and into whose record the observation is placed. If the actual focus of the observation is different from the subject (or a sample of, part, or region of the subject), the `focus` element or the `code` itself specifies the actual focus of the observation.
     */
    var subject: Reference? = null

    @JsonIgnore
    var subjectTarget: Resource? = null

    /**
     * The actual focus of an observation when it is not the patient of record representing something or someone associated with the patient such as a spouse, parent, fetus, or donor. For example, fetus observations in a mother's record.  The focus of an observation could also be an existing condition,  an intervention, the subject's diet,  another observation of the subject,  or a body structure such as tumor or implanted device.   An example use case would be using the Observation resource to capture whether the mother is trained to change her child's tracheostomy tube. In this example, the child is the patient of record and the mother is the focus.
     */
    var focus: List<Reference>? = null

    @JsonIgnore
    var focusTarget: List<Resource>? = null

    /**
     * The healthcare event  (e.g. a patient and healthcare provider interaction) during which this observation is made.
     */
    var encounter: Reference? = null

    @JsonIgnore
    var encounterTarget: Resource? = null

    /**
     *
     */
    var effectiveDateTime: DateTimeType? = null



    /**
     *
     */
    var effectivePeriod: Period? = null



    /**
     *
     */
    var effectiveTiming: Timing? = null



    /**
     *
     */
    var effectiveInstant: InstantType? = null



    /**
     * The date and time this version of the observation was made available to providers, typically after the results have been reviewed and verified.
     */
    var issued: InstantType? = null



    /**
     * Who was responsible for asserting the observed value as "true".
     */
    var performer: List<Reference>? = null

    @JsonIgnore
    var performerTarget: List<Resource>? = null

    /**
     *
     */
    var valueQuantity: Quantity? = null



    /**
     *
     */
    var valueCodeableConcept: CodeableConcept? = null



    /**
     *
     */
    var valueString: StringType? = null



    /**
     *
     */
    var valueBoolean: BooleanType? = null



    /**
     *
     */
    var valueInteger: IntegerType? = null



    /**
     *
     */
    var valueRange: Range? = null



    /**
     *
     */
    var valueRatio: Ratio? = null



    /**
     *
     */
    var valueSampledData: SampledData? = null



    /**
     *
     */
    var valueTime: TimeType? = null



    /**
     *
     */
    var valueDateTime: DateTimeType? = null



    /**
     *
     */
    var valuePeriod: Period? = null



    /**
     * Provides a reason why the expected value in the element Observation.value[x] is missing.
     */
    var dataAbsentReason: CodeableConcept? = null



    /**
     * A categorical assessment of an observation value.  For example, high, low, normal.
     */
    var interpretation: List<CodeableConcept>? = null



    /**
     * Comments about the observation or the results.
     */
    var note: List<Annotation>? = null



    /**
     * Indicates the site on the subject's body where the observation was made (i.e. the target site).
     */
    var bodySite: CodeableConcept? = null



    /**
     * Indicates the mechanism used to perform the observation.
     */
    var method: CodeableConcept? = null



    /**
     * The specimen that was used when this observation was made.
     */
    var specimen: Reference? = null

    @JsonIgnore
    var specimenTarget: Resource? = null

    /**
     * The device used to generate the observation data.
     */
    var device: Reference? = null

    @JsonIgnore
    var deviceTarget: Resource? = null

    /**
     * Guidance on how to interpret the value by comparison to a normal or recommended range.  Multiple reference ranges are interpreted as an "OR".   In other words, to represent two distinct target populations, two `referenceRange` elements would be used.
     */
    var referenceRange: List<ObservationReferenceRange>? = null



    /**
     * This observation is a group observation (e.g. a battery, a panel of tests, a set of vital sign measurements) that includes the target as a member of the group.
     */
    var hasMember: List<Reference>? = null

    @JsonIgnore
    var hasMemberTarget: List<Resource>? = null

    /**
     * The target resource that represents a measurement from which this observation value is derived. For example, a calculated anion gap or a fetal measurement based on an ultrasound image.
     */
    var derivedFrom: List<Reference>? = null

    @JsonIgnore
    var derivedFromTarget: List<Resource>? = null

    /**
     * Some observations have multiple component observations.  These component observations are expressed as separate code value pairs that share the same attributes.  Examples include systolic and diastolic component observations for blood pressure measurement and multiple component observations for genetics observations.
     */
    var component: List<ObservationComponent>? = null




}

/**
 * Measurements and simple assertions made about a patient, device or other subject.
 */
class ObservationComponent(
    val code: CodeableConcept): BackboneElement() {


    /**
     *
     */
    var valueQuantity: Quantity? = null



    /**
     *
     */
    var valueCodeableConcept: CodeableConcept? = null



    /**
     *
     */
    var valueString: StringType? = null



    /**
     *
     */
    var valueBoolean: BooleanType? = null



    /**
     *
     */
    var valueInteger: IntegerType? = null



    /**
     *
     */
    var valueRange: Range? = null



    /**
     *
     */
    var valueRatio: Ratio? = null



    /**
     *
     */
    var valueSampledData: SampledData? = null



    /**
     *
     */
    var valueTime: TimeType? = null



    /**
     *
     */
    var valueDateTime: DateTimeType? = null



    /**
     *
     */
    var valuePeriod: Period? = null



    /**
     * Provides a reason why the expected value in the element Observation.component.value[x] is missing.
     */
    var dataAbsentReason: CodeableConcept? = null



    /**
     * A categorical assessment of an observation value.  For example, high, low, normal.
     */
    var interpretation: List<CodeableConcept>? = null



    /**
     * Guidance on how to interpret the value by comparison to a normal or recommended range.
     */
    var referenceRange: List<ObservationReferenceRange>? = null




}

/**
 * Permitted data type for observation value.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class ObservationDataType(
    @JsonValue val text: String) {
    QUANTITY("Quantity"),
    CODEABLE_CONCEPT("CodeableConcept"),
    STRING("string"),
    BOOLEAN("boolean"),
    INTEGER("integer"),
    RANGE("Range"),
    RATIO("Ratio"),
    SAMPLED_DATA("SampledData"),
    TIME("time"),
    DATE_TIME("dateTime"),
    PERIOD("Period")
}




/**
 * Set of definitional characteristics for a kind of observation or measurement produced or consumed by an orderable health care service.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class ObservationDefinition(
    val code: CodeableConcept): DomainResource() {


    /**
     * A code that classifies the general type of observation.
     */
    var category: List<CodeableConcept>? = null



    /**
     * A unique identifier assigned to this ObservationDefinition artifact.
     */
    var identifier: List<Identifier>? = null



    /**
     * The data types allowed for the value element of the instance observations conforming to this ObservationDefinition.
     */
    var permittedDataType: List<ObservationDataType>? = null



    /**
     * Multiple results allowed for observations conforming to this ObservationDefinition.
     */
    var multipleResultsAllowed: BooleanType? = null



    /**
     * The method or technique used to perform the observation.
     */
    var method: CodeableConcept? = null



    /**
     * The preferred name to be used when reporting the results of observations conforming to this ObservationDefinition.
     */
    var preferredReportName: StringType? = null



    /**
     * Characteristics for quantitative results of this observation.
     */
    var quantitativeDetails: ObservationDefinitionQuantitativeDetails? = null



    /**
     * Multiple  ranges of results qualified by different contexts for ordinal or continuous observations conforming to this ObservationDefinition.
     */
    var qualifiedInterval: List<ObservationDefinitionQualifiedInterval>? = null



    /**
     * The set of valid coded results for the observations  conforming to this ObservationDefinition.
     */
    var validCodedValueSet: Reference? = null

    @JsonIgnore
    var validCodedValueSetTarget: Resource? = null

    /**
     * The set of normal coded results for the observations conforming to this ObservationDefinition.
     */
    var normalCodedValueSet: Reference? = null

    @JsonIgnore
    var normalCodedValueSetTarget: Resource? = null

    /**
     * The set of abnormal coded results for the observation conforming to this ObservationDefinition.
     */
    var abnormalCodedValueSet: Reference? = null

    @JsonIgnore
    var abnormalCodedValueSetTarget: Resource? = null

    /**
     * The set of critical coded results for the observation conforming to this ObservationDefinition.
     */
    var criticalCodedValueSet: Reference? = null

    @JsonIgnore
    var criticalCodedValueSetTarget: Resource? = null


}

/**
 * Set of definitional characteristics for a kind of observation or measurement produced or consumed by an orderable health care service.
 */
class ObservationDefinitionQualifiedInterval: BackboneElement()
{


    /**
     * The category of interval of values for continuous or ordinal observations conforming to this ObservationDefinition.
     */
    var category: ObservationRangeCategory? = null



    /**
     * The low and high values determining the interval. There may be only one of the two.
     */
    var range: Range? = null



    /**
     * Codes to indicate the health context the range applies to. For example, the normal or therapeutic range.
     */
    var context: CodeableConcept? = null



    /**
     * Codes to indicate the target population this reference range applies to.
     */
    var appliesTo: List<CodeableConcept>? = null



    /**
     * Sex of the population the range applies to.
     */
    var gender: AdministrativeGender? = null



    /**
     * The age at which this reference range is applicable. This is a neonatal age (e.g. number of weeks at term) if the meaning says so.
     */
    var age: Range? = null



    /**
     * The gestational age to which this reference range is applicable, in the context of pregnancy.
     */
    var gestationalAge: Range? = null



    /**
     * Text based condition for which the reference range is valid.
     */
    var condition: StringType? = null




}

/**
 * Set of definitional characteristics for a kind of observation or measurement produced or consumed by an orderable health care service.
 */
class ObservationDefinitionQuantitativeDetails: BackboneElement()
{


    /**
     * Customary unit used to report quantitative results of observations conforming to this ObservationDefinition.
     */
    var customaryUnit: CodeableConcept? = null



    /**
     * SI unit used to report quantitative results of observations conforming to this ObservationDefinition.
     */
    var unit: CodeableConcept? = null



    /**
     * Factor for converting value expressed with SI unit to value expressed with customary unit.
     */
    var conversionFactor: DecimalType? = null



    /**
     * Number of digits after decimal separator when the results of such observations are of type Quantity.
     */
    var decimalPrecision: IntegerType? = null




}

/**
 * Codes identifying the category of observation range.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class ObservationRangeCategory(
    @JsonValue val text: String) {
    REFERENCE("reference"),
    CRITICAL("critical"),
    ABSOLUTE("absolute")
}




/**
 * Measurements and simple assertions made about a patient, device or other subject.
 */
class ObservationReferenceRange: BackboneElement()
{


    /**
     * The value of the low bound of the reference range.  The low bound of the reference range endpoint is inclusive of the value (e.g.  reference range is >=5 - <=9). If the low bound is omitted,  it is assumed to be meaningless (e.g. reference range is <=2.3).
     */
    var low: Quantity? = null



    /**
     * The value of the high bound of the reference range.  The high bound of the reference range endpoint is inclusive of the value (e.g.  reference range is >=5 - <=9). If the high bound is omitted,  it is assumed to be meaningless (e.g. reference range is >= 2.3).
     */
    var high: Quantity? = null



    /**
     * Codes to indicate the what part of the targeted reference population it applies to. For example, the normal or therapeutic range.
     */
    var type: CodeableConcept? = null



    /**
     * Codes to indicate the target population this reference range applies to.  For example, a reference range may be based on the normal population or a particular sex or race.  Multiple `appliesTo`  are interpreted as an "AND" of the target populations.  For example, to represent a target population of African American females, both a code of female and a code for African American would be used.
     */
    var appliesTo: List<CodeableConcept>? = null



    /**
     * The age at which this reference range is applicable. This is a neonatal age (e.g. number of weeks at term) if the meaning says so.
     */
    var age: Range? = null



    /**
     * Text based reference range in an observation which may be used when a quantitative range is not appropriate for an observation.  An example would be a reference value of "Negative" or a list or table of "normals".
     */
    var text: StringType? = null




}

/**
 * Indicates the status of the identified issue.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class ObservationStatus(
    @JsonValue val text: String) {
    REGISTERED("registered"),
    PRELIMINARY("preliminary"),
    FINAL("final"),
    AMENDED("amended"),
    CORRECTED("corrected"),
    CANCELLED("cancelled"),
    ENTERED_IN_ERROR("entered-in-error"),
    UNKNOWN("unknown")
}




/**
 * An OID represented as a URI
 * RFC 3001. See also ISO/IEC 8824:1990 €
 * If the element is present, it must have either a @value, an @id referenced from the Narrative, or extensions
 */
data class OidType(@JsonValue val value: String) {
    companion object {
        @JvmStatic
        @JsonCreator
        fun create(value: String) = OidType(value)
    }
}



/**
 * A formal computable definition of an operation (on the RESTful interface) or a named query (using the search interaction).
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class OperationDefinition(
    val name: StringType,
    val status: PublicationStatus,
    val kind: OperationKind,
    val code: CodeType,
    val system: BooleanType,
    val type: BooleanType,
    val instance: BooleanType): DomainResource() {


    /**
     * An absolute URI that is used to identify this operation definition when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which at which an authoritative instance of this operation definition is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the operation definition is stored on different servers.
     */
    var url: UriType? = null



    /**
     * The identifier that is used to identify this version of the operation definition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the operation definition author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
     */
    var version: StringType? = null



    /**
     * A short, descriptive, user-friendly title for the operation definition.
     */
    var title: StringType? = null



    /**
     * A Boolean value to indicate that this operation definition is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
     */
    var experimental: BooleanType? = null



    /**
     * The date  (and optionally time) when the operation definition was published. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the operation definition changes.
     */
    var date: DateTimeType? = null



    /**
     * The name of the organization or individual that published the operation definition.
     */
    var publisher: StringType? = null



    /**
     * Contact details to assist a user in finding and communicating with the publisher.
     */
    var contact: List<ContactDetail>? = null



    /**
     * A free text natural language description of the operation definition from a consumer's perspective.
     */
    var description: MarkdownType? = null



    /**
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate operation definition instances.
     */
    var useContext: List<UsageContext>? = null



    /**
     * A legal or geographic region in which the operation definition is intended to be used.
     */
    var jurisdiction: List<CodeableConcept>? = null



    /**
     * Explanation of why this operation definition is needed and why it has been designed as it has.
     */
    var purpose: MarkdownType? = null



    /**
     * Whether the operation affects state. Side effects such as producing audit trail entries do not count as 'affecting  state'.
     */
    var affectsState: BooleanType? = null



    /**
     * Additional information about how to use this operation or named query.
     */
    var comment: MarkdownType? = null



    /**
     * Indicates that this operation definition is a constraining profile on the base.
     */
    var base: CanonicalType? = null



    /**
     * The types on which this operation can be executed.
     */
    var resource: List<CodeType>? = null



    /**
     * Additional validation information for the in parameters - a single profile that covers all the parameters. The profile is a constraint on the parameters resource as a whole.
     */
    var inputProfile: CanonicalType? = null



    /**
     * Additional validation information for the out parameters - a single profile that covers all the parameters. The profile is a constraint on the parameters resource.
     */
    var outputProfile: CanonicalType? = null



    /**
     * The parameters for the operation/query.
     */
    var parameter: List<OperationDefinitionParameter>? = null



    /**
     * Defines an appropriate combination of parameters to use when invoking this operation, to help code generators when generating overloaded parameter sets for this operation.
     */
    var overload: List<OperationDefinitionOverload>? = null




}

/**
 * A formal computable definition of an operation (on the RESTful interface) or a named query (using the search interaction).
 */
class OperationDefinitionBinding(
    val strength: BindingStrength,
    val valueSet: CanonicalType): BackboneElement()

/**
 * A formal computable definition of an operation (on the RESTful interface) or a named query (using the search interaction).
 */
class OperationDefinitionOverload: BackboneElement()
{


    /**
     * Name of parameter to include in overload.
     */
    var parameterName: List<StringType>? = null



    /**
     * Comments to go on overload.
     */
    var comment: StringType? = null




}

/**
 * A formal computable definition of an operation (on the RESTful interface) or a named query (using the search interaction).
 */
class OperationDefinitionParameter(
    val name: CodeType,
    val use: OperationParameterUse,
    val min: IntegerType,
    val max: StringType): BackboneElement() {


    /**
     * Describes the meaning or use of this parameter.
     */
    var documentation: StringType? = null



    /**
     * The type for this parameter.
     */
    var type: CodeType? = null



    /**
     * Used when the type is "Reference" or "canonical", and identifies a profile structure or implementation Guide that applies to the target of the reference this parameter refers to. If any profiles are specified, then the content must conform to at least one of them. The URL can be a local reference - to a contained StructureDefinition, or a reference to another StructureDefinition or Implementation Guide by a canonical URL. When an implementation guide is specified, the target resource SHALL conform to at least one profile defined in the implementation guide.
     */
    var targetProfile: List<CanonicalType>? = null



    /**
     * How the parameter is understood as a search parameter. This is only used if the parameter type is 'string'.
     */
    var searchType: SearchParamType? = null



    /**
     * Binds to a value set if this parameter is coded (code, Coding, CodeableConcept).
     */
    var binding: OperationDefinitionBinding? = null



    /**
     * Identifies other resource parameters within the operation invocation that are expected to resolve to this resource.
     */
    var referencedFrom: List<OperationDefinitionReferencedFrom>? = null



    /**
     * The parts of a nested Parameter.
     */
    var part: List<OperationDefinitionParameter>? = null




}

/**
 * A formal computable definition of an operation (on the RESTful interface) or a named query (using the search interaction).
 */
class OperationDefinitionReferencedFrom(
    val source: StringType): BackboneElement() {


    /**
     * The id of the element in the referencing resource that is expected to resolve to this resource.
     */
    var sourceId: StringType? = null




}

/**
 * Whether an operation is a normal operation or a query.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class OperationKind(
    @JsonValue val text: String) {
    OPERATION("operation"),
    QUERY("query")
}




/**
 * A collection of error, warning, or information messages that result from a system action.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class OperationOutcome(
    val issue: List<OperationOutcomeIssue>): DomainResource()

/**
 * A collection of error, warning, or information messages that result from a system action.
 */
class OperationOutcomeIssue(
    val severity: IssueSeverity,
    val code: IssueType): BackboneElement() {


    /**
     * Additional details about the error. This may be a text description of the error or a system code that identifies the error.
     */
    var details: CodeableConcept? = null



    /**
     * Additional diagnostic information about the issue.
     */
    var diagnostics: StringType? = null



    /**
     * This element is deprecated because it is XML specific. It is replaced by issue.expression, which is format independent, and simpler to parse.
     *
     * For resource issues, this will be a simple XPath limited to element names, repetition indicators and the default child accessor that identifies one of the elements in the resource that caused this issue to be raised.  For HTTP errors, will be "http." + the parameter name.
     */
    var location: List<StringType>? = null



    /**
     * A [simple subset of FHIRPath](fhirpath.html#simple) limited to element names, repetition indicators and the default child accessor that identifies one of the elements in the resource that caused this issue to be raised.
     */
    var expression: List<StringType>? = null




}

/**
 * Whether an operation parameter is an input or an output parameter.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class OperationParameterUse(
    @JsonValue val text: String) {
    IN("in"),
    OUT("out")
}




/**
 * A formally or informally recognized grouping of people or organizations formed for the purpose of achieving some form of collective action.  Includes companies, institutions, corporations, departments, community groups, healthcare practice groups, payer/insurer, etc.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class Organization: DomainResource()
{


    /**
     * Identifier for the organization that is used to identify the organization across multiple disparate systems.
     */
    var identifier: List<Identifier>? = null



    /**
     * Whether the organization's record is still in active use.
     */
    var active: BooleanType? = null



    /**
     * The kind(s) of organization that this is.
     */
    var type: List<CodeableConcept>? = null



    /**
     * A name associated with the organization.
     */
    var name: StringType? = null



    /**
     * A list of alternate names that the organization is known as, or was known as in the past.
     */
    var alias: List<StringType>? = null



    /**
     * A contact detail for the organization.
     */
    var telecom: List<ContactPoint>? = null



    /**
     * An address for the organization.
     */
    var address: List<Address>? = null



    /**
     * The organization of which this organization forms a part.
     */
    var partOf: Reference? = null

    @JsonIgnore
    var partOfTarget: Resource? = null

    /**
     * Contact for the organization for a certain purpose.
     */
    var contact: List<OrganizationContact>? = null



    /**
     * Technical endpoints providing access to services operated for the organization.
     */
    var endpoint: List<Reference>? = null

    @JsonIgnore
    var endpointTarget: List<Resource>? = null


}

/**
 * Defines an affiliation/assotiation/relationship between 2 distinct oganizations, that is not a part-of relationship/sub-division relationship.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class OrganizationAffiliation: DomainResource()
{


    /**
     * Business identifiers that are specific to this role.
     */
    var identifier: List<Identifier>? = null



    /**
     * Whether this organization affiliation record is in active use.
     */
    var active: BooleanType? = null



    /**
     * The period during which the participatingOrganization is affiliated with the primary organization.
     */
    var period: Period? = null



    /**
     * Organization where the role is available (primary organization/has members).
     */
    var organization: Reference? = null

    @JsonIgnore
    var organizationTarget: Resource? = null

    /**
     * The Participating Organization provides/performs the role(s) defined by the code to the Primary Organization (e.g. providing services or is a member of).
     */
    var participatingOrganization: Reference? = null

    @JsonIgnore
    var participatingOrganizationTarget: Resource? = null

    /**
     * Health insurance provider network in which the participatingOrganization provides the role's services (if defined) at the indicated locations (if defined).
     */
    var network: List<Reference>? = null

    @JsonIgnore
    var networkTarget: List<Resource>? = null

    /**
     * Definition of the role the participatingOrganization plays in the association.
     */
    var code: List<CodeableConcept>? = null



    /**
     * Specific specialty of the participatingOrganization in the context of the role.
     */
    var specialty: List<CodeableConcept>? = null



    /**
     * The location(s) at which the role occurs.
     */
    var location: List<Reference>? = null

    @JsonIgnore
    var locationTarget: List<Resource>? = null

    /**
     * Healthcare services provided through the role.
     */
    var healthcareService: List<Reference>? = null

    @JsonIgnore
    var healthcareServiceTarget: List<Resource>? = null

    /**
     * Contact details at the participatingOrganization relevant to this Affiliation.
     */
    var telecom: List<ContactPoint>? = null



    /**
     * Technical endpoints providing access to services operated for this role.
     */
    var endpoint: List<Reference>? = null

    @JsonIgnore
    var endpointTarget: List<Resource>? = null


}

/**
 * A formally or informally recognized grouping of people or organizations formed for the purpose of achieving some form of collective action.  Includes companies, institutions, corporations, departments, community groups, healthcare practice groups, payer/insurer, etc.
 */
class OrganizationContact: BackboneElement()
{


    /**
     * Indicates a purpose for which the contact can be reached.
     */
    var purpose: CodeableConcept? = null



    /**
     * A name associated with the contact.
     */
    var name: HumanName? = null



    /**
     * A contact detail (e.g. a telephone number or an email address) by which the party may be contacted.
     */
    var telecom: List<ContactPoint>? = null



    /**
     * Visiting or postal addresses for the contact.
     */
    var address: Address? = null




}

/**
 * Type for orientation.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class OrientationType(
    @JsonValue val text: String) {
    SENSE("sense"),
    ANTISENSE("antisense")
}




/**
 * The parameters to the module. This collection specifies both the input and output parameters. Input parameters are provided by the caller as part of the $evaluate operation. Output parameters are included in the GuidanceResponse.
 * If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions
 */
class ParameterDefinition(
    val use: CodeType,
    val type: CodeType): Element() {


    /**
     * The name of the parameter used to allow access to the value of the parameter in evaluation contexts.
     */
    var name: CodeType? = null



    /**
     * The minimum number of times this parameter SHALL appear in the request or response.
     */
    var min: IntegerType? = null



    /**
     * The maximum number of times this element is permitted to appear in the request or response.
     */
    var max: StringType? = null



    /**
     * A brief discussion of what the parameter is for and how it is used by the module.
     */
    var documentation: StringType? = null



    /**
     * If specified, this indicates a profile that the input data must conform to, or that the output data will conform to.
     */
    var profile: CanonicalType? = null




}

/**
 * This resource is a non-persisted resource used to pass information into and back from an [operation](operations.html). It has no other use, and there is no RESTful endpoint associated with it.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class Parameters: Resource()
{


    /**
     * A parameter passed to or received from the operation.
     */
    var parameter: List<ParametersParameter>? = null




}

/**
 * This resource is a non-persisted resource used to pass information into and back from an [operation](operations.html). It has no other use, and there is no RESTful endpoint associated with it.
 */
class ParametersParameter(
    val name: StringType): BackboneElement() {


    /**
     *
     */
    var valueBase64Binary: Base64BinaryType? = null



    /**
     *
     */
    var valueBoolean: BooleanType? = null



    /**
     *
     */
    var valueCanonical: CanonicalType? = null



    /**
     *
     */
    var valueCode: CodeType? = null



    /**
     *
     */
    var valueDate: DateType? = null



    /**
     *
     */
    var valueDateTime: DateTimeType? = null



    /**
     *
     */
    var valueDecimal: DecimalType? = null



    /**
     *
     */
    var valueId: IdType? = null



    /**
     *
     */
    var valueInstant: InstantType? = null



    /**
     *
     */
    var valueInteger: IntegerType? = null



    /**
     *
     */
    var valueMarkdown: MarkdownType? = null



    /**
     *
     */
    var valueOid: OidType? = null



    /**
     *
     */
    var valuePositiveInt: PositiveIntType? = null



    /**
     *
     */
    var valueString: StringType? = null



    /**
     *
     */
    var valueTime: TimeType? = null



    /**
     *
     */
    var valueUnsignedInt: UnsignedIntType? = null



    /**
     *
     */
    var valueUri: UriType? = null



    /**
     *
     */
    var valueUrl: UrlType? = null



    /**
     *
     */
    var valueUuid: UuidType? = null



    /**
     *
     */
    var valueAddress: Address? = null



    /**
     *
     */
    var valueAge: Age? = null



    /**
     *
     */
    var valueAnnotation: Annotation? = null



    /**
     *
     */
    var valueAttachment: Attachment? = null



    /**
     *
     */
    var valueCodeableConcept: CodeableConcept? = null



    /**
     *
     */
    var valueCoding: Coding? = null



    /**
     *
     */
    var valueContactPoint: ContactPoint? = null



    /**
     *
     */
    var valueCount: Count? = null



    /**
     *
     */
    var valueDistance: Distance? = null



    /**
     *
     */
    var valueDuration: Duration? = null



    /**
     *
     */
    var valueHumanName: HumanName? = null



    /**
     *
     */
    var valueIdentifier: Identifier? = null



    /**
     *
     */
    var valueMoney: Money? = null



    /**
     *
     */
    var valuePeriod: Period? = null



    /**
     *
     */
    var valueQuantity: Quantity? = null



    /**
     *
     */
    var valueRange: Range? = null



    /**
     *
     */
    var valueRatio: Ratio? = null



    /**
     *
     */
    var valueReference: Reference? = null

    @JsonIgnore
    var valueReferenceTarget: Resource? = null

    /**
     *
     */
    var valueSampledData: SampledData? = null



    /**
     *
     */
    var valueSignature: Signature? = null



    /**
     *
     */
    var valueTiming: Timing? = null



    /**
     *
     */
    var valueContactDetail: ContactDetail? = null



    /**
     *
     */
    var valueContributor: Contributor? = null



    /**
     *
     */
    var valueDataRequirement: DataRequirement? = null



    /**
     *
     */
    var valueExpression: Expression? = null



    /**
     *
     */
    var valueParameterDefinition: ParameterDefinition? = null



    /**
     *
     */
    var valueRelatedArtifact: RelatedArtifact? = null



    /**
     *
     */
    var valueTriggerDefinition: TriggerDefinition? = null



    /**
     *
     */
    var valueUsageContext: UsageContext? = null



    /**
     *
     */
    var valueDosage: Dosage? = null



    /**
     *
     */
    var valueMeta: Meta? = null



    /**
     * If the parameter is a whole resource.
     */
    var resource: Resource? = null



    /**
     * A named part of a multi-part parameter.
     */
    var part: List<ParametersParameter>? = null




}

/**
 * Is the Participant required to attend the appointment.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class ParticipantRequired(
    @JsonValue val text: String) {
    REQUIRED("required"),
    OPTIONAL("optional"),
    INFORMATION_ONLY("information-only")
}




/**
 * The Participation status of an appointment.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class ParticipationStatus(
    @JsonValue val text: String) {
    ACCEPTED("accepted"),
    DECLINED("declined"),
    TENTATIVE("tentative"),
    NEEDS_ACTION("needs-action")
}




/**
 * Demographics and other administrative information about an individual or animal receiving care or other health-related services.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class Patient: DomainResource()
{


    /**
     * An identifier for this patient.
     */
    var identifier: List<Identifier>? = null



    /**
     * Whether this patient record is in active use.
     * Many systems use this property to mark as non-current patients, such as those that have not been seen for a period of time based on an organization's business rules.
     *
     * It is often used to filter patient lists to exclude inactive patients
     *
     * Deceased patients may also be marked as inactive for the same reasons, but may be active for some time after death.
     */
    var active: BooleanType? = null



    /**
     * A name associated with the individual.
     */
    var name: List<HumanName>? = null



    /**
     * A contact detail (e.g. a telephone number or an email address) by which the individual may be contacted.
     */
    var telecom: List<ContactPoint>? = null



    /**
     * Administrative Gender - the gender that the patient is considered to have for administration and record keeping purposes.
     */
    var gender: AdministrativeGender? = null



    /**
     * The date of birth for the individual.
     */
    var birthDate: DateType? = null



    /**
     *
     */
    var deceasedBoolean: BooleanType? = null



    /**
     *
     */
    var deceasedDateTime: DateTimeType? = null



    /**
     * An address for the individual.
     */
    var address: List<Address>? = null



    /**
     * This field contains a patient's most recent marital (civil) status.
     */
    var maritalStatus: CodeableConcept? = null



    /**
     *
     */
    var multipleBirthBoolean: BooleanType? = null



    /**
     *
     */
    var multipleBirthInteger: IntegerType? = null



    /**
     * Image of the patient.
     */
    var photo: List<Attachment>? = null



    /**
     * A contact party (e.g. guardian, partner, friend) for the patient.
     */
    var contact: List<PatientContact>? = null



    /**
     * A language which may be used to communicate with the patient about his or her health.
     */
    var communication: List<PatientCommunication>? = null



    /**
     * Patient's nominated care provider.
     */
    var generalPractitioner: List<Reference>? = null

    @JsonIgnore
    var generalPractitionerTarget: List<Resource>? = null

    /**
     * Organization that is the custodian of the patient record.
     */
    var managingOrganization: Reference? = null

    @JsonIgnore
    var managingOrganizationTarget: Resource? = null

    /**
     * Link to another patient resource that concerns the same actual patient.
     */
    var link: List<PatientLink>? = null




}

/**
 * Demographics and other administrative information about an individual or animal receiving care or other health-related services.
 */
class PatientCommunication(
    val language: CodeableConcept): BackboneElement() {


    /**
     * Indicates whether or not the patient prefers this language (over other languages he masters up a certain level).
     */
    var preferred: BooleanType? = null




}

/**
 * Demographics and other administrative information about an individual or animal receiving care or other health-related services.
 */
class PatientContact: BackboneElement()
{


    /**
     * The nature of the relationship between the patient and the contact person.
     */
    var relationship: List<CodeableConcept>? = null



    /**
     * A name associated with the contact person.
     */
    var name: HumanName? = null



    /**
     * A contact detail for the person, e.g. a telephone number or an email address.
     */
    var telecom: List<ContactPoint>? = null



    /**
     * Address for the contact person.
     */
    var address: Address? = null



    /**
     * Administrative Gender - the gender that the contact person is considered to have for administration and record keeping purposes.
     */
    var gender: AdministrativeGender? = null



    /**
     * Organization on behalf of which the contact is acting or for which the contact is working.
     */
    var organization: Reference? = null

    @JsonIgnore
    var organizationTarget: Resource? = null

    /**
     * The period during which this contact person or organization is valid to be contacted relating to this patient.
     */
    var period: Period? = null




}

/**
 * Demographics and other administrative information about an individual or animal receiving care or other health-related services.
 */
class PatientLink(
    val other: Reference,
    val type: LinkType): BackboneElement()

/**
 * This resource provides the status of the payment for goods and services rendered, and the request and response resource references.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class PaymentNotice(
    val status: FinancialResourceStatusCodes,
    val created: DateTimeType,
    val payment: Reference,
    val recipient: Reference,
    val amount: Money): DomainResource() {


    /**
     * A unique identifier assigned to this payment notice.
     */
    var identifier: List<Identifier>? = null



    /**
     * Reference of resource for which payment is being made.
     */
    var request: Reference? = null

    @JsonIgnore
    var requestTarget: Resource? = null

    /**
     * Reference of response to resource for which payment is being made.
     */
    var response: Reference? = null

    @JsonIgnore
    var responseTarget: Resource? = null

    /**
     * The practitioner who is responsible for the services rendered to the patient.
     */
    var provider: Reference? = null

    @JsonIgnore
    var providerTarget: Resource? = null

    /**
     * The date when the above payment action occurred.
     */
    var paymentDate: DateType? = null



    /**
     * The party who will receive or has received payment that is the subject of this notification.
     */
    var payee: Reference? = null

    @JsonIgnore
    var payeeTarget: Resource? = null

    /**
     * A code indicating whether payment has been sent or cleared.
     */
    var paymentStatus: CodeableConcept? = null




}

/**
 * This resource provides the details including amount of a payment and allocates the payment items being paid.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class PaymentReconciliation(
    val status: FinancialResourceStatusCodes,
    val created: DateTimeType,
    val paymentDate: DateType,
    val paymentAmount: Money): DomainResource() {


    /**
     * A unique identifier assigned to this payment reconciliation.
     */
    var identifier: List<Identifier>? = null



    /**
     * The period of time for which payments have been gathered into this bulk payment for settlement.
     */
    var period: Period? = null



    /**
     * The party who generated the payment.
     */
    var paymentIssuer: Reference? = null

    @JsonIgnore
    var paymentIssuerTarget: Resource? = null

    /**
     * Original request resource reference.
     */
    var request: Reference? = null

    @JsonIgnore
    var requestTarget: Resource? = null

    /**
     * The practitioner who is responsible for the services rendered to the patient.
     */
    var requestor: Reference? = null

    @JsonIgnore
    var requestorTarget: Resource? = null

    /**
     * The outcome of a request for a reconciliation.
     */
    var outcome: RemittanceOutcome? = null



    /**
     * A human readable description of the status of the request for the reconciliation.
     */
    var disposition: StringType? = null



    /**
     * Issuer's unique identifier for the payment instrument.
     */
    var paymentIdentifier: Identifier? = null



    /**
     * Distribution of the payment amount for a previously acknowledged payable.
     */
    var detail: List<PaymentReconciliationDetail>? = null



    /**
     * A code for the form to be used for printing the content.
     */
    var formCode: CodeableConcept? = null



    /**
     * A note that describes or explains the processing in a human readable form.
     */
    var processNote: List<PaymentReconciliationProcessNote>? = null




}

/**
 * This resource provides the details including amount of a payment and allocates the payment items being paid.
 */
class PaymentReconciliationDetail(
    val type: CodeableConcept): BackboneElement() {


    /**
     * Unique identifier for the current payment item for the referenced payable.
     */
    var identifier: Identifier? = null



    /**
     * Unique identifier for the prior payment item for the referenced payable.
     */
    var predecessor: Identifier? = null



    /**
     * A resource, such as a Claim, the evaluation of which could lead to payment.
     */
    var request: Reference? = null

    @JsonIgnore
    var requestTarget: Resource? = null

    /**
     * The party which submitted the claim or financial transaction.
     */
    var submitter: Reference? = null

    @JsonIgnore
    var submitterTarget: Resource? = null

    /**
     * A resource, such as a ClaimResponse, which contains a commitment to payment.
     */
    var response: Reference? = null

    @JsonIgnore
    var responseTarget: Resource? = null

    /**
     * The date from the response resource containing a commitment to pay.
     */
    var date: DateType? = null



    /**
     * A reference to the individual who is responsible for inquiries regarding the response and its payment.
     */
    var responsible: Reference? = null

    @JsonIgnore
    var responsibleTarget: Resource? = null

    /**
     * The party which is receiving the payment.
     */
    var payee: Reference? = null

    @JsonIgnore
    var payeeTarget: Resource? = null

    /**
     * The monetary amount allocated from the total payment to the payable.
     */
    var amount: Money? = null




}

/**
 * This resource provides the details including amount of a payment and allocates the payment items being paid.
 */
class PaymentReconciliationProcessNote: BackboneElement()
{


    /**
     * The business purpose of the note text.
     */
    var type: NoteType? = null



    /**
     * The explanation or description associated with the processing.
     */
    var text: StringType? = null




}

/**
 * A time period defined by a start and end date and optionally time.
 * If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions
 */
class Period: Element()
{


    /**
     * The start of the period. The boundary is inclusive.
     */
    var start: DateTimeType? = null



    /**
     * The end of the period. If the end of the period is missing, it means no end was known or planned at the time the instance was created. The start may be in the past, and the end date in the future, which means that period is expected/planned to end at that time.
     */
    var end: DateTimeType? = null




}

/**
 * Demographics and administrative information about a person independent of a specific health-related context.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class Person: DomainResource()
{


    /**
     * Identifier for a person within a particular scope.
     */
    var identifier: List<Identifier>? = null



    /**
     * A name associated with the person.
     */
    var name: List<HumanName>? = null



    /**
     * A contact detail for the person, e.g. a telephone number or an email address.
     */
    var telecom: List<ContactPoint>? = null



    /**
     * Administrative Gender.
     */
    var gender: AdministrativeGender? = null



    /**
     * The birth date for the person.
     */
    var birthDate: DateType? = null



    /**
     * One or more addresses for the person.
     */
    var address: List<Address>? = null



    /**
     * An image that can be displayed as a thumbnail of the person to enhance the identification of the individual.
     */
    var photo: Attachment? = null



    /**
     * The organization that is the custodian of the person record.
     */
    var managingOrganization: Reference? = null

    @JsonIgnore
    var managingOrganizationTarget: Resource? = null

    /**
     * Whether this person's record is in active use.
     */
    var active: BooleanType? = null



    /**
     * Link to a resource that concerns the same actual person.
     */
    var link: List<PersonLink>? = null




}

/**
 * Demographics and administrative information about a person independent of a specific health-related context.
 */
class PersonLink(
    val target: Reference): BackboneElement() {


    /**
     * Level of assurance that this link is associated with the target resource.
     */
    var assurance: IdentityAssuranceLevel? = null




}

/**
 * This resource allows for the definition of various types of plans as a sharable, consumable, and executable artifact. The resource is general enough to support the description of a broad range of clinical artifacts such as clinical decision support rules, order sets and protocols.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class PlanDefinition(
    val status: PublicationStatus): DomainResource() {


    /**
     * An absolute URI that is used to identify this plan definition when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which at which an authoritative instance of this plan definition is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the plan definition is stored on different servers.
     */
    var url: UriType? = null



    /**
     * A formal identifier that is used to identify this plan definition when it is represented in other formats, or referenced in a specification, model, design or an instance.
     */
    var identifier: List<Identifier>? = null



    /**
     * The identifier that is used to identify this version of the plan definition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the plan definition author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence. To provide a version consistent with the Decision Support Service specification, use the format Major.Minor.Revision (e.g. 1.0.0). For more information on versioning knowledge assets, refer to the Decision Support Service specification. Note that a version is required for non-experimental active artifacts.
     */
    var version: StringType? = null



    /**
     * A natural language name identifying the plan definition. This name should be usable as an identifier for the module by machine processing applications such as code generation.
     */
    var name: StringType? = null



    /**
     * A short, descriptive, user-friendly title for the plan definition.
     */
    var title: StringType? = null



    /**
     * An explanatory or alternate title for the plan definition giving additional information about its content.
     */
    var subtitle: StringType? = null



    /**
     * A high-level category for the plan definition that distinguishes the kinds of systems that would be interested in the plan definition.
     */
    var type: CodeableConcept? = null



    /**
     * A Boolean value to indicate that this plan definition is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
     */
    var experimental: BooleanType? = null



    /**
     *
     */
    var subjectCodeableConcept: CodeableConcept? = null



    /**
     *
     */
    var subjectReference: Reference? = null

    @JsonIgnore
    var subjectReferenceTarget: Resource? = null

    /**
     * The date  (and optionally time) when the plan definition was published. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the plan definition changes.
     */
    var date: DateTimeType? = null



    /**
     * The name of the organization or individual that published the plan definition.
     */
    var publisher: StringType? = null



    /**
     * Contact details to assist a user in finding and communicating with the publisher.
     */
    var contact: List<ContactDetail>? = null



    /**
     * A free text natural language description of the plan definition from a consumer's perspective.
     */
    var description: MarkdownType? = null



    /**
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate plan definition instances.
     */
    var useContext: List<UsageContext>? = null



    /**
     * A legal or geographic region in which the plan definition is intended to be used.
     */
    var jurisdiction: List<CodeableConcept>? = null



    /**
     * Explanation of why this plan definition is needed and why it has been designed as it has.
     */
    var purpose: MarkdownType? = null



    /**
     * A detailed description of how the plan definition is used from a clinical perspective.
     */
    var usage: StringType? = null



    /**
     * A copyright statement relating to the plan definition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the plan definition.
     */
    var copyright: MarkdownType? = null



    /**
     * The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage.
     */
    var approvalDate: DateType? = null



    /**
     * The date on which the resource content was last reviewed. Review happens periodically after approval but does not change the original approval date.
     */
    var lastReviewDate: DateType? = null



    /**
     * The period during which the plan definition content was or is planned to be in active use.
     */
    var effectivePeriod: Period? = null



    /**
     * Descriptive topics related to the content of the plan definition. Topics provide a high-level categorization of the definition that can be useful for filtering and searching.
     */
    var topic: List<CodeableConcept>? = null



    /**
     * An individiual or organization primarily involved in the creation and maintenance of the content.
     */
    var author: List<ContactDetail>? = null



    /**
     * An individual or organization primarily responsible for internal coherence of the content.
     */
    var editor: List<ContactDetail>? = null



    /**
     * An individual or organization primarily responsible for review of some aspect of the content.
     */
    var reviewer: List<ContactDetail>? = null



    /**
     * An individual or organization responsible for officially endorsing the content for use in some setting.
     */
    var endorser: List<ContactDetail>? = null



    /**
     * Related artifacts such as additional documentation, justification, or bibliographic references.
     */
    var relatedArtifact: List<RelatedArtifact>? = null



    /**
     * A reference to a Library resource containing any formal logic used by the plan definition.
     */
    var library: List<CanonicalType>? = null



    /**
     * Goals that describe what the activities within the plan are intended to achieve. For example, weight loss, restoring an activity of daily living, obtaining herd immunity via immunization, meeting a process improvement objective, etc.
     */
    var goal: List<PlanDefinitionGoal>? = null



    /**
     * An action or group of actions to be taken as part of the plan.
     */
    var action: List<PlanDefinitionAction>? = null




}

/**
 * This resource allows for the definition of various types of plans as a sharable, consumable, and executable artifact. The resource is general enough to support the description of a broad range of clinical artifacts such as clinical decision support rules, order sets and protocols.
 */
class PlanDefinitionAction: BackboneElement()
{


    /**
     * A user-visible prefix for the action.
     */
    var prefix: StringType? = null



    /**
     * The title of the action displayed to a user.
     */
    var title: StringType? = null



    /**
     * A brief description of the action used to provide a summary to display to the user.
     */
    var description: StringType? = null



    /**
     * A text equivalent of the action to be performed. This provides a human-interpretable description of the action when the definition is consumed by a system that might not be capable of interpreting it dynamically.
     */
    var textEquivalent: StringType? = null



    /**
     * Indicates how quickly the action should be addressed with respect to other actions.
     */
    var priority: RequestPriority? = null



    /**
     * A code that provides meaning for the action or action group. For example, a section may have a LOINC code for the section of a documentation template.
     */
    var code: List<CodeableConcept>? = null



    /**
     * A description of why this action is necessary or appropriate.
     */
    var reason: List<CodeableConcept>? = null



    /**
     * Didactic or other informational resources associated with the action that can be provided to the CDS recipient. Information resources can include inline text commentary and links to web resources.
     */
    var documentation: List<RelatedArtifact>? = null



    /**
     * Identifies goals that this action supports. The reference must be to a goal element defined within this plan definition.
     */
    var goalId: List<IdType>? = null



    /**
     *
     */
    var subjectCodeableConcept: CodeableConcept? = null



    /**
     *
     */
    var subjectReference: Reference? = null

    @JsonIgnore
    var subjectReferenceTarget: Resource? = null

    /**
     * A description of when the action should be triggered.
     */
    var trigger: List<TriggerDefinition>? = null



    /**
     * An expression that describes applicability criteria or start/stop conditions for the action.
     */
    var condition: List<PlanDefinitionCondition>? = null



    /**
     * Defines input data requirements for the action.
     */
    var input: List<DataRequirement>? = null



    /**
     * Defines the outputs of the action, if any.
     */
    var output: List<DataRequirement>? = null



    /**
     * A relationship to another action such as "before" or "30-60 minutes after start of".
     */
    var relatedAction: List<PlanDefinitionRelatedAction>? = null



    /**
     *
     */
    var timingDateTime: DateTimeType? = null



    /**
     *
     */
    var timingAge: Age? = null



    /**
     *
     */
    var timingPeriod: Period? = null



    /**
     *
     */
    var timingDuration: Duration? = null



    /**
     *
     */
    var timingRange: Range? = null



    /**
     *
     */
    var timingTiming: Timing? = null



    /**
     * Indicates who should participate in performing the action described.
     */
    var participant: List<PlanDefinitionParticipant>? = null



    /**
     * The type of action to perform (create, update, remove).
     */
    var type: CodeableConcept? = null



    /**
     * Defines the grouping behavior for the action and its children.
     */
    var groupingBehavior: ActionGroupingBehavior? = null



    /**
     * Defines the selection behavior for the action and its children.
     */
    var selectionBehavior: ActionSelectionBehavior? = null



    /**
     * Defines the required behavior for the action.
     */
    var requiredBehavior: ActionRequiredBehavior? = null



    /**
     * Defines whether the action should usually be preselected.
     */
    var precheckBehavior: ActionPrecheckBehavior? = null



    /**
     * Defines whether the action can be selected multiple times.
     */
    var cardinalityBehavior: ActionCardinalityBehavior? = null



    /**
     *
     */
    var definitionCanonical: CanonicalType? = null



    /**
     *
     */
    var definitionUri: UriType? = null



    /**
     * A reference to a StructureMap resource that defines a transform that can be executed to produce the intent resource using the ActivityDefinition instance as the input.
     */
    var transform: CanonicalType? = null



    /**
     * Customizations that should be applied to the statically defined resource. For example, if the dosage of a medication must be computed based on the patient's weight, a customization would be used to specify an expression that calculated the weight, and the path on the resource that would contain the result.
     */
    var dynamicValue: List<PlanDefinitionDynamicValue>? = null



    /**
     * Sub actions that are contained within the action. The behavior of this action determines the functionality of the sub-actions. For example, a selection behavior of at-most-one indicates that of the sub-actions, at most one may be chosen as part of realizing the action definition.
     */
    var action: List<PlanDefinitionAction>? = null




}

/**
 * This resource allows for the definition of various types of plans as a sharable, consumable, and executable artifact. The resource is general enough to support the description of a broad range of clinical artifacts such as clinical decision support rules, order sets and protocols.
 */
class PlanDefinitionCondition(
    val kind: ActionConditionKind): BackboneElement() {


    /**
     * An expression that returns true or false, indicating whether the condition is satisfied.
     */
    var expression: Expression? = null




}

/**
 * This resource allows for the definition of various types of plans as a sharable, consumable, and executable artifact. The resource is general enough to support the description of a broad range of clinical artifacts such as clinical decision support rules, order sets and protocols.
 */
class PlanDefinitionDynamicValue: BackboneElement()
{


    /**
     * The path to the element to be customized. This is the path on the resource that will hold the result of the calculation defined by the expression. The specified path SHALL be a FHIRPath resolveable on the specified target type of the ActivityDefinition, and SHALL consist only of identifiers, constant indexers, and a restricted subset of functions. The path is allowed to contain qualifiers (.) to traverse sub-elements, as well as indexers ([x]) to traverse multiple-cardinality sub-elements (see the [Simple FHIRPath Profile](fhirpath.html#simple) for full details).
     */
    var path: StringType? = null



    /**
     * An expression specifying the value of the customized element.
     */
    var expression: Expression? = null




}

/**
 * This resource allows for the definition of various types of plans as a sharable, consumable, and executable artifact. The resource is general enough to support the description of a broad range of clinical artifacts such as clinical decision support rules, order sets and protocols.
 */
class PlanDefinitionGoal(
    val description: CodeableConcept): BackboneElement() {


    /**
     * Indicates a category the goal falls within.
     */
    var category: CodeableConcept? = null



    /**
     * Identifies the expected level of importance associated with reaching/sustaining the defined goal.
     */
    var priority: CodeableConcept? = null



    /**
     * The event after which the goal should begin being pursued.
     */
    var start: CodeableConcept? = null



    /**
     * Identifies problems, conditions, issues, or concerns the goal is intended to address.
     */
    var addresses: List<CodeableConcept>? = null



    /**
     * Didactic or other informational resources associated with the goal that provide further supporting information about the goal. Information resources can include inline text commentary and links to web resources.
     */
    var documentation: List<RelatedArtifact>? = null



    /**
     * Indicates what should be done and within what timeframe.
     */
    var target: List<PlanDefinitionTarget>? = null




}

/**
 * This resource allows for the definition of various types of plans as a sharable, consumable, and executable artifact. The resource is general enough to support the description of a broad range of clinical artifacts such as clinical decision support rules, order sets and protocols.
 */
class PlanDefinitionParticipant(
    val type: ActionParticipantType): BackboneElement() {


    /**
     * The role the participant should play in performing the described action.
     */
    var role: CodeableConcept? = null




}

/**
 * This resource allows for the definition of various types of plans as a sharable, consumable, and executable artifact. The resource is general enough to support the description of a broad range of clinical artifacts such as clinical decision support rules, order sets and protocols.
 */
class PlanDefinitionRelatedAction(
    val actionId: IdType,
    val relationship: ActionRelationshipType): BackboneElement() {


    /**
     *
     */
    var offsetDuration: Duration? = null



    /**
     *
     */
    var offsetRange: Range? = null




}

/**
 * This resource allows for the definition of various types of plans as a sharable, consumable, and executable artifact. The resource is general enough to support the description of a broad range of clinical artifacts such as clinical decision support rules, order sets and protocols.
 */
class PlanDefinitionTarget: BackboneElement()
{


    /**
     * The parameter whose value is to be tracked, e.g. body weight, blood pressure, or hemoglobin A1c level.
     */
    var measure: CodeableConcept? = null



    /**
     *
     */
    var detailQuantity: Quantity? = null



    /**
     *
     */
    var detailRange: Range? = null



    /**
     *
     */
    var detailCodeableConcept: CodeableConcept? = null



    /**
     * Indicates the timeframe after the start of the goal in which the goal should be met.
     */
    var due: Duration? = null




}

/**
 * A populatioof people with some set of grouping criteria.
 * If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions
 */
class Population: BackboneElement()
{


    /**
     *
     */
    var ageRange: Range? = null



    /**
     *
     */
    var ageCodeableConcept: CodeableConcept? = null



    /**
     * The gender of the specific population.
     */
    var gender: CodeableConcept? = null



    /**
     * Race of the specific population.
     */
    var race: CodeableConcept? = null



    /**
     * The existing physiological conditions of the specific population to which this applies.
     */
    var physiologicalCondition: CodeableConcept? = null




}

/**
 * An integer with a value that is positive (e.g. >0)
 * If the element is present, it must have either a @value, an @id referenced from the Narrative, or extensions
 */
data class PositiveIntType(@JsonValue val value: java.math.BigInteger) {
    companion object {
        @JvmStatic
        @JsonCreator
        fun create(value: java.math.BigInteger) = PositiveIntType(value)
    }
}



/**
 * A person who is directly or indirectly involved in the provisioning of healthcare.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class Practitioner: DomainResource()
{


    /**
     * An identifier that applies to this person in this role.
     */
    var identifier: List<Identifier>? = null



    /**
     * Whether this practitioner's record is in active use.
     */
    var active: BooleanType? = null



    /**
     * The name(s) associated with the practitioner.
     */
    var name: List<HumanName>? = null



    /**
     * A contact detail for the practitioner, e.g. a telephone number or an email address.
     */
    var telecom: List<ContactPoint>? = null



    /**
     * Address(es) of the practitioner that are not role specific (typically home address).
     * Work addresses are not typically entered in this property as they are usually role dependent.
     */
    var address: List<Address>? = null



    /**
     * Administrative Gender - the gender that the person is considered to have for administration and record keeping purposes.
     */
    var gender: AdministrativeGender? = null



    /**
     * The date of birth for the practitioner.
     */
    var birthDate: DateType? = null



    /**
     * Image of the person.
     */
    var photo: List<Attachment>? = null



    /**
     * The official certifications, training, and licenses that authorize or otherwise pertain to the provision of care by the practitioner.  For example, a medical license issued by a medical board authorizing the practitioner to practice medicine within a certian locality.
     */
    var qualification: List<PractitionerQualification>? = null



    /**
     * A language the practitioner can use in patient communication.
     */
    var communication: List<CodeableConcept>? = null




}

/**
 * A person who is directly or indirectly involved in the provisioning of healthcare.
 */
class PractitionerQualification(
    val code: CodeableConcept): BackboneElement() {


    /**
     * An identifier that applies to this person's qualification in this role.
     */
    var identifier: List<Identifier>? = null



    /**
     * Period during which the qualification is valid.
     */
    var period: Period? = null



    /**
     * Organization that regulates and issues the qualification.
     */
    var issuer: Reference? = null

    @JsonIgnore
    var issuerTarget: Resource? = null


}

/**
 * A specific set of Roles/Locations/specialties/services that a practitioner may perform at an organization for a period of time.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class PractitionerRole: DomainResource()
{


    /**
     * Business Identifiers that are specific to a role/location.
     */
    var identifier: List<Identifier>? = null



    /**
     * Whether this practitioner role record is in active use.
     */
    var active: BooleanType? = null



    /**
     * The period during which the person is authorized to act as a practitioner in these role(s) for the organization.
     */
    var period: Period? = null



    /**
     * Practitioner that is able to provide the defined services for the organization.
     */
    var practitioner: Reference? = null

    @JsonIgnore
    var practitionerTarget: Resource? = null

    /**
     * The organization where the Practitioner performs the roles associated.
     */
    var organization: Reference? = null

    @JsonIgnore
    var organizationTarget: Resource? = null

    /**
     * Roles which this practitioner is authorized to perform for the organization.
     */
    var code: List<CodeableConcept>? = null



    /**
     * Specific specialty of the practitioner.
     */
    var specialty: List<CodeableConcept>? = null



    /**
     * The location(s) at which this practitioner provides care.
     */
    var location: List<Reference>? = null

    @JsonIgnore
    var locationTarget: List<Resource>? = null

    /**
     * The list of healthcare services that this worker provides for this role's Organization/Location(s).
     */
    var healthcareService: List<Reference>? = null

    @JsonIgnore
    var healthcareServiceTarget: List<Resource>? = null

    /**
     * Contact details that are specific to the role/location/service.
     */
    var telecom: List<ContactPoint>? = null



    /**
     * A collection of times the practitioner is available or performing this role at the location and/or healthcareservice.
     */
    var availableTime: List<PractitionerRoleAvailableTime>? = null



    /**
     * The practitioner is not available or performing this role during this period of time due to the provided reason.
     */
    var notAvailable: List<PractitionerRoleNotAvailable>? = null



    /**
     * A description of site availability exceptions, e.g. public holiday availability. Succinctly describing all possible exceptions to normal site availability as details in the available Times and not available Times.
     */
    var availabilityExceptions: StringType? = null



    /**
     * Technical endpoints providing access to services operated for the practitioner with this role.
     */
    var endpoint: List<Reference>? = null

    @JsonIgnore
    var endpointTarget: List<Resource>? = null


}

/**
 * A specific set of Roles/Locations/specialties/services that a practitioner may perform at an organization for a period of time.
 */
class PractitionerRoleAvailableTime: BackboneElement()
{


    /**
     * Indicates which days of the week are available between the start and end Times.
     */
    var daysOfWeek: List<DaysOfWeek>? = null



    /**
     * Is this always available? (hence times are irrelevant) e.g. 24 hour service.
     */
    var allDay: BooleanType? = null



    /**
     * The opening time of day. Note: If the AllDay flag is set, then this time is ignored.
     */
    var availableStartTime: TimeType? = null



    /**
     * The closing time of day. Note: If the AllDay flag is set, then this time is ignored.
     */
    var availableEndTime: TimeType? = null




}

/**
 * A specific set of Roles/Locations/specialties/services that a practitioner may perform at an organization for a period of time.
 */
class PractitionerRoleNotAvailable(
    val description: StringType): BackboneElement() {


    /**
     * Service is not available (seasonally or for a public holiday) from this date.
     */
    var during: Period? = null




}

/**
 * An action that is or was performed on or for a patient. This can be a physical intervention like an operation, or less invasive like long term services, counseling, or hypnotherapy.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class Procedure(
    val status: EventStatus,
    val subject: Reference): DomainResource() {


    /**
     * Business identifiers assigned to this procedure by the performer or other systems which remain constant as the resource is updated and is propagated from server to server.
     */
    var identifier: List<Identifier>? = null



    /**
     * The URL pointing to a FHIR-defined protocol, guideline, order set or other definition that is adhered to in whole or in part by this Procedure.
     */
    var instantiatesCanonical: List<CanonicalType>? = null



    /**
     * The URL pointing to an externally maintained protocol, guideline, order set or other definition that is adhered to in whole or in part by this Procedure.
     */
    var instantiatesUri: List<UriType>? = null



    /**
     * A reference to a resource that contains details of the request for this procedure.
     */
    var basedOn: List<Reference>? = null

    @JsonIgnore
    var basedOnTarget: List<Resource>? = null

    /**
     * A larger event of which this particular procedure is a component or step.
     */
    var partOf: List<Reference>? = null

    @JsonIgnore
    var partOfTarget: List<Resource>? = null

    /**
     * Captures the reason for the current state of the procedure.
     */
    var statusReason: CodeableConcept? = null



    /**
     * A code that classifies the procedure for searching, sorting and display purposes (e.g. "Surgical Procedure").
     */
    var category: CodeableConcept? = null



    /**
     * The specific procedure that is performed. Use text if the exact nature of the procedure cannot be coded (e.g. "Laparoscopic Appendectomy").
     */
    var code: CodeableConcept? = null



    /**
     * The Encounter during which this Procedure was created or performed or to which the creation of this record is tightly associated.
     */
    var encounter: Reference? = null

    @JsonIgnore
    var encounterTarget: Resource? = null

    /**
     *
     */
    var performedDateTime: DateTimeType? = null



    /**
     *
     */
    var performedPeriod: Period? = null



    /**
     *
     */
    var performedString: StringType? = null



    /**
     *
     */
    var performedAge: Age? = null



    /**
     *
     */
    var performedRange: Range? = null



    /**
     * Individual who recorded the record and takes responsibility for its content.
     */
    var recorder: Reference? = null

    @JsonIgnore
    var recorderTarget: Resource? = null

    /**
     * Individual who is making the procedure statement.
     */
    var asserter: Reference? = null

    @JsonIgnore
    var asserterTarget: Resource? = null

    /**
     * Limited to "real" people rather than equipment.
     */
    var performer: List<ProcedurePerformer>? = null



    /**
     * The location where the procedure actually happened.  E.g. a newborn at home, a tracheostomy at a restaurant.
     */
    var location: Reference? = null

    @JsonIgnore
    var locationTarget: Resource? = null

    /**
     * The coded reason why the procedure was performed. This may be a coded entity of some type, or may simply be present as text.
     */
    var reasonCode: List<CodeableConcept>? = null



    /**
     * The justification of why the procedure was performed.
     */
    var reasonReference: List<Reference>? = null

    @JsonIgnore
    var reasonReferenceTarget: List<Resource>? = null

    /**
     * Detailed and structured anatomical location information. Multiple locations are allowed - e.g. multiple punch biopsies of a lesion.
     */
    var bodySite: List<CodeableConcept>? = null



    /**
     * The outcome of the procedure - did it resolve the reasons for the procedure being performed?
     */
    var outcome: CodeableConcept? = null



    /**
     * This could be a histology result, pathology report, surgical report, etc.
     */
    var report: List<Reference>? = null

    @JsonIgnore
    var reportTarget: List<Resource>? = null

    /**
     * Any complications that occurred during the procedure, or in the immediate post-performance period. These are generally tracked separately from the notes, which will typically describe the procedure itself rather than any 'post procedure' issues.
     */
    var complication: List<CodeableConcept>? = null



    /**
     * Any complications that occurred during the procedure, or in the immediate post-performance period.
     */
    var complicationDetail: List<Reference>? = null

    @JsonIgnore
    var complicationDetailTarget: List<Resource>? = null

    /**
     * If the procedure required specific follow up - e.g. removal of sutures. The follow up may be represented as a simple note or could potentially be more complex, in which case the CarePlan resource can be used.
     */
    var followUp: List<CodeableConcept>? = null



    /**
     * Any other notes and comments about the procedure.
     */
    var note: List<Annotation>? = null



    /**
     * A device that is implanted, removed or otherwise manipulated (calibration, battery replacement, fitting a prosthesis, attaching a wound-vac, etc.) as a focal portion of the Procedure.
     */
    var focalDevice: List<ProcedureFocalDevice>? = null



    /**
     * Identifies medications, devices and any other substance used as part of the procedure.
     */
    var usedReference: List<Reference>? = null

    @JsonIgnore
    var usedReferenceTarget: List<Resource>? = null

    /**
     * Identifies coded items that were used as part of the procedure.
     */
    var usedCode: List<CodeableConcept>? = null




}

/**
 * An action that is or was performed on or for a patient. This can be a physical intervention like an operation, or less invasive like long term services, counseling, or hypnotherapy.
 */
class ProcedureFocalDevice(
    val manipulated: Reference): BackboneElement() {


    /**
     * The kind of change that happened to the device during the procedure.
     */
    var action: CodeableConcept? = null




}

/**
 * An action that is or was performed on or for a patient. This can be a physical intervention like an operation, or less invasive like long term services, counseling, or hypnotherapy.
 */
class ProcedurePerformer(
    val actor: Reference): BackboneElement() {


    /**
     * Distinguishes the type of involvement of the performer in the procedure. For example, surgeon, anaesthetist, endoscopist.
     */
    var function: CodeableConcept? = null



    /**
     * The organization the device or practitioner was acting on behalf of.
     */
    var onBehalfOf: Reference? = null

    @JsonIgnore
    var onBehalfOfTarget: Resource? = null


}

/**
 * The marketing status describes the date when a medicinal product is actually put on the market or the date as of which it is no longer available.
 * If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions
 */
class ProdCharacteristic: BackboneElement()
{


    /**
     * Where applicable, the height can be specified using a numerical value and its unit of measurement The unit of measurement shall be specified in accordance with ISO 11240 and the resulting terminology The symbol and the symbol identifier shall be used.
     */
    var height: Quantity? = null



    /**
     * Where applicable, the width can be specified using a numerical value and its unit of measurement The unit of measurement shall be specified in accordance with ISO 11240 and the resulting terminology The symbol and the symbol identifier shall be used.
     */
    var width: Quantity? = null



    /**
     * Where applicable, the depth can be specified using a numerical value and its unit of measurement The unit of measurement shall be specified in accordance with ISO 11240 and the resulting terminology The symbol and the symbol identifier shall be used.
     */
    var depth: Quantity? = null



    /**
     * Where applicable, the weight can be specified using a numerical value and its unit of measurement The unit of measurement shall be specified in accordance with ISO 11240 and the resulting terminology The symbol and the symbol identifier shall be used.
     */
    var weight: Quantity? = null



    /**
     * Where applicable, the nominal volume can be specified using a numerical value and its unit of measurement The unit of measurement shall be specified in accordance with ISO 11240 and the resulting terminology The symbol and the symbol identifier shall be used.
     */
    var nominalVolume: Quantity? = null



    /**
     * Where applicable, the external diameter can be specified using a numerical value and its unit of measurement The unit of measurement shall be specified in accordance with ISO 11240 and the resulting terminology The symbol and the symbol identifier shall be used.
     */
    var externalDiameter: Quantity? = null



    /**
     * Where applicable, the shape can be specified An appropriate controlled vocabulary shall be used The term and the term identifier shall be used.
     */
    var shape: StringType? = null



    /**
     * Where applicable, the color can be specified An appropriate controlled vocabulary shall be used The term and the term identifier shall be used.
     */
    var color: List<StringType>? = null



    /**
     * Where applicable, the imprint can be specified as text.
     */
    var imprint: List<StringType>? = null



    /**
     * Where applicable, the image can be provided The format of the image attachment shall be specified by regional implementations.
     */
    var image: List<Attachment>? = null



    /**
     * Where applicable, the scoring can be specified An appropriate controlled vocabulary shall be used The term and the term identifier shall be used.
     */
    var scoring: CodeableConcept? = null




}

/**
 * The shelf-life and storage information for a medicinal product item or container can be described using this class.
 * If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions
 */
class ProductShelfLife(
    val type: CodeableConcept,
    val period: Quantity): BackboneElement() {


    /**
     * Unique identifier for the packaged Medicinal Product.
     */
    var identifier: Identifier? = null



    /**
     * Special precautions for storage, if any, can be specified using an appropriate controlled vocabulary The controlled term and the controlled term identifier shall be specified.
     */
    var specialPrecautionsForStorage: List<CodeableConcept>? = null




}

/**
 * How a property is represented when serialized.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class PropertyRepresentation(
    @JsonValue val text: String) {
    XML_ATTR("xmlAttr"),
    XML_TEXT("xmlText"),
    TYPE_ATTR("typeAttr"),
    CDA_TEXT("cdaText"),
    XHTML("xhtml")
}




/**
 * The type of a property value.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class PropertyType(
    @JsonValue val text: String) {
    CODE("code"),
    CODING("Coding"),
    STRING("string"),
    INTEGER("integer"),
    BOOLEAN("boolean"),
    DATE_TIME("dateTime"),
    DECIMAL("decimal")
}




/**
 * Provenance of a resource is a record that describes entities and processes involved in producing and delivering or otherwise influencing that resource. Provenance provides a critical foundation for assessing authenticity, enabling trust, and allowing reproducibility. Provenance assertions are a form of contextual metadata and can themselves become important records with their own provenance. Provenance statement indicates clinical significance in terms of confidence in authenticity, reliability, and trustworthiness, integrity, and stage in lifecycle (e.g. Document Completion - has the artifact been legally authenticated), all of which may impact security, privacy, and trust policies.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class Provenance(
    val target: List<Reference>,
    val recorded: InstantType,
    val agent: List<ProvenanceAgent>): DomainResource() {


    /**
     *
     */
    var occurredPeriod: Period? = null



    /**
     *
     */
    var occurredDateTime: DateTimeType? = null



    /**
     * Policy or plan the activity was defined by. Typically, a single activity may have multiple applicable policy documents, such as patient consent, guarantor funding, etc.
     */
    var policy: List<UriType>? = null



    /**
     * Where the activity occurred, if relevant.
     */
    var location: Reference? = null

    @JsonIgnore
    var locationTarget: Resource? = null

    /**
     * The reason that the activity was taking place.
     */
    var reason: List<CodeableConcept>? = null



    /**
     * An activity is something that occurs over a period of time and acts upon or with entities; it may include consuming, processing, transforming, modifying, relocating, using, or generating entities.
     */
    var activity: CodeableConcept? = null



    /**
     * An entity used in this activity.
     */
    var entity: List<ProvenanceEntity>? = null



    /**
     * A digital signature on the target Reference(s). The signer should match a Provenance.agent. The purpose of the signature is indicated.
     */
    var signature: List<Signature>? = null




}

/**
 * Provenance of a resource is a record that describes entities and processes involved in producing and delivering or otherwise influencing that resource. Provenance provides a critical foundation for assessing authenticity, enabling trust, and allowing reproducibility. Provenance assertions are a form of contextual metadata and can themselves become important records with their own provenance. Provenance statement indicates clinical significance in terms of confidence in authenticity, reliability, and trustworthiness, integrity, and stage in lifecycle (e.g. Document Completion - has the artifact been legally authenticated), all of which may impact security, privacy, and trust policies.
 */
class ProvenanceAgent(
    val who: Reference): BackboneElement() {


    /**
     * The participation the agent had with respect to the activity.
     */
    var type: CodeableConcept? = null



    /**
     * The function of the agent with respect to the activity. The security role enabling the agent with respect to the activity.
     */
    var role: List<CodeableConcept>? = null



    /**
     * The individual, device, or organization for whom the change was made.
     */
    var onBehalfOf: Reference? = null

    @JsonIgnore
    var onBehalfOfTarget: Resource? = null


}

/**
 * Provenance of a resource is a record that describes entities and processes involved in producing and delivering or otherwise influencing that resource. Provenance provides a critical foundation for assessing authenticity, enabling trust, and allowing reproducibility. Provenance assertions are a form of contextual metadata and can themselves become important records with their own provenance. Provenance statement indicates clinical significance in terms of confidence in authenticity, reliability, and trustworthiness, integrity, and stage in lifecycle (e.g. Document Completion - has the artifact been legally authenticated), all of which may impact security, privacy, and trust policies.
 */
class ProvenanceEntity(
    val role: ProvenanceEntityRole,
    val what: Reference): BackboneElement() {


    /**
     * The entity is attributed to an agent to express the agent's responsibility for that entity, possibly along with other agents. This description can be understood as shorthand for saying that the agent was responsible for the activity which generated the entity.
     */
    var agent: List<ProvenanceAgent>? = null




}

/**
 * How an entity was used in an activity.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class ProvenanceEntityRole(
    @JsonValue val text: String) {
    DERIVATION("derivation"),
    REVISION("revision"),
    QUOTATION("quotation"),
    SOURCE("source"),
    REMOVAL("removal")
}




/**
 *
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class PublicationStatus(
    @JsonValue val text: String) {
    DRAFT("draft"),
    ACTIVE("active"),
    RETIRED("retired"),
    UNKNOWN("unknown")
}




/**
 * Type for quality report.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class QualityType(
    @JsonValue val text: String) {
    INDEL("indel"),
    SNP("snp"),
    UNKNOWN("unknown")
}




/**
 * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
 * If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions
 */
open class Quantity: Element()
{


    /**
     * The value of the measured amount. The value includes an implicit precision in the presentation of the value.
     */
    var value: DecimalType? = null



    /**
     * How the value should be understood and represented - whether the actual value is greater or less than the stated value due to measurement issues; e.g. if the comparator is "<" , then the real value is < stated value.
     */
    var comparator: QuantityComparator? = null



    /**
     * A human-readable form of the unit.
     */
    var unit: StringType? = null



    /**
     * The identification of the system that provides the coded form of the unit.
     */
    var system: UriType? = null



    /**
     * A computer processable form of the unit in some unit representation system.
     */
    var code: CodeType? = null




}

/**
 * How the Quantity should be understood and represented.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class QuantityComparator(
    @JsonValue val text: String) {
    UNDERSCORE("<"),
    UNDERSCORE_1("<="),
    UNDERSCORE_2(">="),
    UNDERSCORE_3(">")
}




/**
 * A structured set of questions intended to guide the collection of answers from end-users. Questionnaires provide detailed control over order, presentation, phraseology and grouping to allow coherent, consistent data collection.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class Questionnaire(
    val status: PublicationStatus): DomainResource() {


    /**
     * An absolute URI that is used to identify this questionnaire when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which at which an authoritative instance of this questionnaire is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the questionnaire is stored on different servers.
     */
    var url: UriType? = null



    /**
     * A formal identifier that is used to identify this questionnaire when it is represented in other formats, or referenced in a specification, model, design or an instance.
     */
    var identifier: List<Identifier>? = null



    /**
     * The identifier that is used to identify this version of the questionnaire when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the questionnaire author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
     */
    var version: StringType? = null



    /**
     * A natural language name identifying the questionnaire. This name should be usable as an identifier for the module by machine processing applications such as code generation.
     */
    var name: StringType? = null



    /**
     * A short, descriptive, user-friendly title for the questionnaire.
     */
    var title: StringType? = null



    /**
     * The URL of a Questionnaire that this Questionnaire is based on.
     */
    var derivedFrom: List<CanonicalType>? = null



    /**
     * A Boolean value to indicate that this questionnaire is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
     */
    var experimental: BooleanType? = null



    /**
     * The types of subjects that can be the subject of responses created for the questionnaire.
     */
    var subjectType: List<CodeType>? = null



    /**
     * The date  (and optionally time) when the questionnaire was published. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the questionnaire changes.
     */
    var date: DateTimeType? = null



    /**
     * The name of the organization or individual that published the questionnaire.
     */
    var publisher: StringType? = null



    /**
     * Contact details to assist a user in finding and communicating with the publisher.
     */
    var contact: List<ContactDetail>? = null



    /**
     * A free text natural language description of the questionnaire from a consumer's perspective.
     */
    var description: MarkdownType? = null



    /**
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate questionnaire instances.
     */
    var useContext: List<UsageContext>? = null



    /**
     * A legal or geographic region in which the questionnaire is intended to be used.
     */
    var jurisdiction: List<CodeableConcept>? = null



    /**
     * Explanation of why this questionnaire is needed and why it has been designed as it has.
     */
    var purpose: MarkdownType? = null



    /**
     * A copyright statement relating to the questionnaire and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the questionnaire.
     */
    var copyright: MarkdownType? = null



    /**
     * The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage.
     */
    var approvalDate: DateType? = null



    /**
     * The date on which the resource content was last reviewed. Review happens periodically after approval but does not change the original approval date.
     */
    var lastReviewDate: DateType? = null



    /**
     * The period during which the questionnaire content was or is planned to be in active use.
     */
    var effectivePeriod: Period? = null



    /**
     * An identifier for this question or group of questions in a particular terminology such as LOINC.
     */
    var code: List<Coding>? = null



    /**
     * A particular question, question grouping or display text that is part of the questionnaire.
     */
    var item: List<QuestionnaireItem>? = null




}

/**
 * A structured set of questions intended to guide the collection of answers from end-users. Questionnaires provide detailed control over order, presentation, phraseology and grouping to allow coherent, consistent data collection.
 */
class QuestionnaireAnswerOption: BackboneElement()
{


    /**
     *
     */
    var valueInteger: IntegerType? = null



    /**
     *
     */
    var valueDate: DateType? = null



    /**
     *
     */
    var valueTime: TimeType? = null



    /**
     *
     */
    var valueString: StringType? = null



    /**
     *
     */
    var valueCoding: Coding? = null



    /**
     *
     */
    var valueReference: Reference? = null

    @JsonIgnore
    var valueReferenceTarget: Resource? = null

    /**
     * Indicates whether the answer value is selected when the list of possible answers is initially shown.
     */
    var initialSelected: BooleanType? = null




}

/**
 * A structured set of questions intended to guide the collection of answers from end-users. Questionnaires provide detailed control over order, presentation, phraseology and grouping to allow coherent, consistent data collection.
 */
class QuestionnaireEnableWhen(
    val question: StringType,
    val operator: QuestionnaireItemOperator): BackboneElement() {


    /**
     *
     */
    var answerBoolean: BooleanType? = null



    /**
     *
     */
    var answerDecimal: DecimalType? = null



    /**
     *
     */
    var answerInteger: IntegerType? = null



    /**
     *
     */
    var answerDate: DateType? = null



    /**
     *
     */
    var answerDateTime: DateTimeType? = null



    /**
     *
     */
    var answerTime: TimeType? = null



    /**
     *
     */
    var answerString: StringType? = null



    /**
     *
     */
    var answerCoding: Coding? = null



    /**
     *
     */
    var answerQuantity: Quantity? = null



    /**
     *
     */
    var answerReference: Reference? = null

    @JsonIgnore
    var answerReferenceTarget: Resource? = null


}

/**
 * A structured set of questions intended to guide the collection of answers from end-users. Questionnaires provide detailed control over order, presentation, phraseology and grouping to allow coherent, consistent data collection.
 */
class QuestionnaireInitial: BackboneElement()
{


    /**
     *
     */
    var valueBoolean: BooleanType? = null



    /**
     *
     */
    var valueDecimal: DecimalType? = null



    /**
     *
     */
    var valueInteger: IntegerType? = null



    /**
     *
     */
    var valueDate: DateType? = null



    /**
     *
     */
    var valueDateTime: DateTimeType? = null



    /**
     *
     */
    var valueTime: TimeType? = null



    /**
     *
     */
    var valueString: StringType? = null



    /**
     *
     */
    var valueUri: UriType? = null



    /**
     *
     */
    var valueAttachment: Attachment? = null



    /**
     *
     */
    var valueCoding: Coding? = null



    /**
     *
     */
    var valueQuantity: Quantity? = null



    /**
     *
     */
    var valueReference: Reference? = null

    @JsonIgnore
    var valueReferenceTarget: Resource? = null


}

/**
 * A structured set of questions intended to guide the collection of answers from end-users. Questionnaires provide detailed control over order, presentation, phraseology and grouping to allow coherent, consistent data collection.
 */
class QuestionnaireItem(
    val linkId: StringType,
    val type: QuestionnaireItemType): BackboneElement() {


    /**
     * This element is a URI that refers to an [[[ElementDefinition]]] that provides information about this item, including information that might otherwise be included in the instance of the Questionnaire resource. A detailed description of the construction of the URI is shown in Comments, below. If this element is present then the following element values MAY be derived from the Element Definition if the corresponding elements of this Questionnaire resource instance have no value:
     *
     * * code (ElementDefinition.code)
     * * type (ElementDefinition.type)
     * * required (ElementDefinition.min)
     * * repeats (ElementDefinition.max)
     * * maxLength (ElementDefinition.maxLength)
     * * answerValueSet (ElementDefinition.binding)
     * * options (ElementDefinition.binding).
     */
    var definition: UriType? = null



    /**
     * A terminology code that corresponds to this group or question (e.g. a code from LOINC, which defines many questions and answers).
     */
    var code: List<Coding>? = null



    /**
     * A short label for a particular group, question or set of display text within the questionnaire used for reference by the individual completing the questionnaire.
     */
    var prefix: StringType? = null



    /**
     * The name of a section, the text of a question or text content for a display item.
     */
    var text: StringType? = null



    /**
     * A constraint indicating that this item should only be enabled (displayed/allow answers to be captured) when the specified condition is true.
     */
    var enableWhen: List<QuestionnaireEnableWhen>? = null



    /**
     * Controls how multiple enableWhen values are interpreted -  whether all or any must be true.
     */
    var enableBehavior: EnableWhenBehavior? = null



    /**
     * An indication, if true, that the item must be present in a "completed" QuestionnaireResponse.  If false, the item may be skipped when answering the questionnaire.
     */
    var required: BooleanType? = null



    /**
     * An indication, if true, that the item may occur multiple times in the response, collecting multiple answers for questions or multiple sets of answers for groups.
     */
    var repeats: BooleanType? = null



    /**
     * An indication, when true, that the value cannot be changed by a human respondent to the Questionnaire.
     */
    var readOnly: BooleanType? = null



    /**
     * The maximum number of characters that are permitted in the answer to be considered a "valid" QuestionnaireResponse.
     */
    var maxLength: IntegerType? = null



    /**
     * A reference to a value set containing a list of codes representing permitted answers for a "choice" or "open-choice" question.
     */
    var answerValueSet: CanonicalType? = null



    /**
     * One of the permitted answers for a "choice" or "open-choice" question.
     */
    var answerOption: List<QuestionnaireAnswerOption>? = null



    /**
     * One or more values that should be pre-populated in the answer when initially rendering the questionnaire for user input.
     */
    var initial: List<QuestionnaireInitial>? = null



    /**
     * Text, questions and other groups to be nested beneath a question or group.
     */
    var item: List<QuestionnaireItem>? = null




}

/**
 * The criteria by which a question is enabled.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class QuestionnaireItemOperator(
    @JsonValue val text: String) {
    EXISTS("exists"),
    UNDERSCORE("="),
    UNDERSCORE_1("!="),
    UNDERSCORE_2(">"),
    UNDERSCORE_3("<"),
    UNDERSCORE_4(">="),
    UNDERSCORE_5("<=")
}




/**
 * Distinguishes groups from questions and display text and indicates data type for questions.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class QuestionnaireItemType(
    @JsonValue val text: String) {
    GROUP("group"),
    DISPLAY("display"),
    BOOLEAN("boolean"),
    DECIMAL("decimal"),
    INTEGER("integer"),
    DATE("date"),
    DATE_TIME("dateTime"),
    TIME("time"),
    STRING("string"),
    TEXT("text"),
    URL("url"),
    CHOICE("choice"),
    OPEN_CHOICE("open-choice"),
    ATTACHMENT("attachment"),
    REFERENCE("reference"),
    QUANTITY("quantity")
}




/**
 * A structured set of questions and their answers. The questions are ordered and grouped into coherent subsets, corresponding to the structure of the grouping of the questionnaire being responded to.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class QuestionnaireResponse(
    val status: QuestionnaireResponseStatus): DomainResource() {


    /**
     * A business identifier assigned to a particular completed (or partially completed) questionnaire.
     */
    var identifier: Identifier? = null



    /**
     * The order, proposal or plan that is fulfilled in whole or in part by this QuestionnaireResponse.  For example, a ServiceRequest seeking an intake assessment or a decision support recommendation to assess for post-partum depression.
     */
    var basedOn: List<Reference>? = null

    @JsonIgnore
    var basedOnTarget: List<Resource>? = null

    /**
     * A procedure or observation that this questionnaire was performed as part of the execution of.  For example, the surgery a checklist was executed as part of.
     */
    var partOf: List<Reference>? = null

    @JsonIgnore
    var partOfTarget: List<Resource>? = null

    /**
     * The Questionnaire that defines and organizes the questions for which answers are being provided.
     */
    var questionnaire: CanonicalType? = null



    /**
     * The subject of the questionnaire response.  This could be a patient, organization, practitioner, device, etc.  This is who/what the answers apply to, but is not necessarily the source of information.
     */
    var subject: Reference? = null

    @JsonIgnore
    var subjectTarget: Resource? = null

    /**
     * The Encounter during which this questionnaire response was created or to which the creation of this record is tightly associated.
     */
    var encounter: Reference? = null

    @JsonIgnore
    var encounterTarget: Resource? = null

    /**
     * The date and/or time that this set of answers were last changed.
     */
    var authored: DateTimeType? = null



    /**
     * Person who received the answers to the questions in the QuestionnaireResponse and recorded them in the system.
     */
    var author: Reference? = null

    @JsonIgnore
    var authorTarget: Resource? = null

    /**
     * The person who answered the questions about the subject.
     */
    var source: Reference? = null

    @JsonIgnore
    var sourceTarget: Resource? = null

    /**
     * A group or question item from the original questionnaire for which answers are provided.
     */
    var item: List<QuestionnaireResponseItem>? = null




}

/**
 * A structured set of questions and their answers. The questions are ordered and grouped into coherent subsets, corresponding to the structure of the grouping of the questionnaire being responded to.
 */
class QuestionnaireResponseAnswer: BackboneElement()
{


    /**
     *
     */
    var valueBoolean: BooleanType? = null



    /**
     *
     */
    var valueDecimal: DecimalType? = null



    /**
     *
     */
    var valueInteger: IntegerType? = null



    /**
     *
     */
    var valueDate: DateType? = null



    /**
     *
     */
    var valueDateTime: DateTimeType? = null



    /**
     *
     */
    var valueTime: TimeType? = null



    /**
     *
     */
    var valueString: StringType? = null



    /**
     *
     */
    var valueUri: UriType? = null



    /**
     *
     */
    var valueAttachment: Attachment? = null



    /**
     *
     */
    var valueCoding: Coding? = null



    /**
     *
     */
    var valueQuantity: Quantity? = null



    /**
     *
     */
    var valueReference: Reference? = null

    @JsonIgnore
    var valueReferenceTarget: Resource? = null

    /**
     * Nested groups and/or questions found within this particular answer.
     */
    var item: List<QuestionnaireResponseItem>? = null




}

/**
 * A structured set of questions and their answers. The questions are ordered and grouped into coherent subsets, corresponding to the structure of the grouping of the questionnaire being responded to.
 */
class QuestionnaireResponseItem(
    val linkId: StringType): BackboneElement() {


    /**
     * A reference to an [[[ElementDefinition]]] that provides the details for the item.
     */
    var definition: UriType? = null



    /**
     * Text that is displayed above the contents of the group or as the text of the question being answered.
     */
    var text: StringType? = null



    /**
     * The respondent's answer(s) to the question.
     */
    var answer: List<QuestionnaireResponseAnswer>? = null



    /**
     * Questions or sub-groups nested beneath a question or group.
     */
    var item: List<QuestionnaireResponseItem>? = null




}

/**
 * Lifecycle status of the questionnaire response.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class QuestionnaireResponseStatus(
    @JsonValue val text: String) {
    IN_PROGRESS("in-progress"),
    COMPLETED("completed"),
    AMENDED("amended"),
    ENTERED_IN_ERROR("entered-in-error"),
    STOPPED("stopped")
}




/**
 * A set of ordered Quantities defined by a low and high limit.
 * If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions
 */
class Range: Element()
{


    /**
     * The low limit. The boundary is inclusive.
     */
    var low: Quantity? = null



    /**
     * The high limit. The boundary is inclusive.
     */
    var high: Quantity? = null




}

/**
 * A relationship of two Quantity values - expressed as a numerator and a denominator.
 * If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions
 */
class Ratio: Element()
{


    /**
     * The value of the numerator.
     */
    var numerator: Quantity? = null



    /**
     * The value of the denominator.
     */
    var denominator: Quantity? = null




}

/**
 * A reference from one resource to another.
 * If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions
 */
class Reference: Element()
{


    /**
     * A reference to a location at which the other resource is found. The reference may be a relative reference, in which case it is relative to the service base URL, or an absolute URL that resolves to the location where the resource is found. The reference may be version specific or not. If the reference is not to a FHIR RESTful server, then it should be assumed to be version specific. Internal fragment references (start with '#') refer to contained resources.
     */
    var reference: StringType? = null



    /**
     * The expected type of the target of the reference. If both Reference.type and Reference.reference are populated and Reference.reference is a FHIR URL, both SHALL be consistent.
     *
     * The type is the Canonical URL of Resource Definition that is the type this reference refers to. References are URLs that are relative to http://hl7.org/fhir/StructureDefinition/ e.g. "Patient" is a reference to http://hl7.org/fhir/StructureDefinition/Patient. Absolute URLs are only allowed for logical models (and can only be used in references in logical models, not resources).
     */
    var type: UriType? = null



    /**
     * An identifier for the target resource. This is used when there is no way to reference the other resource directly, either because the entity it represents is not available through a FHIR server, or because there is no way for the author of the resource to convert a known identifier to an actual location. There is no requirement that a Reference.identifier point to something that is actually exposed as a FHIR instance, but it SHALL point to a business concept that would be expected to be exposed as a FHIR instance, and that instance would need to be of a FHIR resource type allowed by the reference.
     */
    var identifier: Identifier? = null



    /**
     * Plain text narrative that identifies the resource in addition to the resource reference.
     */
    var display: StringType? = null




}

/**
 * A set of flags that defines how references are supported.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class ReferenceHandlingPolicy(
    @JsonValue val text: String) {
    LITERAL("literal"),
    LOGICAL("logical"),
    RESOLVES("resolves"),
    ENFORCED("enforced"),
    LOCAL("local")
}




/**
 * Whether a reference needs to be version specific or version independent, or whether either can be used.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class ReferenceVersionRules(
    @JsonValue val text: String) {
    EITHER("either"),
    INDEPENDENT("independent"),
    SPECIFIC("specific")
}




/**
 * Related artifacts such as additional documentation, justification, or bibliographic references.
 * If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions
 */
class RelatedArtifact(
    val type: RelatedArtifactType): Element() {


    /**
     * A short label that can be used to reference the citation from elsewhere in the containing artifact, such as a footnote index.
     */
    var label: StringType? = null



    /**
     * A brief description of the document or knowledge resource being referenced, suitable for display to a consumer.
     */
    var display: StringType? = null



    /**
     * A bibliographic citation for the related artifact. This text SHOULD be formatted according to an accepted citation format.
     */
    var citation: MarkdownType? = null



    /**
     * A url for the artifact that can be followed to access the actual content.
     */
    var url: UrlType? = null



    /**
     * The document being referenced, represented as an attachment. This is exclusive with the resource element.
     */
    var document: Attachment? = null



    /**
     * The related resource, such as a library, value set, profile, or other knowledge resource.
     */
    var resource: CanonicalType? = null




}

/**
 * The type of relationship to the related artifact.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class RelatedArtifactType(
    @JsonValue val text: String) {
    DOCUMENTATION("documentation"),
    JUSTIFICATION("justification"),
    CITATION("citation"),
    PREDECESSOR("predecessor"),
    SUCCESSOR("successor"),
    DERIVED_FROM("derived-from"),
    DEPENDS_ON("depends-on"),
    COMPOSED_OF("composed-of")
}




/**
 * Information about a person that is involved in the care for a patient, but who is not the target of healthcare, nor has a formal responsibility in the care process.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class RelatedPerson(
    val patient: Reference): DomainResource() {


    /**
     * Identifier for a person within a particular scope.
     */
    var identifier: List<Identifier>? = null



    /**
     * Whether this related person record is in active use.
     */
    var active: BooleanType? = null



    /**
     * The nature of the relationship between a patient and the related person.
     */
    var relationship: List<CodeableConcept>? = null



    /**
     * A name associated with the person.
     */
    var name: List<HumanName>? = null



    /**
     * A contact detail for the person, e.g. a telephone number or an email address.
     */
    var telecom: List<ContactPoint>? = null



    /**
     * Administrative Gender - the gender that the person is considered to have for administration and record keeping purposes.
     */
    var gender: AdministrativeGender? = null



    /**
     * The date on which the related person was born.
     */
    var birthDate: DateType? = null



    /**
     * Address where the related person can be contacted or visited.
     */
    var address: List<Address>? = null



    /**
     * Image of the person.
     */
    var photo: List<Attachment>? = null



    /**
     * The period of time during which this relationship is or was active. If there are no dates defined, then the interval is unknown.
     */
    var period: Period? = null



    /**
     * A language which may be used to communicate with about the patient's health.
     */
    var communication: List<RelatedPersonCommunication>? = null




}

/**
 * Information about a person that is involved in the care for a patient, but who is not the target of healthcare, nor has a formal responsibility in the care process.
 */
class RelatedPersonCommunication(
    val language: CodeableConcept): BackboneElement() {


    /**
     * Indicates whether or not the patient prefers this language (over other languages he masters up a certain level).
     */
    var preferred: BooleanType? = null




}

/**
 *
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class RemittanceOutcome(
    @JsonValue val text: String) {
    QUEUED("queued"),
    COMPLETE("complete"),
    ERROR("error"),
    PARTIAL("partial")
}




/**
 * Type for access of external URI.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class RepositoryType(
    @JsonValue val text: String) {
    DIRECTLINK("directlink"),
    OPENAPI("openapi"),
    LOGIN("login"),
    OAUTH("oauth"),
    OTHER("other")
}




/**
 * A group of related requests that can be used to capture intended activities that have inter-dependencies such as "give this medication after that one".
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class RequestGroup(
    val status: RequestStatus,
    val intent: RequestIntent): DomainResource() {


    /**
     * Allows a service to provide a unique, business identifier for the request.
     */
    var identifier: List<Identifier>? = null



    /**
     * A canonical URL referencing a FHIR-defined protocol, guideline, orderset or other definition that is adhered to in whole or in part by this request.
     */
    var instantiatesCanonical: List<CanonicalType>? = null



    /**
     * A URL referencing an externally defined protocol, guideline, orderset or other definition that is adhered to in whole or in part by this request.
     */
    var instantiatesUri: List<UriType>? = null



    /**
     * A plan, proposal or order that is fulfilled in whole or in part by this request.
     */
    var basedOn: List<Reference>? = null

    @JsonIgnore
    var basedOnTarget: List<Resource>? = null

    /**
     * Completed or terminated request(s) whose function is taken by this new request.
     */
    var replaces: List<Reference>? = null

    @JsonIgnore
    var replacesTarget: List<Resource>? = null

    /**
     * A shared identifier common to all requests that were authorized more or less simultaneously by a single author, representing the identifier of the requisition, prescription or similar form.
     */
    var groupIdentifier: Identifier? = null



    /**
     * Indicates how quickly the request should be addressed with respect to other requests.
     */
    var priority: RequestPriority? = null



    /**
     * A code that identifies what the overall request group is.
     */
    var code: CodeableConcept? = null



    /**
     * The subject for which the request group was created.
     */
    var subject: Reference? = null

    @JsonIgnore
    var subjectTarget: Resource? = null

    /**
     * Describes the context of the request group, if any.
     */
    var encounter: Reference? = null

    @JsonIgnore
    var encounterTarget: Resource? = null

    /**
     * Indicates when the request group was created.
     */
    var authoredOn: DateTimeType? = null



    /**
     * Provides a reference to the author of the request group.
     */
    var author: Reference? = null

    @JsonIgnore
    var authorTarget: Resource? = null

    /**
     * Describes the reason for the request group in coded or textual form.
     */
    var reasonCode: List<CodeableConcept>? = null



    /**
     * Indicates another resource whose existence justifies this request group.
     */
    var reasonReference: List<Reference>? = null

    @JsonIgnore
    var reasonReferenceTarget: List<Resource>? = null

    /**
     * Provides a mechanism to communicate additional information about the response.
     */
    var note: List<Annotation>? = null



    /**
     * The actions, if any, produced by the evaluation of the artifact.
     */
    var action: List<RequestGroupAction>? = null




}

/**
 * A group of related requests that can be used to capture intended activities that have inter-dependencies such as "give this medication after that one".
 */
class RequestGroupAction: BackboneElement()
{


    /**
     * A user-visible prefix for the action.
     */
    var prefix: StringType? = null



    /**
     * The title of the action displayed to a user.
     */
    var title: StringType? = null



    /**
     * A short description of the action used to provide a summary to display to the user.
     */
    var description: StringType? = null



    /**
     * A text equivalent of the action to be performed. This provides a human-interpretable description of the action when the definition is consumed by a system that might not be capable of interpreting it dynamically.
     */
    var textEquivalent: StringType? = null



    /**
     * Indicates how quickly the action should be addressed with respect to other actions.
     */
    var priority: RequestPriority? = null



    /**
     * A code that provides meaning for the action or action group. For example, a section may have a LOINC code for a section of a documentation template.
     */
    var code: List<CodeableConcept>? = null



    /**
     * Didactic or other informational resources associated with the action that can be provided to the CDS recipient. Information resources can include inline text commentary and links to web resources.
     */
    var documentation: List<RelatedArtifact>? = null



    /**
     * An expression that describes applicability criteria, or start/stop conditions for the action.
     */
    var condition: List<RequestGroupCondition>? = null



    /**
     * A relationship to another action such as "before" or "30-60 minutes after start of".
     */
    var relatedAction: List<RequestGroupRelatedAction>? = null



    /**
     *
     */
    var timingDateTime: DateTimeType? = null



    /**
     *
     */
    var timingAge: Age? = null



    /**
     *
     */
    var timingPeriod: Period? = null



    /**
     *
     */
    var timingDuration: Duration? = null



    /**
     *
     */
    var timingRange: Range? = null



    /**
     *
     */
    var timingTiming: Timing? = null



    /**
     * The participant that should perform or be responsible for this action.
     */
    var participant: List<Reference>? = null

    @JsonIgnore
    var participantTarget: List<Resource>? = null

    /**
     * The type of action to perform (create, update, remove).
     */
    var type: CodeableConcept? = null



    /**
     * Defines the grouping behavior for the action and its children.
     */
    var groupingBehavior: ActionGroupingBehavior? = null



    /**
     * Defines the selection behavior for the action and its children.
     */
    var selectionBehavior: ActionSelectionBehavior? = null



    /**
     * Defines expectations around whether an action is required.
     */
    var requiredBehavior: ActionRequiredBehavior? = null



    /**
     * Defines whether the action should usually be preselected.
     */
    var precheckBehavior: ActionPrecheckBehavior? = null



    /**
     * Defines whether the action can be selected multiple times.
     */
    var cardinalityBehavior: ActionCardinalityBehavior? = null



    /**
     * The resource that is the target of the action (e.g. CommunicationRequest).
     */
    var resource: Reference? = null

    @JsonIgnore
    var resourceTarget: Resource? = null

    /**
     * Sub actions.
     */
    var action: List<RequestGroupAction>? = null




}

/**
 * A group of related requests that can be used to capture intended activities that have inter-dependencies such as "give this medication after that one".
 */
class RequestGroupCondition(
    val kind: ActionConditionKind): BackboneElement() {


    /**
     * An expression that returns true or false, indicating whether or not the condition is satisfied.
     */
    var expression: Expression? = null




}

/**
 * A group of related requests that can be used to capture intended activities that have inter-dependencies such as "give this medication after that one".
 */
class RequestGroupRelatedAction(
    val actionId: IdType,
    val relationship: ActionRelationshipType): BackboneElement() {


    /**
     *
     */
    var offsetDuration: Duration? = null



    /**
     *
     */
    var offsetRange: Range? = null




}

/**
 * Codes indicating the degree of authority/intentionality associated with a request.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class RequestIntent(
    @JsonValue val text: String) {
    PROPOSAL("proposal"),
    PLAN("plan"),
    DIRECTIVE("directive"),
    ORDER("order"),
    ORIGINAL_ORDER("original-order"),
    REFLEX_ORDER("reflex-order"),
    FILLER_ORDER("filler-order"),
    INSTANCE_ORDER("instance-order"),
    OPTION("option")
}




/**
 * Identifies the level of importance to be assigned to actioning the request.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class RequestPriority(
    @JsonValue val text: String) {
    ROUTINE("routine"),
    URGENT("urgent"),
    ASAP("asap"),
    STAT("stat")
}




/**
 * The kind of activity the definition is describing.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class RequestResourceType(
    @JsonValue val text: String) {
    APPOINTMENT("Appointment"),
    APPOINTMENT_RESPONSE("AppointmentResponse"),
    CARE_PLAN("CarePlan"),
    CLAIM("Claim"),
    COMMUNICATION_REQUEST("CommunicationRequest"),
    CONTRACT("Contract"),
    DEVICE_REQUEST("DeviceRequest"),
    ENROLLMENT_REQUEST("EnrollmentRequest"),
    IMMUNIZATION_RECOMMENDATION("ImmunizationRecommendation"),
    MEDICATION_REQUEST("MedicationRequest"),
    NUTRITION_ORDER("NutritionOrder"),
    SERVICE_REQUEST("ServiceRequest"),
    SUPPLY_REQUEST("SupplyRequest"),
    TASK("Task"),
    VISION_PRESCRIPTION("VisionPrescription")
}




/**
 * Indicates whether the plan is currently being acted upon, represents future intentions or is now a historical record.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class RequestStatus(
    @JsonValue val text: String) {
    DRAFT("draft"),
    ACTIVE("active"),
    ON_HOLD("on-hold"),
    REVOKED("revoked"),
    COMPLETED("completed"),
    ENTERED_IN_ERROR("entered-in-error"),
    UNKNOWN("unknown")
}




/**
 * The ResearchDefinition resource describes the conditional state (population and any exposures being compared within the population) and outcome (if specified) that the knowledge (evidence, assertion, recommendation) is about.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class ResearchDefinition(
    val status: PublicationStatus,
    val population: Reference): DomainResource() {


    /**
     * An absolute URI that is used to identify this research definition when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which at which an authoritative instance of this research definition is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the research definition is stored on different servers.
     */
    var url: UriType? = null



    /**
     * A formal identifier that is used to identify this research definition when it is represented in other formats, or referenced in a specification, model, design or an instance.
     */
    var identifier: List<Identifier>? = null



    /**
     * The identifier that is used to identify this version of the research definition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the research definition author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence. To provide a version consistent with the Decision Support Service specification, use the format Major.Minor.Revision (e.g. 1.0.0). For more information on versioning knowledge assets, refer to the Decision Support Service specification. Note that a version is required for non-experimental active artifacts.
     */
    var version: StringType? = null



    /**
     * A natural language name identifying the research definition. This name should be usable as an identifier for the module by machine processing applications such as code generation.
     */
    var name: StringType? = null



    /**
     * A short, descriptive, user-friendly title for the research definition.
     */
    var title: StringType? = null



    /**
     * The short title provides an alternate title for use in informal descriptive contexts where the full, formal title is not necessary.
     */
    var shortTitle: StringType? = null



    /**
     * An explanatory or alternate title for the ResearchDefinition giving additional information about its content.
     */
    var subtitle: StringType? = null



    /**
     * A Boolean value to indicate that this research definition is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
     */
    var experimental: BooleanType? = null



    /**
     *
     */
    var subjectCodeableConcept: CodeableConcept? = null



    /**
     *
     */
    var subjectReference: Reference? = null

    @JsonIgnore
    var subjectReferenceTarget: Resource? = null

    /**
     * The date  (and optionally time) when the research definition was published. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the research definition changes.
     */
    var date: DateTimeType? = null



    /**
     * The name of the organization or individual that published the research definition.
     */
    var publisher: StringType? = null



    /**
     * Contact details to assist a user in finding and communicating with the publisher.
     */
    var contact: List<ContactDetail>? = null



    /**
     * A free text natural language description of the research definition from a consumer's perspective.
     */
    var description: MarkdownType? = null



    /**
     * A human-readable string to clarify or explain concepts about the resource.
     */
    var comment: List<StringType>? = null



    /**
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate research definition instances.
     */
    var useContext: List<UsageContext>? = null



    /**
     * A legal or geographic region in which the research definition is intended to be used.
     */
    var jurisdiction: List<CodeableConcept>? = null



    /**
     * Explanation of why this research definition is needed and why it has been designed as it has.
     */
    var purpose: MarkdownType? = null



    /**
     * A detailed description, from a clinical perspective, of how the ResearchDefinition is used.
     */
    var usage: StringType? = null



    /**
     * A copyright statement relating to the research definition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the research definition.
     */
    var copyright: MarkdownType? = null



    /**
     * The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage.
     */
    var approvalDate: DateType? = null



    /**
     * The date on which the resource content was last reviewed. Review happens periodically after approval but does not change the original approval date.
     */
    var lastReviewDate: DateType? = null



    /**
     * The period during which the research definition content was or is planned to be in active use.
     */
    var effectivePeriod: Period? = null



    /**
     * Descriptive topics related to the content of the ResearchDefinition. Topics provide a high-level categorization grouping types of ResearchDefinitions that can be useful for filtering and searching.
     */
    var topic: List<CodeableConcept>? = null



    /**
     * An individiual or organization primarily involved in the creation and maintenance of the content.
     */
    var author: List<ContactDetail>? = null



    /**
     * An individual or organization primarily responsible for internal coherence of the content.
     */
    var editor: List<ContactDetail>? = null



    /**
     * An individual or organization primarily responsible for review of some aspect of the content.
     */
    var reviewer: List<ContactDetail>? = null



    /**
     * An individual or organization responsible for officially endorsing the content for use in some setting.
     */
    var endorser: List<ContactDetail>? = null



    /**
     * Related artifacts such as additional documentation, justification, or bibliographic references.
     */
    var relatedArtifact: List<RelatedArtifact>? = null



    /**
     * A reference to a Library resource containing the formal logic used by the ResearchDefinition.
     */
    var library: List<CanonicalType>? = null



    /**
     * A reference to a ResearchElementDefinition resource that defines the exposure for the research.
     */
    var exposure: Reference? = null

    @JsonIgnore
    var exposureTarget: Resource? = null

    /**
     * A reference to a ResearchElementDefinition resource that defines the exposureAlternative for the research.
     */
    var exposureAlternative: Reference? = null

    @JsonIgnore
    var exposureAlternativeTarget: Resource? = null

    /**
     * A reference to a ResearchElementDefinition resomece that defines the outcome for the research.
     */
    var outcome: Reference? = null

    @JsonIgnore
    var outcomeTarget: Resource? = null


}

/**
 * The ResearchElementDefinition resource describes a "PICO" element that knowledge (evidence, assertion, recommendation) is about.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class ResearchElementDefinition(
    val status: PublicationStatus,
    val type: ResearchElementType,
    val characteristic: List<ResearchElementDefinitionCharacteristic>): DomainResource() {


    /**
     * An absolute URI that is used to identify this research element definition when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which at which an authoritative instance of this research element definition is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the research element definition is stored on different servers.
     */
    var url: UriType? = null



    /**
     * A formal identifier that is used to identify this research element definition when it is represented in other formats, or referenced in a specification, model, design or an instance.
     */
    var identifier: List<Identifier>? = null



    /**
     * The identifier that is used to identify this version of the research element definition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the research element definition author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence. To provide a version consistent with the Decision Support Service specification, use the format Major.Minor.Revision (e.g. 1.0.0). For more information on versioning knowledge assets, refer to the Decision Support Service specification. Note that a version is required for non-experimental active artifacts.
     */
    var version: StringType? = null



    /**
     * A natural language name identifying the research element definition. This name should be usable as an identifier for the module by machine processing applications such as code generation.
     */
    var name: StringType? = null



    /**
     * A short, descriptive, user-friendly title for the research element definition.
     */
    var title: StringType? = null



    /**
     * The short title provides an alternate title for use in informal descriptive contexts where the full, formal title is not necessary.
     */
    var shortTitle: StringType? = null



    /**
     * An explanatory or alternate title for the ResearchElementDefinition giving additional information about its content.
     */
    var subtitle: StringType? = null



    /**
     * A Boolean value to indicate that this research element definition is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
     */
    var experimental: BooleanType? = null



    /**
     *
     */
    var subjectCodeableConcept: CodeableConcept? = null



    /**
     *
     */
    var subjectReference: Reference? = null

    @JsonIgnore
    var subjectReferenceTarget: Resource? = null

    /**
     * The date  (and optionally time) when the research element definition was published. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the research element definition changes.
     */
    var date: DateTimeType? = null



    /**
     * The name of the organization or individual that published the research element definition.
     */
    var publisher: StringType? = null



    /**
     * Contact details to assist a user in finding and communicating with the publisher.
     */
    var contact: List<ContactDetail>? = null



    /**
     * A free text natural language description of the research element definition from a consumer's perspective.
     */
    var description: MarkdownType? = null



    /**
     * A human-readable string to clarify or explain concepts about the resource.
     */
    var comment: List<StringType>? = null



    /**
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate research element definition instances.
     */
    var useContext: List<UsageContext>? = null



    /**
     * A legal or geographic region in which the research element definition is intended to be used.
     */
    var jurisdiction: List<CodeableConcept>? = null



    /**
     * Explanation of why this research element definition is needed and why it has been designed as it has.
     */
    var purpose: MarkdownType? = null



    /**
     * A detailed description, from a clinical perspective, of how the ResearchElementDefinition is used.
     */
    var usage: StringType? = null



    /**
     * A copyright statement relating to the research element definition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the research element definition.
     */
    var copyright: MarkdownType? = null



    /**
     * The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage.
     */
    var approvalDate: DateType? = null



    /**
     * The date on which the resource content was last reviewed. Review happens periodically after approval but does not change the original approval date.
     */
    var lastReviewDate: DateType? = null



    /**
     * The period during which the research element definition content was or is planned to be in active use.
     */
    var effectivePeriod: Period? = null



    /**
     * Descriptive topics related to the content of the ResearchElementDefinition. Topics provide a high-level categorization grouping types of ResearchElementDefinitions that can be useful for filtering and searching.
     */
    var topic: List<CodeableConcept>? = null



    /**
     * An individiual or organization primarily involved in the creation and maintenance of the content.
     */
    var author: List<ContactDetail>? = null



    /**
     * An individual or organization primarily responsible for internal coherence of the content.
     */
    var editor: List<ContactDetail>? = null



    /**
     * An individual or organization primarily responsible for review of some aspect of the content.
     */
    var reviewer: List<ContactDetail>? = null



    /**
     * An individual or organization responsible for officially endorsing the content for use in some setting.
     */
    var endorser: List<ContactDetail>? = null



    /**
     * Related artifacts such as additional documentation, justification, or bibliographic references.
     */
    var relatedArtifact: List<RelatedArtifact>? = null



    /**
     * A reference to a Library resource containing the formal logic used by the ResearchElementDefinition.
     */
    var library: List<CanonicalType>? = null



    /**
     * The type of the outcome (e.g. Dichotomous, Continuous, or Descriptive).
     */
    var variableType: VariableType? = null




}

/**
 * The ResearchElementDefinition resource describes a "PICO" element that knowledge (evidence, assertion, recommendation) is about.
 */
class ResearchElementDefinitionCharacteristic: BackboneElement()
{


    /**
     *
     */
    var definitionCodeableConcept: CodeableConcept? = null



    /**
     *
     */
    var definitionCanonical: CanonicalType? = null



    /**
     *
     */
    var definitionExpression: Expression? = null



    /**
     *
     */
    var definitionDataRequirement: DataRequirement? = null



    /**
     * Use UsageContext to define the members of the population, such as Age Ranges, Genders, Settings.
     */
    var usageContext: List<UsageContext>? = null



    /**
     * When true, members with this characteristic are excluded from the element.
     */
    var exclude: BooleanType? = null



    /**
     * Specifies the UCUM unit for the outcome.
     */
    var unitOfMeasure: CodeableConcept? = null



    /**
     * A narrative description of the time period the study covers.
     */
    var studyEffectiveDescription: StringType? = null



    /**
     *
     */
    var studyEffectiveDateTime: DateTimeType? = null



    /**
     *
     */
    var studyEffectivePeriod: Period? = null



    /**
     *
     */
    var studyEffectiveDuration: Duration? = null



    /**
     *
     */
    var studyEffectiveTiming: Timing? = null



    /**
     * Indicates duration from the study initiation.
     */
    var studyEffectiveTimeFromStart: Duration? = null



    /**
     * Indicates how elements are aggregated within the study effective period.
     */
    var studyEffectiveGroupMeasure: GroupMeasure? = null



    /**
     * A narrative description of the time period the study covers.
     */
    var participantEffectiveDescription: StringType? = null



    /**
     *
     */
    var participantEffectiveDateTime: DateTimeType? = null



    /**
     *
     */
    var participantEffectivePeriod: Period? = null



    /**
     *
     */
    var participantEffectiveDuration: Duration? = null



    /**
     *
     */
    var participantEffectiveTiming: Timing? = null



    /**
     * Indicates duration from the participant's study entry.
     */
    var participantEffectiveTimeFromStart: Duration? = null



    /**
     * Indicates how elements are aggregated within the study effective period.
     */
    var participantEffectiveGroupMeasure: GroupMeasure? = null




}

/**
 * The possible types of research elements (E.g. Population, Exposure, Outcome).
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class ResearchElementType(
    @JsonValue val text: String) {
    POPULATION("population"),
    EXPOSURE("exposure"),
    OUTCOME("outcome")
}




/**
 * A process where a researcher or organization plans and then executes a series of steps intended to increase the field of healthcare-related knowledge.  This includes studies of safety, efficacy, comparative effectiveness and other information about medications, devices, therapies and other interventional and investigative techniques.  A ResearchStudy involves the gathering of information about human or animal subjects.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class ResearchStudy(
    val status: ResearchStudyStatus): DomainResource() {


    /**
     * Identifiers assigned to this research study by the sponsor or other systems.
     */
    var identifier: List<Identifier>? = null



    /**
     * A short, descriptive user-friendly label for the study.
     */
    var title: StringType? = null



    /**
     * The set of steps expected to be performed as part of the execution of the study.
     */
    var protocol: List<Reference>? = null

    @JsonIgnore
    var protocolTarget: List<Resource>? = null

    /**
     * A larger research study of which this particular study is a component or step.
     */
    var partOf: List<Reference>? = null

    @JsonIgnore
    var partOfTarget: List<Resource>? = null

    /**
     * The type of study based upon the intent of the study's activities. A classification of the intent of the study.
     */
    var primaryPurposeType: CodeableConcept? = null



    /**
     * The stage in the progression of a therapy from initial experimental use in humans in clinical trials to post-market evaluation.
     */
    var phase: CodeableConcept? = null



    /**
     * Codes categorizing the type of study such as investigational vs. observational, type of blinding, type of randomization, safety vs. efficacy, etc.
     */
    var category: List<CodeableConcept>? = null



    /**
     * The medication(s), food(s), therapy(ies), device(s) or other concerns or interventions that the study is seeking to gain more information about.
     */
    var focus: List<CodeableConcept>? = null



    /**
     * The condition that is the focus of the study.  For example, In a study to examine risk factors for Lupus, might have as an inclusion criterion "healthy volunteer", but the target condition code would be a Lupus SNOMED code.
     */
    var condition: List<CodeableConcept>? = null



    /**
     * Contact details to assist a user in learning more about or engaging with the study.
     */
    var contact: List<ContactDetail>? = null



    /**
     * Citations, references and other related documents.
     */
    var relatedArtifact: List<RelatedArtifact>? = null



    /**
     * Key terms to aid in searching for or filtering the study.
     */
    var keyword: List<CodeableConcept>? = null



    /**
     * Indicates a country, state or other region where the study is taking place.
     */
    var location: List<CodeableConcept>? = null



    /**
     * A full description of how the study is being conducted.
     */
    var description: MarkdownType? = null



    /**
     * Reference to a Group that defines the criteria for and quantity of subjects participating in the study.  E.g. " 200 female Europeans between the ages of 20 and 45 with early onset diabetes".
     */
    var enrollment: List<Reference>? = null

    @JsonIgnore
    var enrollmentTarget: List<Resource>? = null

    /**
     * Identifies the start date and the expected (or actual, depending on status) end date for the study.
     */
    var period: Period? = null



    /**
     * An organization that initiates the investigation and is legally responsible for the study.
     */
    var sponsor: Reference? = null

    @JsonIgnore
    var sponsorTarget: Resource? = null

    /**
     * A researcher in a study who oversees multiple aspects of the study, such as concept development, protocol writing, protocol submission for IRB approval, participant recruitment, informed consent, data collection, analysis, interpretation and presentation.
     */
    var principalInvestigator: Reference? = null

    @JsonIgnore
    var principalInvestigatorTarget: Resource? = null

    /**
     * A facility in which study activities are conducted.
     */
    var site: List<Reference>? = null

    @JsonIgnore
    var siteTarget: List<Resource>? = null

    /**
     * A description and/or code explaining the premature termination of the study.
     */
    var reasonStopped: CodeableConcept? = null



    /**
     * Comments made about the study by the performer, subject or other participants.
     */
    var note: List<Annotation>? = null



    /**
     * Describes an expected sequence of events for one of the participants of a study.  E.g. Exposure to drug A, wash-out, exposure to drug B, wash-out, follow-up.
     */
    var arm: List<ResearchStudyArm>? = null



    /**
     * A goal that the study is aiming to achieve in terms of a scientific question to be answered by the analysis of data collected during the study.
     */
    var objective: List<ResearchStudyObjective>? = null




}

/**
 * A process where a researcher or organization plans and then executes a series of steps intended to increase the field of healthcare-related knowledge.  This includes studies of safety, efficacy, comparative effectiveness and other information about medications, devices, therapies and other interventional and investigative techniques.  A ResearchStudy involves the gathering of information about human or animal subjects.
 */
class ResearchStudyArm(
    val name: StringType): BackboneElement() {


    /**
     * Categorization of study arm, e.g. experimental, active comparator, placebo comparater.
     */
    var type: CodeableConcept? = null



    /**
     * A succinct description of the path through the study that would be followed by a subject adhering to this arm.
     */
    var description: StringType? = null




}

/**
 * A process where a researcher or organization plans and then executes a series of steps intended to increase the field of healthcare-related knowledge.  This includes studies of safety, efficacy, comparative effectiveness and other information about medications, devices, therapies and other interventional and investigative techniques.  A ResearchStudy involves the gathering of information about human or animal subjects.
 */
class ResearchStudyObjective: BackboneElement()
{


    /**
     * Unique, human-readable label for this objective of the study.
     */
    var name: StringType? = null



    /**
     * The kind of study objective.
     */
    var type: CodeableConcept? = null




}

/**
 * Codes that convey the current status of the research study.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class ResearchStudyStatus(
    @JsonValue val text: String) {
    ACTIVE("active"),
    ADMINISTRATIVELY_COMPLETED("administratively-completed"),
    APPROVED("approved"),
    CLOSED_TO_ACCRUAL("closed-to-accrual"),
    CLOSED_TO_ACCRUAL_AND_INTERVENTION("closed-to-accrual-and-intervention"),
    COMPLETED("completed"),
    DISAPPROVED("disapproved"),
    IN_REVIEW("in-review"),
    TEMPORARILY_CLOSED_TO_ACCRUAL("temporarily-closed-to-accrual"),
    TEMPORARILY_CLOSED_TO_ACCRUAL_AND_INTERVENTION("temporarily-closed-to-accrual-and-intervention"),
    WITHDRAWN("withdrawn")
}




/**
 * A physical entity which is the primary unit of operational and/or administrative interest in a study.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class ResearchSubject(
    val status: ResearchSubjectStatus,
    val study: Reference,
    val individual: Reference): DomainResource() {


    /**
     * Identifiers assigned to this research subject for a study.
     */
    var identifier: List<Identifier>? = null



    /**
     * The dates the subject began and ended their participation in the study.
     */
    var period: Period? = null



    /**
     * The name of the arm in the study the subject is expected to follow as part of this study.
     */
    var assignedArm: StringType? = null



    /**
     * The name of the arm in the study the subject actually followed as part of this study.
     */
    var actualArm: StringType? = null



    /**
     * A record of the patient's informed agreement to participate in the study.
     */
    var consent: Reference? = null

    @JsonIgnore
    var consentTarget: Resource? = null


}

/**
 * Indicates the progression of a study subject through a study.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class ResearchSubjectStatus(
    @JsonValue val text: String) {
    CANDIDATE("candidate"),
    ELIGIBLE("eligible"),
    FOLLOW_UP("follow-up"),
    INELIGIBLE("ineligible"),
    NOT_REGISTERED("not-registered"),
    OFF_STUDY("off-study"),
    ON_STUDY("on-study"),
    ON_STUDY_INTERVENTION("on-study-intervention"),
    ON_STUDY_OBSERVATION("on-study-observation"),
    PENDING_ON_STUDY("pending-on-study"),
    POTENTIAL_CANDIDATE("potential-candidate"),
    SCREENING("screening"),
    WITHDRAWN("withdrawn")
}




/**
 * This is the base resource type for everything.
 */
@JsonTypeInfo(
    use = JsonTypeInfo.Id.NAME,
    include = JsonTypeInfo.As.PROPERTY,
    property = "resourceType"
)
@JsonSubTypes(
    JsonSubTypes.Type(
        value = Account::class,
        name = "Account"
    ),
    JsonSubTypes.Type(
        value = ActivityDefinition::class,
        name = "ActivityDefinition"
    ),
    JsonSubTypes.Type(
        value = AdverseEvent::class,
        name = "AdverseEvent"
    ),
    JsonSubTypes.Type(
        value = AllergyIntolerance::class,
        name = "AllergyIntolerance"
    ),
    JsonSubTypes.Type(
        value = Appointment::class,
        name = "Appointment"
    ),
    JsonSubTypes.Type(
        value = AppointmentResponse::class,
        name = "AppointmentResponse"
    ),
    JsonSubTypes.Type(
        value = AuditEvent::class,
        name = "AuditEvent"
    ),
    JsonSubTypes.Type(
        value = Basic::class,
        name = "Basic"
    ),
    JsonSubTypes.Type(
        value = Binary::class,
        name = "Binary"
    ),
    JsonSubTypes.Type(
        value = BiologicallyDerivedProduct::class,
        name = "BiologicallyDerivedProduct"
    ),
    JsonSubTypes.Type(
        value = BodyStructure::class,
        name = "BodyStructure"
    ),
    JsonSubTypes.Type(
        value = Bundle::class,
        name = "Bundle"
    ),
    JsonSubTypes.Type(
        value = CapabilityStatement::class,
        name = "CapabilityStatement"
    ),
    JsonSubTypes.Type(
        value = CarePlan::class,
        name = "CarePlan"
    ),
    JsonSubTypes.Type(
        value = CareTeam::class,
        name = "CareTeam"
    ),
    JsonSubTypes.Type(
        value = CatalogEntry::class,
        name = "CatalogEntry"
    ),
    JsonSubTypes.Type(
        value = ChargeItem::class,
        name = "ChargeItem"
    ),
    JsonSubTypes.Type(
        value = ChargeItemDefinition::class,
        name = "ChargeItemDefinition"
    ),
    JsonSubTypes.Type(
        value = Claim::class,
        name = "Claim"
    ),
    JsonSubTypes.Type(
        value = ClaimResponse::class,
        name = "ClaimResponse"
    ),
    JsonSubTypes.Type(
        value = ClinicalImpression::class,
        name = "ClinicalImpression"
    ),
    JsonSubTypes.Type(
        value = CodeSystem::class,
        name = "CodeSystem"
    ),
    JsonSubTypes.Type(
        value = Communication::class,
        name = "Communication"
    ),
    JsonSubTypes.Type(
        value = CommunicationRequest::class,
        name = "CommunicationRequest"
    ),
    JsonSubTypes.Type(
        value = CompartmentDefinition::class,
        name = "CompartmentDefinition"
    ),
    JsonSubTypes.Type(
        value = Composition::class,
        name = "Composition"
    ),
    JsonSubTypes.Type(
        value = ConceptMap::class,
        name = "ConceptMap"
    ),
    JsonSubTypes.Type(
        value = Condition::class,
        name = "Condition"
    ),
    JsonSubTypes.Type(
        value = Consent::class,
        name = "Consent"
    ),
    JsonSubTypes.Type(
        value = Contract::class,
        name = "Contract"
    ),
    JsonSubTypes.Type(
        value = Coverage::class,
        name = "Coverage"
    ),
    JsonSubTypes.Type(
        value = CoverageEligibilityRequest::class,
        name = "CoverageEligibilityRequest"
    ),
    JsonSubTypes.Type(
        value = CoverageEligibilityResponse::class,
        name = "CoverageEligibilityResponse"
    ),
    JsonSubTypes.Type(
        value = DetectedIssue::class,
        name = "DetectedIssue"
    ),
    JsonSubTypes.Type(
        value = Device::class,
        name = "Device"
    ),
    JsonSubTypes.Type(
        value = DeviceDefinition::class,
        name = "DeviceDefinition"
    ),
    JsonSubTypes.Type(
        value = DeviceMetric::class,
        name = "DeviceMetric"
    ),
    JsonSubTypes.Type(
        value = DeviceRequest::class,
        name = "DeviceRequest"
    ),
    JsonSubTypes.Type(
        value = DeviceUseStatement::class,
        name = "DeviceUseStatement"
    ),
    JsonSubTypes.Type(
        value = DiagnosticReport::class,
        name = "DiagnosticReport"
    ),
    JsonSubTypes.Type(
        value = DocumentManifest::class,
        name = "DocumentManifest"
    ),
    JsonSubTypes.Type(
        value = DocumentReference::class,
        name = "DocumentReference"
    ),
    JsonSubTypes.Type(
        value = DomainResource::class,
        name = "DomainResource"
    ),
    JsonSubTypes.Type(
        value = EffectEvidenceSynthesis::class,
        name = "EffectEvidenceSynthesis"
    ),
    JsonSubTypes.Type(
        value = Encounter::class,
        name = "Encounter"
    ),
    JsonSubTypes.Type(
        value = Endpoint::class,
        name = "Endpoint"
    ),
    JsonSubTypes.Type(
        value = EnrollmentRequest::class,
        name = "EnrollmentRequest"
    ),
    JsonSubTypes.Type(
        value = EnrollmentResponse::class,
        name = "EnrollmentResponse"
    ),
    JsonSubTypes.Type(
        value = EpisodeOfCare::class,
        name = "EpisodeOfCare"
    ),
    JsonSubTypes.Type(
        value = EventDefinition::class,
        name = "EventDefinition"
    ),
    JsonSubTypes.Type(
        value = Evidence::class,
        name = "Evidence"
    ),
    JsonSubTypes.Type(
        value = EvidenceVariable::class,
        name = "EvidenceVariable"
    ),
    JsonSubTypes.Type(
        value = ExampleScenario::class,
        name = "ExampleScenario"
    ),
    JsonSubTypes.Type(
        value = ExplanationOfBenefit::class,
        name = "ExplanationOfBenefit"
    ),
    JsonSubTypes.Type(
        value = FamilyMemberHistory::class,
        name = "FamilyMemberHistory"
    ),
    JsonSubTypes.Type(
        value = Flag::class,
        name = "Flag"
    ),
    JsonSubTypes.Type(
        value = Goal::class,
        name = "Goal"
    ),
    JsonSubTypes.Type(
        value = GraphDefinition::class,
        name = "GraphDefinition"
    ),
    JsonSubTypes.Type(
        value = Group::class,
        name = "Group"
    ),
    JsonSubTypes.Type(
        value = GuidanceResponse::class,
        name = "GuidanceResponse"
    ),
    JsonSubTypes.Type(
        value = HealthcareService::class,
        name = "HealthcareService"
    ),
    JsonSubTypes.Type(
        value = ImagingStudy::class,
        name = "ImagingStudy"
    ),
    JsonSubTypes.Type(
        value = Immunization::class,
        name = "Immunization"
    ),
    JsonSubTypes.Type(
        value = ImmunizationEvaluation::class,
        name = "ImmunizationEvaluation"
    ),
    JsonSubTypes.Type(
        value = ImmunizationRecommendation::class,
        name = "ImmunizationRecommendation"
    ),
    JsonSubTypes.Type(
        value = ImplementationGuide::class,
        name = "ImplementationGuide"
    ),
    JsonSubTypes.Type(
        value = InsurancePlan::class,
        name = "InsurancePlan"
    ),
    JsonSubTypes.Type(
        value = Invoice::class,
        name = "Invoice"
    ),
    JsonSubTypes.Type(
        value = Library::class,
        name = "Library"
    ),
    JsonSubTypes.Type(
        value = Linkage::class,
        name = "Linkage"
    ),
    JsonSubTypes.Type(
        value = List::class,
        name = "List"
    ),
    JsonSubTypes.Type(
        value = Location::class,
        name = "Location"
    ),
    JsonSubTypes.Type(
        value = Measure::class,
        name = "Measure"
    ),
    JsonSubTypes.Type(
        value = MeasureReport::class,
        name = "MeasureReport"
    ),
    JsonSubTypes.Type(
        value = Media::class,
        name = "Media"
    ),
    JsonSubTypes.Type(
        value = Medication::class,
        name = "Medication"
    ),
    JsonSubTypes.Type(
        value = MedicationAdministration::class,
        name = "MedicationAdministration"
    ),
    JsonSubTypes.Type(
        value = MedicationDispense::class,
        name = "MedicationDispense"
    ),
    JsonSubTypes.Type(
        value = MedicationKnowledge::class,
        name = "MedicationKnowledge"
    ),
    JsonSubTypes.Type(
        value = MedicationRequest::class,
        name = "MedicationRequest"
    ),
    JsonSubTypes.Type(
        value = MedicationStatement::class,
        name = "MedicationStatement"
    ),
    JsonSubTypes.Type(
        value = MedicinalProduct::class,
        name = "MedicinalProduct"
    ),
    JsonSubTypes.Type(
        value = MedicinalProductAuthorization::class,
        name = "MedicinalProductAuthorization"
    ),
    JsonSubTypes.Type(
        value = MedicinalProductContraindication::class,
        name = "MedicinalProductContraindication"
    ),
    JsonSubTypes.Type(
        value = MedicinalProductIndication::class,
        name = "MedicinalProductIndication"
    ),
    JsonSubTypes.Type(
        value = MedicinalProductIngredient::class,
        name = "MedicinalProductIngredient"
    ),
    JsonSubTypes.Type(
        value = MedicinalProductInteraction::class,
        name = "MedicinalProductInteraction"
    ),
    JsonSubTypes.Type(
        value = MedicinalProductManufactured::class,
        name = "MedicinalProductManufactured"
    ),
    JsonSubTypes.Type(
        value = MedicinalProductPackaged::class,
        name = "MedicinalProductPackaged"
    ),
    JsonSubTypes.Type(
        value = MedicinalProductPharmaceutical::class,
        name = "MedicinalProductPharmaceutical"
    ),
    JsonSubTypes.Type(
        value = MedicinalProductUndesirableEffect::class,
        name = "MedicinalProductUndesirableEffect"
    ),
    JsonSubTypes.Type(
        value = MessageDefinition::class,
        name = "MessageDefinition"
    ),
    JsonSubTypes.Type(
        value = MessageHeader::class,
        name = "MessageHeader"
    ),
    JsonSubTypes.Type(
        value = MolecularSequence::class,
        name = "MolecularSequence"
    ),
    JsonSubTypes.Type(
        value = NamingSystem::class,
        name = "NamingSystem"
    ),
    JsonSubTypes.Type(
        value = NutritionOrder::class,
        name = "NutritionOrder"
    ),
    JsonSubTypes.Type(
        value = Observation::class,
        name = "Observation"
    ),
    JsonSubTypes.Type(
        value = ObservationDefinition::class,
        name = "ObservationDefinition"
    ),
    JsonSubTypes.Type(
        value = OperationDefinition::class,
        name = "OperationDefinition"
    ),
    JsonSubTypes.Type(
        value = OperationOutcome::class,
        name = "OperationOutcome"
    ),
    JsonSubTypes.Type(
        value = Organization::class,
        name = "Organization"
    ),
    JsonSubTypes.Type(
        value = OrganizationAffiliation::class,
        name = "OrganizationAffiliation"
    ),
    JsonSubTypes.Type(
        value = Parameters::class,
        name = "Parameters"
    ),
    JsonSubTypes.Type(
        value = Patient::class,
        name = "Patient"
    ),
    JsonSubTypes.Type(
        value = PaymentNotice::class,
        name = "PaymentNotice"
    ),
    JsonSubTypes.Type(
        value = PaymentReconciliation::class,
        name = "PaymentReconciliation"
    ),
    JsonSubTypes.Type(
        value = Person::class,
        name = "Person"
    ),
    JsonSubTypes.Type(
        value = PlanDefinition::class,
        name = "PlanDefinition"
    ),
    JsonSubTypes.Type(
        value = Practitioner::class,
        name = "Practitioner"
    ),
    JsonSubTypes.Type(
        value = PractitionerRole::class,
        name = "PractitionerRole"
    ),
    JsonSubTypes.Type(
        value = Procedure::class,
        name = "Procedure"
    ),
    JsonSubTypes.Type(
        value = Provenance::class,
        name = "Provenance"
    ),
    JsonSubTypes.Type(
        value = Questionnaire::class,
        name = "Questionnaire"
    ),
    JsonSubTypes.Type(
        value = QuestionnaireResponse::class,
        name = "QuestionnaireResponse"
    ),
    JsonSubTypes.Type(
        value = RelatedPerson::class,
        name = "RelatedPerson"
    ),
    JsonSubTypes.Type(
        value = RequestGroup::class,
        name = "RequestGroup"
    ),
    JsonSubTypes.Type(
        value = ResearchDefinition::class,
        name = "ResearchDefinition"
    ),
    JsonSubTypes.Type(
        value = ResearchElementDefinition::class,
        name = "ResearchElementDefinition"
    ),
    JsonSubTypes.Type(
        value = ResearchStudy::class,
        name = "ResearchStudy"
    ),
    JsonSubTypes.Type(
        value = ResearchSubject::class,
        name = "ResearchSubject"
    ),
    JsonSubTypes.Type(
        value = RiskAssessment::class,
        name = "RiskAssessment"
    ),
    JsonSubTypes.Type(
        value = RiskEvidenceSynthesis::class,
        name = "RiskEvidenceSynthesis"
    ),
    JsonSubTypes.Type(
        value = Schedule::class,
        name = "Schedule"
    ),
    JsonSubTypes.Type(
        value = SearchParameter::class,
        name = "SearchParameter"
    ),
    JsonSubTypes.Type(
        value = ServiceRequest::class,
        name = "ServiceRequest"
    ),
    JsonSubTypes.Type(
        value = Slot::class,
        name = "Slot"
    ),
    JsonSubTypes.Type(
        value = Specimen::class,
        name = "Specimen"
    ),
    JsonSubTypes.Type(
        value = SpecimenDefinition::class,
        name = "SpecimenDefinition"
    ),
    JsonSubTypes.Type(
        value = StructureDefinition::class,
        name = "StructureDefinition"
    ),
    JsonSubTypes.Type(
        value = StructureMap::class,
        name = "StructureMap"
    ),
    JsonSubTypes.Type(
        value = Subscription::class,
        name = "Subscription"
    ),
    JsonSubTypes.Type(
        value = Substance::class,
        name = "Substance"
    ),
    JsonSubTypes.Type(
        value = SubstanceNucleicAcid::class,
        name = "SubstanceNucleicAcid"
    ),
    JsonSubTypes.Type(
        value = SubstancePolymer::class,
        name = "SubstancePolymer"
    ),
    JsonSubTypes.Type(
        value = SubstanceProtein::class,
        name = "SubstanceProtein"
    ),
    JsonSubTypes.Type(
        value = SubstanceReferenceInformation::class,
        name = "SubstanceReferenceInformation"
    ),
    JsonSubTypes.Type(
        value = SubstanceSourceMaterial::class,
        name = "SubstanceSourceMaterial"
    ),
    JsonSubTypes.Type(
        value = SubstanceSpecification::class,
        name = "SubstanceSpecification"
    ),
    JsonSubTypes.Type(
        value = SupplyDelivery::class,
        name = "SupplyDelivery"
    ),
    JsonSubTypes.Type(
        value = SupplyRequest::class,
        name = "SupplyRequest"
    ),
    JsonSubTypes.Type(
        value = Task::class,
        name = "Task"
    ),
    JsonSubTypes.Type(
        value = TerminologyCapabilities::class,
        name = "TerminologyCapabilities"
    ),
    JsonSubTypes.Type(
        value = TestReport::class,
        name = "TestReport"
    ),
    JsonSubTypes.Type(
        value = TestScript::class,
        name = "TestScript"
    ),
    JsonSubTypes.Type(
        value = ValueSet::class,
        name = "ValueSet"
    ),
    JsonSubTypes.Type(
        value = VerificationResult::class,
        name = "VerificationResult"
    ),
    JsonSubTypes.Type(
        value = VisionPrescription::class,
        name = "VisionPrescription"
    )
)
open class Resource
{


    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    var id: IdType? = null



    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    var meta: Meta? = null



    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    var implicitRules: UriType? = null



    /**
     * The base language in which the resource is written.
     */
    var language: CodeType? = null




}


/**
 * The type of resource.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class ResourceType(
    @JsonValue val text: String) {
    ACCOUNT("Account"),
    ACTIVITY_DEFINITION("ActivityDefinition"),
    ADVERSE_EVENT("AdverseEvent"),
    ALLERGY_INTOLERANCE("AllergyIntolerance"),
    APPOINTMENT("Appointment"),
    APPOINTMENT_RESPONSE("AppointmentResponse"),
    AUDIT_EVENT("AuditEvent"),
    BASIC("Basic"),
    BINARY("Binary"),
    BIOLOGICALLY_DERIVED_PRODUCT("BiologicallyDerivedProduct"),
    BODY_STRUCTURE("BodyStructure"),
    BUNDLE("Bundle"),
    CAPABILITY_STATEMENT("CapabilityStatement"),
    CARE_PLAN("CarePlan"),
    CARE_TEAM("CareTeam"),
    CATALOG_ENTRY("CatalogEntry"),
    CHARGE_ITEM("ChargeItem"),
    CHARGE_ITEM_DEFINITION("ChargeItemDefinition"),
    CLAIM("Claim"),
    CLAIM_RESPONSE("ClaimResponse"),
    CLINICAL_IMPRESSION("ClinicalImpression"),
    CODE_SYSTEM("CodeSystem"),
    COMMUNICATION("Communication"),
    COMMUNICATION_REQUEST("CommunicationRequest"),
    COMPARTMENT_DEFINITION("CompartmentDefinition"),
    COMPOSITION("Composition"),
    CONCEPT_MAP("ConceptMap"),
    CONDITION("Condition"),
    CONSENT("Consent"),
    CONTRACT("Contract"),
    COVERAGE("Coverage"),
    COVERAGE_ELIGIBILITY_REQUEST("CoverageEligibilityRequest"),
    COVERAGE_ELIGIBILITY_RESPONSE("CoverageEligibilityResponse"),
    DETECTED_ISSUE("DetectedIssue"),
    DEVICE("Device"),
    DEVICE_DEFINITION("DeviceDefinition"),
    DEVICE_METRIC("DeviceMetric"),
    DEVICE_REQUEST("DeviceRequest"),
    DEVICE_USE_STATEMENT("DeviceUseStatement"),
    DIAGNOSTIC_REPORT("DiagnosticReport"),
    DOCUMENT_MANIFEST("DocumentManifest"),
    DOCUMENT_REFERENCE("DocumentReference"),
    DOMAIN_RESOURCE("DomainResource"),
    EFFECT_EVIDENCE_SYNTHESIS("EffectEvidenceSynthesis"),
    ENCOUNTER("Encounter"),
    ENDPOINT("Endpoint"),
    ENROLLMENT_REQUEST("EnrollmentRequest"),
    ENROLLMENT_RESPONSE("EnrollmentResponse"),
    EPISODE_OF_CARE("EpisodeOfCare"),
    EVENT_DEFINITION("EventDefinition"),
    EVIDENCE("Evidence"),
    EVIDENCE_VARIABLE("EvidenceVariable"),
    EXAMPLE_SCENARIO("ExampleScenario"),
    EXPLANATION_OF_BENEFIT("ExplanationOfBenefit"),
    FAMILY_MEMBER_HISTORY("FamilyMemberHistory"),
    FLAG("Flag"),
    GOAL("Goal"),
    GRAPH_DEFINITION("GraphDefinition"),
    GROUP("Group"),
    GUIDANCE_RESPONSE("GuidanceResponse"),
    HEALTHCARE_SERVICE("HealthcareService"),
    IMAGING_STUDY("ImagingStudy"),
    IMMUNIZATION("Immunization"),
    IMMUNIZATION_EVALUATION("ImmunizationEvaluation"),
    IMMUNIZATION_RECOMMENDATION("ImmunizationRecommendation"),
    IMPLEMENTATION_GUIDE("ImplementationGuide"),
    INSURANCE_PLAN("InsurancePlan"),
    INVOICE("Invoice"),
    LIBRARY("Library"),
    LINKAGE("Linkage"),
    LIST("List"),
    LOCATION("Location"),
    MEASURE("Measure"),
    MEASURE_REPORT("MeasureReport"),
    MEDIA("Media"),
    MEDICATION("Medication"),
    MEDICATION_ADMINISTRATION("MedicationAdministration"),
    MEDICATION_DISPENSE("MedicationDispense"),
    MEDICATION_KNOWLEDGE("MedicationKnowledge"),
    MEDICATION_REQUEST("MedicationRequest"),
    MEDICATION_STATEMENT("MedicationStatement"),
    MEDICINAL_PRODUCT("MedicinalProduct"),
    MEDICINAL_PRODUCT_AUTHORIZATION("MedicinalProductAuthorization"),
    MEDICINAL_PRODUCT_CONTRAINDICATION("MedicinalProductContraindication"),
    MEDICINAL_PRODUCT_INDICATION("MedicinalProductIndication"),
    MEDICINAL_PRODUCT_INGREDIENT("MedicinalProductIngredient"),
    MEDICINAL_PRODUCT_INTERACTION("MedicinalProductInteraction"),
    MEDICINAL_PRODUCT_MANUFACTURED("MedicinalProductManufactured"),
    MEDICINAL_PRODUCT_PACKAGED("MedicinalProductPackaged"),
    MEDICINAL_PRODUCT_PHARMACEUTICAL("MedicinalProductPharmaceutical"),
    MEDICINAL_PRODUCT_UNDESIRABLE_EFFECT("MedicinalProductUndesirableEffect"),
    MESSAGE_DEFINITION("MessageDefinition"),
    MESSAGE_HEADER("MessageHeader"),
    MOLECULAR_SEQUENCE("MolecularSequence"),
    NAMING_SYSTEM("NamingSystem"),
    NUTRITION_ORDER("NutritionOrder"),
    OBSERVATION("Observation"),
    OBSERVATION_DEFINITION("ObservationDefinition"),
    OPERATION_DEFINITION("OperationDefinition"),
    OPERATION_OUTCOME("OperationOutcome"),
    ORGANIZATION("Organization"),
    ORGANIZATION_AFFILIATION("OrganizationAffiliation"),
    PARAMETERS("Parameters"),
    PATIENT("Patient"),
    PAYMENT_NOTICE("PaymentNotice"),
    PAYMENT_RECONCILIATION("PaymentReconciliation"),
    PERSON("Person"),
    PLAN_DEFINITION("PlanDefinition"),
    PRACTITIONER("Practitioner"),
    PRACTITIONER_ROLE("PractitionerRole"),
    PROCEDURE("Procedure"),
    PROVENANCE("Provenance"),
    QUESTIONNAIRE("Questionnaire"),
    QUESTIONNAIRE_RESPONSE("QuestionnaireResponse"),
    RELATED_PERSON("RelatedPerson"),
    REQUEST_GROUP("RequestGroup"),
    RESEARCH_DEFINITION("ResearchDefinition"),
    RESEARCH_ELEMENT_DEFINITION("ResearchElementDefinition"),
    RESEARCH_STUDY("ResearchStudy"),
    RESEARCH_SUBJECT("ResearchSubject"),
    RESOURCE("Resource"),
    RISK_ASSESSMENT("RiskAssessment"),
    RISK_EVIDENCE_SYNTHESIS("RiskEvidenceSynthesis"),
    SCHEDULE("Schedule"),
    SEARCH_PARAMETER("SearchParameter"),
    SERVICE_REQUEST("ServiceRequest"),
    SLOT("Slot"),
    SPECIMEN("Specimen"),
    SPECIMEN_DEFINITION("SpecimenDefinition"),
    STRUCTURE_DEFINITION("StructureDefinition"),
    STRUCTURE_MAP("StructureMap"),
    SUBSCRIPTION("Subscription"),
    SUBSTANCE("Substance"),
    SUBSTANCE_NUCLEIC_ACID("SubstanceNucleicAcid"),
    SUBSTANCE_POLYMER("SubstancePolymer"),
    SUBSTANCE_PROTEIN("SubstanceProtein"),
    SUBSTANCE_REFERENCE_INFORMATION("SubstanceReferenceInformation"),
    SUBSTANCE_SOURCE_MATERIAL("SubstanceSourceMaterial"),
    SUBSTANCE_SPECIFICATION("SubstanceSpecification"),
    SUPPLY_DELIVERY("SupplyDelivery"),
    SUPPLY_REQUEST("SupplyRequest"),
    TASK("Task"),
    TERMINOLOGY_CAPABILITIES("TerminologyCapabilities"),
    TEST_REPORT("TestReport"),
    TEST_SCRIPT("TestScript"),
    VALUE_SET("ValueSet"),
    VERIFICATION_RESULT("VerificationResult"),
    VISION_PRESCRIPTION("VisionPrescription")
}




/**
 * How the system supports versioning for a resource.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class ResourceVersionPolicy(
    @JsonValue val text: String) {
    NO_VERSION("no-version"),
    VERSIONED("versioned"),
    VERSIONED_UPDATE("versioned-update")
}




/**
 * The kind of response to a message.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class ResponseType(
    @JsonValue val text: String) {
    OK("ok"),
    TRANSIENT_ERROR("transient-error"),
    FATAL_ERROR("fatal-error")
}




/**
 * The mode of a RESTful capability statement.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class RestfulCapabilityMode(
    @JsonValue val text: String) {
    CLIENT("client"),
    SERVER("server")
}




/**
 * An assessment of the likely outcome(s) for a patient or other subject as well as the likelihood of each outcome.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class RiskAssessment(
    val status: ObservationStatus,
    val subject: Reference): DomainResource() {


    /**
     * Business identifier assigned to the risk assessment.
     */
    var identifier: List<Identifier>? = null



    /**
     * A reference to the request that is fulfilled by this risk assessment.
     */
    var basedOn: Reference? = null

    @JsonIgnore
    var basedOnTarget: Resource? = null

    /**
     * A reference to a resource that this risk assessment is part of, such as a Procedure.
     */
    var parent: Reference? = null

    @JsonIgnore
    var parentTarget: Resource? = null

    /**
     * The algorithm, process or mechanism used to evaluate the risk.
     */
    var method: CodeableConcept? = null



    /**
     * The type of the risk assessment performed.
     */
    var code: CodeableConcept? = null



    /**
     * The encounter where the assessment was performed.
     */
    var encounter: Reference? = null

    @JsonIgnore
    var encounterTarget: Resource? = null

    /**
     *
     */
    var occurrenceDateTime: DateTimeType? = null



    /**
     *
     */
    var occurrencePeriod: Period? = null



    /**
     * For assessments or prognosis specific to a particular condition, indicates the condition being assessed.
     */
    var condition: Reference? = null

    @JsonIgnore
    var conditionTarget: Resource? = null

    /**
     * The provider or software application that performed the assessment.
     */
    var performer: Reference? = null

    @JsonIgnore
    var performerTarget: Resource? = null

    /**
     * The reason the risk assessment was performed.
     */
    var reasonCode: List<CodeableConcept>? = null



    /**
     * Resources supporting the reason the risk assessment was performed.
     */
    var reasonReference: List<Reference>? = null

    @JsonIgnore
    var reasonReferenceTarget: List<Resource>? = null

    /**
     * Indicates the source data considered as part of the assessment (for example, FamilyHistory, Observations, Procedures, Conditions, etc.).
     */
    var basis: List<Reference>? = null

    @JsonIgnore
    var basisTarget: List<Resource>? = null

    /**
     * Describes the expected outcome for the subject.
     */
    var prediction: List<RiskAssessmentPrediction>? = null



    /**
     * A description of the steps that might be taken to reduce the identified risk(s).
     */
    var mitigation: StringType? = null



    /**
     * Additional comments about the risk assessment.
     */
    var note: List<Annotation>? = null




}

/**
 * An assessment of the likely outcome(s) for a patient or other subject as well as the likelihood of each outcome.
 */
class RiskAssessmentPrediction: BackboneElement()
{


    /**
     * One of the potential outcomes for the patient (e.g. remission, death,  a particular condition).
     */
    var outcome: CodeableConcept? = null



    /**
     *
     */
    var probabilityDecimal: DecimalType? = null



    /**
     *
     */
    var probabilityRange: Range? = null



    /**
     * Indicates how likely the outcome is (in the specified timeframe), expressed as a qualitative value (e.g. low, medium, or high).
     */
    var qualitativeRisk: CodeableConcept? = null



    /**
     * Indicates the risk for this particular subject (with their specific characteristics) divided by the risk of the population in general.  (Numbers greater than 1 = higher risk than the population, numbers less than 1 = lower risk.).
     */
    var relativeRisk: DecimalType? = null



    /**
     *
     */
    var whenPeriod: Period? = null



    /**
     *
     */
    var whenRange: Range? = null



    /**
     * Additional information explaining the basis for the prediction.
     */
    var rationale: StringType? = null




}

/**
 * The RiskEvidenceSynthesis resource describes the likelihood of an outcome in a population plus exposure state where the risk estimate is derived from a combination of research studies.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class RiskEvidenceSynthesis(
    val status: PublicationStatus,
    val population: Reference,
    val outcome: Reference): DomainResource() {


    /**
     * An absolute URI that is used to identify this risk evidence synthesis when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which at which an authoritative instance of this risk evidence synthesis is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the risk evidence synthesis is stored on different servers.
     */
    var url: UriType? = null



    /**
     * A formal identifier that is used to identify this risk evidence synthesis when it is represented in other formats, or referenced in a specification, model, design or an instance.
     */
    var identifier: List<Identifier>? = null



    /**
     * The identifier that is used to identify this version of the risk evidence synthesis when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the risk evidence synthesis author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
     */
    var version: StringType? = null



    /**
     * A natural language name identifying the risk evidence synthesis. This name should be usable as an identifier for the module by machine processing applications such as code generation.
     */
    var name: StringType? = null



    /**
     * A short, descriptive, user-friendly title for the risk evidence synthesis.
     */
    var title: StringType? = null



    /**
     * The date  (and optionally time) when the risk evidence synthesis was published. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the risk evidence synthesis changes.
     */
    var date: DateTimeType? = null



    /**
     * The name of the organization or individual that published the risk evidence synthesis.
     */
    var publisher: StringType? = null



    /**
     * Contact details to assist a user in finding and communicating with the publisher.
     */
    var contact: List<ContactDetail>? = null



    /**
     * A free text natural language description of the risk evidence synthesis from a consumer's perspective.
     */
    var description: MarkdownType? = null



    /**
     * A human-readable string to clarify or explain concepts about the resource.
     */
    var note: List<Annotation>? = null



    /**
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate risk evidence synthesis instances.
     */
    var useContext: List<UsageContext>? = null



    /**
     * A legal or geographic region in which the risk evidence synthesis is intended to be used.
     */
    var jurisdiction: List<CodeableConcept>? = null



    /**
     * A copyright statement relating to the risk evidence synthesis and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the risk evidence synthesis.
     */
    var copyright: MarkdownType? = null



    /**
     * The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage.
     */
    var approvalDate: DateType? = null



    /**
     * The date on which the resource content was last reviewed. Review happens periodically after approval but does not change the original approval date.
     */
    var lastReviewDate: DateType? = null



    /**
     * The period during which the risk evidence synthesis content was or is planned to be in active use.
     */
    var effectivePeriod: Period? = null



    /**
     * Descriptive topics related to the content of the RiskEvidenceSynthesis. Topics provide a high-level categorization grouping types of EffectEvidenceSynthesiss that can be useful for filtering and searching.
     */
    var topic: List<CodeableConcept>? = null



    /**
     * An individiual or organization primarily involved in the creation and maintenance of the content.
     */
    var author: List<ContactDetail>? = null



    /**
     * An individual or organization primarily responsible for internal coherence of the content.
     */
    var editor: List<ContactDetail>? = null



    /**
     * An individual or organization primarily responsible for review of some aspect of the content.
     */
    var reviewer: List<ContactDetail>? = null



    /**
     * An individual or organization responsible for officially endorsing the content for use in some setting.
     */
    var endorser: List<ContactDetail>? = null



    /**
     * Related artifacts such as additional documentation, justification, or bibliographic references.
     */
    var relatedArtifact: List<RelatedArtifact>? = null



    /**
     * Type of synthesis eg meta-analysis.
     */
    var synthesisType: CodeableConcept? = null



    /**
     * Type of study eg randomized trial.
     */
    var studyType: CodeableConcept? = null



    /**
     * A reference to a EvidenceVariable resource that defines the exposure for the research.
     */
    var exposure: Reference? = null

    @JsonIgnore
    var exposureTarget: Resource? = null

    /**
     * A description of the size of the sample involved in the synthesis.
     */
    var sampleSize: RiskEvidenceSynthesisSampleSize? = null



    /**
     * The estimated risk of the outcome.
     */
    var riskEstimate: RiskEvidenceSynthesisRiskEstimate? = null



    /**
     * A description of the certainty of the risk estimate.
     */
    var certainty: List<RiskEvidenceSynthesisCertainty>? = null




}

/**
 * The RiskEvidenceSynthesis resource describes the likelihood of an outcome in a population plus exposure state where the risk estimate is derived from a combination of research studies.
 */
class RiskEvidenceSynthesisCertainty: BackboneElement()
{


    /**
     * A rating of the certainty of the effect estimate.
     */
    var rating: List<CodeableConcept>? = null



    /**
     * A human-readable string to clarify or explain concepts about the resource.
     */
    var note: List<Annotation>? = null



    /**
     * A description of a component of the overall certainty.
     */
    var certaintySubcomponent: List<RiskEvidenceSynthesisCertaintySubcomponent>? = null




}

/**
 * The RiskEvidenceSynthesis resource describes the likelihood of an outcome in a population plus exposure state where the risk estimate is derived from a combination of research studies.
 */
class RiskEvidenceSynthesisCertaintySubcomponent: BackboneElement()
{


    /**
     * Type of subcomponent of certainty rating.
     */
    var type: CodeableConcept? = null



    /**
     * A rating of a subcomponent of rating certainty.
     */
    var rating: List<CodeableConcept>? = null



    /**
     * A human-readable string to clarify or explain concepts about the resource.
     */
    var note: List<Annotation>? = null




}

/**
 * The RiskEvidenceSynthesis resource describes the likelihood of an outcome in a population plus exposure state where the risk estimate is derived from a combination of research studies.
 */
class RiskEvidenceSynthesisPrecisionEstimate: BackboneElement()
{


    /**
     * Examples include confidence interval and interquartile range.
     */
    var type: CodeableConcept? = null



    /**
     * Use 95 for a 95% confidence interval.
     */
    var level: DecimalType? = null



    /**
     * Lower bound of confidence interval.
     */
    var from: DecimalType? = null



    /**
     * Upper bound of confidence interval.
     */
    var to: DecimalType? = null




}

/**
 * The RiskEvidenceSynthesis resource describes the likelihood of an outcome in a population plus exposure state where the risk estimate is derived from a combination of research studies.
 */
class RiskEvidenceSynthesisRiskEstimate: BackboneElement()
{


    /**
     * Human-readable summary of risk estimate.
     */
    var description: StringType? = null



    /**
     * Examples include proportion and mean.
     */
    var type: CodeableConcept? = null



    /**
     * The point estimate of the risk estimate.
     */
    var value: DecimalType? = null



    /**
     * Specifies the UCUM unit for the outcome.
     */
    var unitOfMeasure: CodeableConcept? = null



    /**
     * The sample size for the group that was measured for this risk estimate.
     */
    var denominatorCount: IntegerType? = null



    /**
     * The number of group members with the outcome of interest.
     */
    var numeratorCount: IntegerType? = null



    /**
     * A description of the precision of the estimate for the effect.
     */
    var precisionEstimate: List<RiskEvidenceSynthesisPrecisionEstimate>? = null




}

/**
 * The RiskEvidenceSynthesis resource describes the likelihood of an outcome in a population plus exposure state where the risk estimate is derived from a combination of research studies.
 */
class RiskEvidenceSynthesisSampleSize: BackboneElement()
{


    /**
     * Human-readable summary of sample size.
     */
    var description: StringType? = null



    /**
     * Number of studies included in this evidence synthesis.
     */
    var numberOfStudies: IntegerType? = null



    /**
     * Number of participants included in this evidence synthesis.
     */
    var numberOfParticipants: IntegerType? = null




}

/**
 * A series of measurements taken by a device, with upper and lower limits. There may be more than one dimension in the data.
 * If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions
 */
class SampledData(
    val origin: Quantity,
    val period: DecimalType,
    val dimensions: PositiveIntType): Element() {


    /**
     * A correction factor that is applied to the sampled data points before they are added to the origin.
     */
    var factor: DecimalType? = null



    /**
     * The lower limit of detection of the measured points. This is needed if any of the data points have the value "L" (lower than detection limit).
     */
    var lowerLimit: DecimalType? = null



    /**
     * The upper limit of detection of the measured points. This is needed if any of the data points have the value "U" (higher than detection limit).
     */
    var upperLimit: DecimalType? = null



    /**
     * A series of data points which are decimal values separated by a single space (character u20). The special values "E" (error), "L" (below detection limit) and "U" (above detection limit) can also be used in place of a decimal value.
     */
    var data: SampledDataDataTypeType? = null




}

/**
 *
 */
data class SampledDataDataTypeType(@JsonValue val value: String) {
    companion object {
        @JvmStatic
        @JsonCreator
        fun create(value: String) = SampledDataDataTypeType(value)
    }
}



/**
 * A container for slots of time that may be available for booking appointments.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class Schedule(
    val actor: List<Reference>): DomainResource() {


    /**
     * External Ids for this item.
     */
    var identifier: List<Identifier>? = null



    /**
     * Whether this schedule record is in active use or should not be used (such as was entered in error).
     */
    var active: BooleanType? = null



    /**
     * A broad categorization of the service that is to be performed during this appointment.
     */
    var serviceCategory: List<CodeableConcept>? = null



    /**
     * The specific service that is to be performed during this appointment.
     */
    var serviceType: List<CodeableConcept>? = null



    /**
     * The specialty of a practitioner that would be required to perform the service requested in this appointment.
     */
    var specialty: List<CodeableConcept>? = null



    /**
     * The period of time that the slots that reference this Schedule resource cover (even if none exist). These  cover the amount of time that an organization's planning horizon; the interval for which they are currently accepting appointments. This does not define a "template" for planning outside these dates.
     */
    var planningHorizon: Period? = null



    /**
     * Comments on the availability to describe any extended information. Such as custom constraints on the slots that may be associated.
     */
    var comment: StringType? = null




}

/**
 * What Search Comparator Codes are supported in search.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class SearchComparator(
    @JsonValue val text: String) {
    EQ("eq"),
    NE("ne"),
    GT("gt"),
    LT("lt"),
    GE("ge"),
    LE("le"),
    SA("sa"),
    EB("eb"),
    AP("ap")
}




/**
 * Why an entry is in the result set - whether it's included as a match or because of an _include requirement, or to convey information or warning information about the search process.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class SearchEntryMode(
    @JsonValue val text: String) {
    MATCH("match"),
    INCLUDE("include"),
    OUTCOME("outcome")
}




/**
 * A supported modifier for a search parameter.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class SearchModifierCode(
    @JsonValue val text: String) {
    MISSING("missing"),
    EXACT("exact"),
    CONTAINS("contains"),
    NOT("not"),
    TEXT("text"),
    IN("in"),
    NOT_IN("not-in"),
    BELOW("below"),
    ABOVE("above"),
    TYPE("type"),
    IDENTIFIER("identifier"),
    OF_TYPE("ofType")
}




/**
 * A search parameter that defines a named search item that can be used to search/filter on a resource.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class SearchParameter(
    val url: UriType,
    val name: StringType,
    val status: PublicationStatus,
    val description: MarkdownType,
    val code: CodeType,
    val base: List<CodeType>,
    val type: SearchParamType): DomainResource() {


    /**
     * The identifier that is used to identify this version of the search parameter when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the search parameter author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
     */
    var version: StringType? = null



    /**
     * Where this search parameter is originally defined. If a derivedFrom is provided, then the details in the search parameter must be consistent with the definition from which it is defined. i.e. the parameter should have the same meaning, and (usually) the functionality should be a proper subset of the underlying search parameter.
     */
    var derivedFrom: CanonicalType? = null



    /**
     * A Boolean value to indicate that this search parameter is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
     */
    var experimental: BooleanType? = null



    /**
     * The date  (and optionally time) when the search parameter was published. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the search parameter changes.
     */
    var date: DateTimeType? = null



    /**
     * The name of the organization or individual that published the search parameter.
     */
    var publisher: StringType? = null



    /**
     * Contact details to assist a user in finding and communicating with the publisher.
     */
    var contact: List<ContactDetail>? = null



    /**
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate search parameter instances.
     */
    var useContext: List<UsageContext>? = null



    /**
     * A legal or geographic region in which the search parameter is intended to be used.
     */
    var jurisdiction: List<CodeableConcept>? = null



    /**
     * Explanation of why this search parameter is needed and why it has been designed as it has.
     */
    var purpose: MarkdownType? = null



    /**
     * A FHIRPath expression that returns a set of elements for the search parameter.
     */
    var expression: StringType? = null



    /**
     * An XPath expression that returns a set of elements for the search parameter.
     */
    var xpath: StringType? = null



    /**
     * How the search parameter relates to the set of elements returned by evaluating the xpath query.
     */
    var xpathUsage: XPathUsageType? = null



    /**
     * Types of resource (if a resource is referenced).
     */
    var target: List<CodeType>? = null



    /**
     * Whether multiple values are allowed for each time the parameter exists. Values are separated by commas, and the parameter matches if any of the values match.
     */
    var multipleOr: BooleanType? = null



    /**
     * Whether multiple parameters are allowed - e.g. more than one parameter with the same name. The search matches if all the parameters match.
     */
    var multipleAnd: BooleanType? = null



    /**
     * Comparators supported for the search parameter.
     */
    var comparator: List<SearchComparator>? = null



    /**
     * A modifier supported for the search parameter.
     */
    var modifier: List<SearchModifierCode>? = null



    /**
     * Contains the names of any search parameters which may be chained to the containing search parameter. Chained parameters may be added to search parameters of type reference and specify that resources will only be returned if they contain a reference to a resource which matches the chained parameter value. Values for this field should be drawn from SearchParameter.code for a parameter on the target resource type.
     */
    var chain: List<StringType>? = null



    /**
     * Used to define the parts of a composite search parameter.
     */
    var component: List<SearchParameterComponent>? = null




}

/**
 * A search parameter that defines a named search item that can be used to search/filter on a resource.
 */
class SearchParameterComponent(
    val definition: CanonicalType,
    val expression: StringType): BackboneElement()

/**
 *
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class SearchParamType(
    @JsonValue val text: String) {
    NUMBER("number"),
    DATE("date"),
    STRING("string"),
    TOKEN("token"),
    REFERENCE("reference"),
    COMPOSITE("composite"),
    QUANTITY("quantity"),
    URI("uri"),
    SPECIAL("special")
}




/**
 * Type if a sequence -- DNA, RNA, or amino acid sequence.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class SequenceType(
    @JsonValue val text: String) {
    AA("aa"),
    DNA("dna"),
    RNA("rna")
}




/**
 * A record of a request for service such as diagnostic investigations, treatments, or operations to be performed.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class ServiceRequest(
    val status: RequestStatus,
    val intent: RequestIntent,
    val subject: Reference): DomainResource() {


    /**
     * Identifiers assigned to this order instance by the orderer and/or the receiver and/or order fulfiller.
     */
    var identifier: List<Identifier>? = null



    /**
     * The URL pointing to a FHIR-defined protocol, guideline, orderset or other definition that is adhered to in whole or in part by this ServiceRequest.
     */
    var instantiatesCanonical: List<CanonicalType>? = null



    /**
     * The URL pointing to an externally maintained protocol, guideline, orderset or other definition that is adhered to in whole or in part by this ServiceRequest.
     */
    var instantiatesUri: List<UriType>? = null



    /**
     * Plan/proposal/order fulfilled by this request.
     */
    var basedOn: List<Reference>? = null

    @JsonIgnore
    var basedOnTarget: List<Resource>? = null

    /**
     * The request takes the place of the referenced completed or terminated request(s).
     */
    var replaces: List<Reference>? = null

    @JsonIgnore
    var replacesTarget: List<Resource>? = null

    /**
     * A shared identifier common to all service requests that were authorized more or less simultaneously by a single author, representing the composite or group identifier.
     */
    var requisition: Identifier? = null



    /**
     * A code that classifies the service for searching, sorting and display purposes (e.g. "Surgical Procedure").
     */
    var category: List<CodeableConcept>? = null



    /**
     * Indicates how quickly the ServiceRequest should be addressed with respect to other requests.
     */
    var priority: RequestPriority? = null



    /**
     * Set this to true if the record is saying that the service/procedure should NOT be performed.
     */
    var doNotPerform: BooleanType? = null



    /**
     * A code that identifies a particular service (i.e., procedure, diagnostic investigation, or panel of investigations) that have been requested.
     */
    var code: CodeableConcept? = null



    /**
     * Additional details and instructions about the how the services are to be delivered.   For example, and order for a urinary catheter may have an order detail for an external or indwelling catheter, or an order for a bandage may require additional instructions specifying how the bandage should be applied.
     */
    var orderDetail: List<CodeableConcept>? = null



    /**
     *
     */
    var quantityQuantity: Quantity? = null



    /**
     *
     */
    var quantityRatio: Ratio? = null



    /**
     *
     */
    var quantityRange: Range? = null



    /**
     * An encounter that provides additional information about the healthcare context in which this request is made.
     */
    var encounter: Reference? = null

    @JsonIgnore
    var encounterTarget: Resource? = null

    /**
     *
     */
    var occurrenceDateTime: DateTimeType? = null



    /**
     *
     */
    var occurrencePeriod: Period? = null



    /**
     *
     */
    var occurrenceTiming: Timing? = null



    /**
     *
     */
    var asNeededBoolean: BooleanType? = null



    /**
     *
     */
    var asNeededCodeableConcept: CodeableConcept? = null



    /**
     * When the request transitioned to being actionable.
     */
    var authoredOn: DateTimeType? = null



    /**
     * The individual who initiated the request and has responsibility for its activation.
     */
    var requester: Reference? = null

    @JsonIgnore
    var requesterTarget: Resource? = null

    /**
     * Desired type of performer for doing the requested service.
     */
    var performerType: CodeableConcept? = null



    /**
     * The desired performer for doing the requested service.  For example, the surgeon, dermatopathologist, endoscopist, etc.
     */
    var performer: List<Reference>? = null

    @JsonIgnore
    var performerTarget: List<Resource>? = null

    /**
     * The preferred location(s) where the procedure should actually happen in coded or free text form. E.g. at home or nursing day care center.
     */
    var locationCode: List<CodeableConcept>? = null



    /**
     * A reference to the the preferred location(s) where the procedure should actually happen. E.g. at home or nursing day care center.
     */
    var locationReference: List<Reference>? = null

    @JsonIgnore
    var locationReferenceTarget: List<Resource>? = null

    /**
     * An explanation or justification for why this service is being requested in coded or textual form.   This is often for billing purposes.  May relate to the resources referred to in `supportingInfo`.
     */
    var reasonCode: List<CodeableConcept>? = null



    /**
     * Indicates another resource that provides a justification for why this service is being requested.   May relate to the resources referred to in `supportingInfo`.
     */
    var reasonReference: List<Reference>? = null

    @JsonIgnore
    var reasonReferenceTarget: List<Resource>? = null

    /**
     * Insurance plans, coverage extensions, pre-authorizations and/or pre-determinations that may be needed for delivering the requested service.
     */
    var insurance: List<Reference>? = null

    @JsonIgnore
    var insuranceTarget: List<Resource>? = null

    /**
     * Additional clinical information about the patient or specimen that may influence the services or their interpretations.     This information includes diagnosis, clinical findings and other observations.  In laboratory ordering these are typically referred to as "ask at order entry questions (AOEs)".  This includes observations explicitly requested by the producer (filler) to provide context or supporting information needed to complete the order. For example,  reporting the amount of inspired oxygen for blood gas measurements.
     */
    var supportingInfo: List<Reference>? = null

    @JsonIgnore
    var supportingInfoTarget: List<Resource>? = null

    /**
     * One or more specimens that the laboratory procedure will use.
     */
    var specimen: List<Reference>? = null

    @JsonIgnore
    var specimenTarget: List<Resource>? = null

    /**
     * Anatomic location where the procedure should be performed. This is the target site.
     */
    var bodySite: List<CodeableConcept>? = null



    /**
     * Any other notes and comments made about the service request. For example, internal billing notes.
     */
    var note: List<Annotation>? = null



    /**
     * Instructions in terms that are understood by the patient or consumer.
     */
    var patientInstruction: StringType? = null



    /**
     * Key events in the history of the request.
     */
    var relevantHistory: List<Reference>? = null

    @JsonIgnore
    var relevantHistoryTarget: List<Resource>? = null


}

/**
 * A signature along with supporting context. The signature may be a digital signature that is cryptographic in nature, or some other signature acceptable to the domain. This other signature may be as simple as a graphical image representing a hand-written signature, or a signature ceremony Different signature approaches have different utilities.
 * If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions
 */
class Signature(
    val type: List<Coding>,
    val `when`: InstantType,
    val who: Reference): Element() {


    /**
     * A reference to an application-usable description of the identity that is represented by the signature.
     */
    var onBehalfOf: Reference? = null

    @JsonIgnore
    var onBehalfOfTarget: Resource? = null

    /**
     * A mime type that indicates the technical format of the target resources signed by the signature.
     */
    var targetFormat: CodeType? = null



    /**
     * A mime type that indicates the technical format of the signature. Important mime types are application/signature+xml for X ML DigSig, application/jose for JWS, and image for a graphical image of a signature, etc.
     */
    var sigFormat: CodeType? = null



    /**
     * The base64 encoding of the Signature content. When signature is not recorded electronically this element would be empty.
     */
    var data: Base64BinaryType? = null




}

/**
 * How slices are interpreted when evaluating an instance.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class SlicingRules(
    @JsonValue val text: String) {
    CLOSED("closed"),
    OPEN("open"),
    OPEN_AT_END("openAtEnd")
}




/**
 * A slot of time on a schedule that may be available for booking appointments.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class Slot(
    val schedule: Reference,
    val status: SlotStatus,
    val start: InstantType,
    val end: InstantType): DomainResource() {


    /**
     * External Ids for this item.
     */
    var identifier: List<Identifier>? = null



    /**
     * A broad categorization of the service that is to be performed during this appointment.
     */
    var serviceCategory: List<CodeableConcept>? = null



    /**
     * The type of appointments that can be booked into this slot (ideally this would be an identifiable service - which is at a location, rather than the location itself). If provided then this overrides the value provided on the availability resource.
     */
    var serviceType: List<CodeableConcept>? = null



    /**
     * The specialty of a practitioner that would be required to perform the service requested in this appointment.
     */
    var specialty: List<CodeableConcept>? = null



    /**
     * The style of appointment or patient that may be booked in the slot (not service type).
     */
    var appointmentType: CodeableConcept? = null



    /**
     * This slot has already been overbooked, appointments are unlikely to be accepted for this time.
     */
    var overbooked: BooleanType? = null



    /**
     * Comments on the slot to describe any extended information. Such as custom constraints on the slot.
     */
    var comment: StringType? = null




}

/**
 * The free/busy status of the slot.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class SlotStatus(
    @JsonValue val text: String) {
    BUSY("busy"),
    FREE("free"),
    BUSY_UNAVAILABLE("busy-unavailable"),
    BUSY_TENTATIVE("busy-tentative"),
    ENTERED_IN_ERROR("entered-in-error")
}




/**
 * The possible sort directions, ascending or descending.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class SortDirection(
    @JsonValue val text: String) {
    ASCENDING("ascending"),
    DESCENDING("descending")
}




/**
 * The license that applies to an Implementation Guide (using an SPDX license Identifiers, or 'not-open-source'). The binding is required but new SPDX license Identifiers are allowed to be used (https://spdx.org/licenses/).
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class SPDXLicense(
    @JsonValue val text: String) {
    NOT_OPEN_SOURCE("not-open-source"),
    UNDERSCORE_0BSD("0BSD"),
    AAL("AAL"),
    ABSTYLES("Abstyles"),
    ADOBE2006("Adobe-2006"),
    ADOBE_GLYPH("Adobe-Glyph"),
    ADSL("ADSL"),
    AFL11("AFL-1.1"),
    AFL12("AFL-1.2"),
    AFL20("AFL-2.0"),
    AFL21("AFL-2.1"),
    AFL30("AFL-3.0"),
    AFMPARSE("Afmparse"),
    AGPL10ONLY("AGPL-1.0-only"),
    AGPL10OR_LATER("AGPL-1.0-or-later"),
    AGPL30ONLY("AGPL-3.0-only"),
    AGPL30OR_LATER("AGPL-3.0-or-later"),
    ALADDIN("Aladdin"),
    AMDPLPA("AMDPLPA"),
    AML("AML"),
    AMPAS("AMPAS"),
    ANTLRPD("ANTLR-PD"),
    APACHE10("Apache-1.0"),
    APACHE11("Apache-1.1"),
    APACHE20("Apache-2.0"),
    APAFML("APAFML"),
    APL10("APL-1.0"),
    APSL10("APSL-1.0"),
    APSL11("APSL-1.1"),
    APSL12("APSL-1.2"),
    APSL20("APSL-2.0"),
    ARTISTIC10CL8("Artistic-1.0-cl8"),
    ARTISTIC10PERL("Artistic-1.0-Perl"),
    ARTISTIC10("Artistic-1.0"),
    ARTISTIC20("Artistic-2.0"),
    BAHYPH("Bahyph"),
    BARR("Barr"),
    BEERWARE("Beerware"),
    BIT_TORRENT10("BitTorrent-1.0"),
    BIT_TORRENT11("BitTorrent-1.1"),
    BORCEUX("Borceux"),
    BSD1CLAUSE("BSD-1-Clause"),
    BSD2CLAUSE_FREE_BSD("BSD-2-Clause-FreeBSD"),
    BSD2CLAUSE_NET_BSD("BSD-2-Clause-NetBSD"),
    BSD2CLAUSE_PATENT("BSD-2-Clause-Patent"),
    BSD2CLAUSE("BSD-2-Clause"),
    BSD3CLAUSE_ATTRIBUTION("BSD-3-Clause-Attribution"),
    BSD3CLAUSE_CLEAR("BSD-3-Clause-Clear"),
    BSD3CLAUSE_LBNL("BSD-3-Clause-LBNL"),
    BSD3CLAUSE_NO_NUCLEAR_LICENSE2014("BSD-3-Clause-No-Nuclear-License-2014"),
    BSD3CLAUSE_NO_NUCLEAR_LICENSE("BSD-3-Clause-No-Nuclear-License"),
    BSD3CLAUSE_NO_NUCLEAR_WARRANTY("BSD-3-Clause-No-Nuclear-Warranty"),
    BSD3CLAUSE("BSD-3-Clause"),
    BSD4CLAUSE_UC("BSD-4-Clause-UC"),
    BSD4CLAUSE("BSD-4-Clause"),
    BSDPROTECTION("BSD-Protection"),
    BSDSOURCE_CODE("BSD-Source-Code"),
    BSL10("BSL-1.0"),
    BZIP2105("bzip2-1.0.5"),
    BZIP2106("bzip2-1.0.6"),
    CALDERA("Caldera"),
    CATOSL11("CATOSL-1.1"),
    CCBY10("CC-BY-1.0"),
    CCBY20("CC-BY-2.0"),
    CCBY25("CC-BY-2.5"),
    CCBY30("CC-BY-3.0"),
    CCBY40("CC-BY-4.0"),
    CCBYNC10("CC-BY-NC-1.0"),
    CCBYNC20("CC-BY-NC-2.0"),
    CCBYNC25("CC-BY-NC-2.5"),
    CCBYNC30("CC-BY-NC-3.0"),
    CCBYNC40("CC-BY-NC-4.0"),
    CCBYNCND10("CC-BY-NC-ND-1.0"),
    CCBYNCND20("CC-BY-NC-ND-2.0"),
    CCBYNCND25("CC-BY-NC-ND-2.5"),
    CCBYNCND30("CC-BY-NC-ND-3.0"),
    CCBYNCND40("CC-BY-NC-ND-4.0"),
    CCBYNCSA10("CC-BY-NC-SA-1.0"),
    CCBYNCSA20("CC-BY-NC-SA-2.0"),
    CCBYNCSA25("CC-BY-NC-SA-2.5"),
    CCBYNCSA30("CC-BY-NC-SA-3.0"),
    CCBYNCSA40("CC-BY-NC-SA-4.0"),
    CCBYND10("CC-BY-ND-1.0"),
    CCBYND20("CC-BY-ND-2.0"),
    CCBYND25("CC-BY-ND-2.5"),
    CCBYND30("CC-BY-ND-3.0"),
    CCBYND40("CC-BY-ND-4.0"),
    CCBYSA10("CC-BY-SA-1.0"),
    CCBYSA20("CC-BY-SA-2.0"),
    CCBYSA25("CC-BY-SA-2.5"),
    CCBYSA30("CC-BY-SA-3.0"),
    CCBYSA40("CC-BY-SA-4.0"),
    CC010("CC0-1.0"),
    CDDL10("CDDL-1.0"),
    CDDL11("CDDL-1.1"),
    CDLAPERMISSIVE10("CDLA-Permissive-1.0"),
    CDLASHARING10("CDLA-Sharing-1.0"),
    CECILL10("CECILL-1.0"),
    CECILL11("CECILL-1.1"),
    CECILL20("CECILL-2.0"),
    CECILL21("CECILL-2.1"),
    CECILLB("CECILL-B"),
    CECILLC("CECILL-C"),
    CL_ARTISTIC("ClArtistic"),
    CNRIJYTHON("CNRI-Jython"),
    CNRIPYTHON_GPLCOMPATIBLE("CNRI-Python-GPL-Compatible"),
    CNRIPYTHON("CNRI-Python"),
    CONDOR11("Condor-1.1"),
    CPAL10("CPAL-1.0"),
    CPL10("CPL-1.0"),
    CPOL102("CPOL-1.02"),
    CROSSWORD("Crossword"),
    CRYSTAL_STACKER("CrystalStacker"),
    CUAOPL10("CUA-OPL-1.0"),
    CUBE("Cube"),
    CURL("curl"),
    DFSL10("D-FSL-1.0"),
    DIFFMARK("diffmark"),
    DOC("DOC"),
    DOTSEQN("Dotseqn"),
    DSDP("DSDP"),
    DVIPDFM("dvipdfm"),
    ECL10("ECL-1.0"),
    ECL20("ECL-2.0"),
    EFL10("EFL-1.0"),
    EFL20("EFL-2.0"),
    E_GENIX("eGenix"),
    ENTESSA("Entessa"),
    EPL10("EPL-1.0"),
    EPL20("EPL-2.0"),
    ERL_PL11("ErlPL-1.1"),
    EUDATAGRID("EUDatagrid"),
    EUPL10("EUPL-1.0"),
    EUPL11("EUPL-1.1"),
    EUPL12("EUPL-1.2"),
    EUROSYM("Eurosym"),
    FAIR("Fair"),
    FRAMEWORX10("Frameworx-1.0"),
    FREE_IMAGE("FreeImage"),
    FSFAP("FSFAP"),
    FSFUL("FSFUL"),
    FSFULLR("FSFULLR"),
    FTL("FTL"),
    GFDL11ONLY("GFDL-1.1-only"),
    GFDL11OR_LATER("GFDL-1.1-or-later"),
    GFDL12ONLY("GFDL-1.2-only"),
    GFDL12OR_LATER("GFDL-1.2-or-later"),
    GFDL13ONLY("GFDL-1.3-only"),
    GFDL13OR_LATER("GFDL-1.3-or-later"),
    GIFTWARE("Giftware"),
    GL2PS("GL2PS"),
    GLIDE("Glide"),
    GLULXE("Glulxe"),
    GNUPLOT("gnuplot"),
    GPL10ONLY("GPL-1.0-only"),
    GPL10OR_LATER("GPL-1.0-or-later"),
    GPL20ONLY("GPL-2.0-only"),
    GPL20OR_LATER("GPL-2.0-or-later"),
    GPL30ONLY("GPL-3.0-only"),
    GPL30OR_LATER("GPL-3.0-or-later"),
    G_SOAP13B("gSOAP-1.3b"),
    HASKELL_REPORT("HaskellReport"),
    HPND("HPND"),
    IBMPIBS("IBM-pibs"),
    ICU("ICU"),
    IJG("IJG"),
    IMAGE_MAGICK("ImageMagick"),
    I_MATIX("iMatix"),
    IMLIB2("Imlib2"),
    INFO_ZIP("Info-ZIP"),
    INTEL_ACPI("Intel-ACPI"),
    INTEL("Intel"),
    INTERBASE10("Interbase-1.0"),
    IPA("IPA"),
    IPL10("IPL-1.0"),
    ISC("ISC"),
    JAS_PER20("JasPer-2.0"),
    JSON("JSON"),
    LAL12("LAL-1.2"),
    LAL13("LAL-1.3"),
    LATEX2E("Latex2e"),
    LEPTONICA("Leptonica"),
    LGPL20ONLY("LGPL-2.0-only"),
    LGPL20OR_LATER("LGPL-2.0-or-later"),
    LGPL21ONLY("LGPL-2.1-only"),
    LGPL21OR_LATER("LGPL-2.1-or-later"),
    LGPL30ONLY("LGPL-3.0-only"),
    LGPL30OR_LATER("LGPL-3.0-or-later"),
    LGPLLR("LGPLLR"),
    LIBPNG("Libpng"),
    LIBTIFF("libtiff"),
    LI_LI_QP11("LiLiQ-P-1.1"),
    LI_LI_QR11("LiLiQ-R-1.1"),
    LI_LI_QRPLUS11("LiLiQ-Rplus-1.1"),
    LINUX_OPEN_IB("Linux-OpenIB"),
    LPL10("LPL-1.0"),
    LPL102("LPL-1.02"),
    LPPL10("LPPL-1.0"),
    LPPL11("LPPL-1.1"),
    LPPL12("LPPL-1.2"),
    LPPL13A("LPPL-1.3a"),
    LPPL13C("LPPL-1.3c"),
    MAKE_INDEX("MakeIndex"),
    MIR_OS("MirOS"),
    MIT0("MIT-0"),
    MITADVERTISING("MIT-advertising"),
    MITCMU("MIT-CMU"),
    MITENNA("MIT-enna"),
    MITFEH("MIT-feh"),
    MIT("MIT"),
    MITNFA("MITNFA"),
    MOTOSOTO("Motosoto"),
    MPICH2("mpich2"),
    MPL10("MPL-1.0"),
    MPL11("MPL-1.1"),
    MPL20NO_COPYLEFT_EXCEPTION("MPL-2.0-no-copyleft-exception"),
    MPL20("MPL-2.0"),
    MSPL("MS-PL"),
    MSRL("MS-RL"),
    MTLL("MTLL"),
    MULTICS("Multics"),
    MUP("Mup"),
    NASA13("NASA-1.3"),
    NAUMEN("Naumen"),
    NBPL10("NBPL-1.0"),
    NCSA("NCSA"),
    NET_SNMP("Net-SNMP"),
    NET_CDF("NetCDF"),
    NEWSLETR("Newsletr"),
    NGPL("NGPL"),
    NLOD10("NLOD-1.0"),
    NLPL("NLPL"),
    NOKIA("Nokia"),
    NOSL("NOSL"),
    NOWEB("Noweb"),
    NPL10("NPL-1.0"),
    NPL11("NPL-1.1"),
    NPOSL30("NPOSL-3.0"),
    NRL("NRL"),
    NTP("NTP"),
    OCCTPL("OCCT-PL"),
    OCLC20("OCLC-2.0"),
    ODB_L10("ODbL-1.0"),
    OFL10("OFL-1.0"),
    OFL11("OFL-1.1"),
    OGTSL("OGTSL"),
    OLDAP11("OLDAP-1.1"),
    OLDAP12("OLDAP-1.2"),
    OLDAP13("OLDAP-1.3"),
    OLDAP14("OLDAP-1.4"),
    OLDAP201("OLDAP-2.0.1"),
    OLDAP20("OLDAP-2.0"),
    OLDAP21("OLDAP-2.1"),
    OLDAP221("OLDAP-2.2.1"),
    OLDAP222("OLDAP-2.2.2"),
    OLDAP22("OLDAP-2.2"),
    OLDAP23("OLDAP-2.3"),
    OLDAP24("OLDAP-2.4"),
    OLDAP25("OLDAP-2.5"),
    OLDAP26("OLDAP-2.6"),
    OLDAP27("OLDAP-2.7"),
    OLDAP28("OLDAP-2.8"),
    OML("OML"),
    OPEN_SSL("OpenSSL"),
    OPL10("OPL-1.0"),
    OSETPL21("OSET-PL-2.1"),
    OSL10("OSL-1.0"),
    OSL11("OSL-1.1"),
    OSL20("OSL-2.0"),
    OSL21("OSL-2.1"),
    OSL30("OSL-3.0"),
    PDDL10("PDDL-1.0"),
    PHP30("PHP-3.0"),
    PHP301("PHP-3.01"),
    PLEXUS("Plexus"),
    POSTGRE_SQL("PostgreSQL"),
    PSFRAG("psfrag"),
    PSUTILS("psutils"),
    PYTHON20("Python-2.0"),
    QHULL("Qhull"),
    QPL10("QPL-1.0"),
    RDISC("Rdisc"),
    RHE_COS11("RHeCos-1.1"),
    RPL11("RPL-1.1"),
    RPL15("RPL-1.5"),
    RPSL10("RPSL-1.0"),
    RSAMD("RSA-MD"),
    RSCPL("RSCPL"),
    RUBY("Ruby"),
    SAXPD("SAX-PD"),
    SAXPATH("Saxpath"),
    SCEA("SCEA"),
    SENDMAIL("Sendmail"),
    SGIB10("SGI-B-1.0"),
    SGIB11("SGI-B-1.1"),
    SGIB20("SGI-B-2.0"),
    SIM_PL20("SimPL-2.0"),
    SISSL12("SISSL-1.2"),
    SISSL("SISSL"),
    SLEEPYCAT("Sleepycat"),
    SMLNJ("SMLNJ"),
    SMPPL("SMPPL"),
    SNIA("SNIA"),
    SPENCER86("Spencer-86"),
    SPENCER94("Spencer-94"),
    SPENCER99("Spencer-99"),
    SPL10("SPL-1.0"),
    SUGAR_CRM113("SugarCRM-1.1.3"),
    SWL("SWL"),
    TCL("TCL"),
    TCPWRAPPERS("TCP-wrappers"),
    TMATE("TMate"),
    TORQUE11("TORQUE-1.1"),
    TOSL("TOSL"),
    UNICODE_DFS2015("Unicode-DFS-2015"),
    UNICODE_DFS2016("Unicode-DFS-2016"),
    UNICODE_TOU("Unicode-TOU"),
    UNLICENSE("Unlicense"),
    UPL10("UPL-1.0"),
    VIM("Vim"),
    VOSTROM("VOSTROM"),
    VSL10("VSL-1.0"),
    W3C19980720("W3C-19980720"),
    W3C20150513("W3C-20150513"),
    W3C("W3C"),
    WATCOM10("Watcom-1.0"),
    WSUIPA("Wsuipa"),
    WTFPL("WTFPL"),
    X11("X11"),
    XEROX("Xerox"),
    XFREE8611("XFree86-1.1"),
    XINETD("xinetd"),
    XNET("Xnet"),
    XPP("xpp"),
    XSKAT("XSkat"),
    YPL10("YPL-1.0"),
    YPL11("YPL-1.1"),
    ZED("Zed"),
    ZEND20("Zend-2.0"),
    ZIMBRA13("Zimbra-1.3"),
    ZIMBRA14("Zimbra-1.4"),
    ZLIB_ACKNOWLEDGEMENT("zlib-acknowledgement"),
    ZLIB("Zlib"),
    ZPL11("ZPL-1.1"),
    ZPL20("ZPL-2.0"),
    ZPL21("ZPL-2.1")
}




/**
 * A sample to be used for analysis.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class Specimen: DomainResource()
{


    /**
     * Id for specimen.
     */
    var identifier: List<Identifier>? = null



    /**
     * The identifier assigned by the lab when accessioning specimen(s). This is not necessarily the same as the specimen identifier, depending on local lab procedures.
     */
    var accessionIdentifier: Identifier? = null



    /**
     * The availability of the specimen.
     */
    var status: SpecimenStatus? = null



    /**
     * The kind of material that forms the specimen.
     */
    var type: CodeableConcept? = null



    /**
     * Where the specimen came from. This may be from patient(s), from a location (e.g., the source of an environmental sample), or a sampling of a substance or a device.
     */
    var subject: Reference? = null

    @JsonIgnore
    var subjectTarget: Resource? = null

    /**
     * Time when specimen was received for processing or testing.
     */
    var receivedTime: DateTimeType? = null



    /**
     * Reference to the parent (source) specimen which is used when the specimen was either derived from or a component of another specimen.
     */
    var parent: List<Reference>? = null

    @JsonIgnore
    var parentTarget: List<Resource>? = null

    /**
     * Details concerning a service request that required a specimen to be collected.
     */
    var request: List<Reference>? = null

    @JsonIgnore
    var requestTarget: List<Resource>? = null

    /**
     * Details concerning the specimen collection.
     */
    var collection: SpecimenCollection? = null



    /**
     * Details concerning processing and processing steps for the specimen.
     */
    var processing: List<SpecimenProcessing>? = null



    /**
     * The container holding the specimen.  The recursive nature of containers; i.e. blood in tube in tray in rack is not addressed here.
     */
    var container: List<SpecimenContainer>? = null



    /**
     * A mode or state of being that describes the nature of the specimen.
     */
    var condition: List<CodeableConcept>? = null



    /**
     * To communicate any details or issues about the specimen or during the specimen collection. (for example: broken vial, sent with patient, frozen).
     */
    var note: List<Annotation>? = null




}

/**
 * A sample to be used for analysis.
 */
class SpecimenCollection: BackboneElement()
{


    /**
     * Person who collected the specimen.
     */
    var collector: Reference? = null

    @JsonIgnore
    var collectorTarget: Resource? = null

    /**
     *
     */
    var collectedDateTime: DateTimeType? = null



    /**
     *
     */
    var collectedPeriod: Period? = null



    /**
     * The span of time over which the collection of a specimen occurred.
     */
    var duration: Duration? = null



    /**
     * The quantity of specimen collected; for instance the volume of a blood sample, or the physical measurement of an anatomic pathology sample.
     */
    var quantity: Quantity? = null



    /**
     * A coded value specifying the technique that is used to perform the procedure.
     */
    var method: CodeableConcept? = null



    /**
     * Anatomical location from which the specimen was collected (if subject is a patient). This is the target site.  This element is not used for environmental specimens.
     */
    var bodySite: CodeableConcept? = null



    /**
     *
     */
    var fastingStatusCodeableConcept: CodeableConcept? = null



    /**
     *
     */
    var fastingStatusDuration: Duration? = null




}

/**
 * Degree of preference of a type of conditioned specimen.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class SpecimenContainedPreference(
    @JsonValue val text: String) {
    PREFERRED("preferred"),
    ALTERNATE("alternate")
}




/**
 * A sample to be used for analysis.
 */
class SpecimenContainer: BackboneElement()
{


    /**
     * Id for container. There may be multiple; a manufacturer's bar code, lab assigned identifier, etc. The container ID may differ from the specimen id in some circumstances.
     */
    var identifier: List<Identifier>? = null



    /**
     * Textual description of the container.
     */
    var description: StringType? = null



    /**
     * The type of container associated with the specimen (e.g. slide, aliquot, etc.).
     */
    var type: CodeableConcept? = null



    /**
     * The capacity (volume or other measure) the container may contain.
     */
    var capacity: Quantity? = null



    /**
     * The quantity of specimen in the container; may be volume, dimensions, or other appropriate measurements, depending on the specimen type.
     */
    var specimenQuantity: Quantity? = null



    /**
     *
     */
    var additiveCodeableConcept: CodeableConcept? = null



    /**
     *
     */
    var additiveReference: Reference? = null

    @JsonIgnore
    var additiveReferenceTarget: Resource? = null


}

/**
 * A kind of specimen with associated set of requirements.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class SpecimenDefinition: DomainResource()
{


    /**
     * A business identifier associated with the kind of specimen.
     */
    var identifier: Identifier? = null



    /**
     * The kind of material to be collected.
     */
    var typeCollected: CodeableConcept? = null



    /**
     * Preparation of the patient for specimen collection.
     */
    var patientPreparation: List<CodeableConcept>? = null



    /**
     * Time aspect of specimen collection (duration or offset).
     */
    var timeAspect: StringType? = null



    /**
     * The action to be performed for collecting the specimen.
     */
    var collection: List<CodeableConcept>? = null



    /**
     * Specimen conditioned in a container as expected by the testing laboratory.
     */
    var typeTested: List<SpecimenDefinitionTypeTested>? = null




}

/**
 * A kind of specimen with associated set of requirements.
 */
class SpecimenDefinitionAdditive: BackboneElement()
{


    /**
     *
     */
    var additiveCodeableConcept: CodeableConcept? = null



    /**
     *
     */
    var additiveReference: Reference? = null

    @JsonIgnore
    var additiveReferenceTarget: Resource? = null


}

/**
 * A kind of specimen with associated set of requirements.
 */
class SpecimenDefinitionContainer: BackboneElement()
{


    /**
     * The type of material of the container.
     */
    var material: CodeableConcept? = null



    /**
     * The type of container used to contain this kind of specimen.
     */
    var type: CodeableConcept? = null



    /**
     * Color of container cap.
     */
    var cap: CodeableConcept? = null



    /**
     * The textual description of the kind of container.
     */
    var description: StringType? = null



    /**
     * The capacity (volume or other measure) of this kind of container.
     */
    var capacity: Quantity? = null



    /**
     *
     */
    var minimumVolumeQuantity: Quantity? = null



    /**
     *
     */
    var minimumVolumeString: StringType? = null



    /**
     * Substance introduced in the kind of container to preserve, maintain or enhance the specimen. Examples: Formalin, Citrate, EDTA.
     */
    var additive: List<SpecimenDefinitionAdditive>? = null



    /**
     * Special processing that should be applied to the container for this kind of specimen.
     */
    var preparation: StringType? = null




}

/**
 * A kind of specimen with associated set of requirements.
 */
class SpecimenDefinitionHandling: BackboneElement()
{


    /**
     * It qualifies the interval of temperature, which characterizes an occurrence of handling. Conditions that are not related to temperature may be handled in the instruction element.
     */
    var temperatureQualifier: CodeableConcept? = null



    /**
     * The temperature interval for this set of handling instructions.
     */
    var temperatureRange: Range? = null



    /**
     * The maximum time interval of preservation of the specimen with these conditions.
     */
    var maxDuration: Duration? = null



    /**
     * Additional textual instructions for the preservation or transport of the specimen. For instance, 'Protect from light exposure'.
     */
    var instruction: StringType? = null




}

/**
 * A kind of specimen with associated set of requirements.
 */
class SpecimenDefinitionTypeTested(
    val preference: SpecimenContainedPreference): BackboneElement() {


    /**
     * Primary of secondary specimen.
     */
    var isDerived: BooleanType? = null



    /**
     * The kind of specimen conditioned for testing expected by lab.
     */
    var type: CodeableConcept? = null



    /**
     * The specimen's container.
     */
    var container: SpecimenDefinitionContainer? = null



    /**
     * Requirements for delivery and special handling of this kind of conditioned specimen.
     */
    var requirement: StringType? = null



    /**
     * The usual time that a specimen of this kind is retained after the ordered tests are completed, for the purpose of additional testing.
     */
    var retentionTime: Duration? = null



    /**
     * Criterion for rejection of the specimen in its container by the laboratory.
     */
    var rejectionCriterion: List<CodeableConcept>? = null



    /**
     * Set of instructions for preservation/transport of the specimen at a defined temperature interval, prior the testing process.
     */
    var handling: List<SpecimenDefinitionHandling>? = null




}

/**
 * A sample to be used for analysis.
 */
class SpecimenProcessing: BackboneElement()
{


    /**
     * Textual description of procedure.
     */
    var description: StringType? = null



    /**
     * A coded value specifying the procedure used to process the specimen.
     */
    var procedure: CodeableConcept? = null



    /**
     * Material used in the processing step.
     */
    var additive: List<Reference>? = null

    @JsonIgnore
    var additiveTarget: List<Resource>? = null

    /**
     *
     */
    var timeDateTime: DateTimeType? = null



    /**
     *
     */
    var timePeriod: Period? = null




}

/**
 * Codes providing the status/availability of a specimen.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class SpecimenStatus(
    @JsonValue val text: String) {
    AVAILABLE("available"),
    UNAVAILABLE("unavailable"),
    UNSATISFACTORY("unsatisfactory"),
    ENTERED_IN_ERROR("entered-in-error")
}




/**
 * The validation status of the target.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class Status(
    @JsonValue val text: String) {
    ATTESTED("attested"),
    VALIDATED("validated"),
    IN_PROCESS("in-process"),
    REQ_REVALID("req-revalid"),
    VAL_FAIL("val-fail"),
    REVAL_FAIL("reval-fail")
}




/**
 * Type for strand.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class StrandType(
    @JsonValue val text: String) {
    WATSON("watson"),
    CRICK("crick")
}




/**
 * A sequence of Unicode characters
 * Note that FHIR strings SHALL NOT exceed 1MB in size
 * If the element is present, it must have either a @value, an @id, or extensions
 */
data class StringType(@JsonValue val value: String) {
    companion object {
        @JvmStatic
        @JsonCreator
        fun create(value: String) = StringType(value)
    }
}



/**
 * A definition of a FHIR structure. This resource is used to describe the underlying resources, data types defined in FHIR, and also for describing extensions and constraints on resources and data types.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class StructureDefinition(
    val url: UriType,
    val name: StringType,
    val status: PublicationStatus,
    val kind: StructureDefinitionKind,
    val abstract: BooleanType,
    val type: UriType): DomainResource() {


    /**
     * A formal identifier that is used to identify this structure definition when it is represented in other formats, or referenced in a specification, model, design or an instance.
     */
    var identifier: List<Identifier>? = null



    /**
     * The identifier that is used to identify this version of the structure definition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the structure definition author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
     */
    var version: StringType? = null



    /**
     * A short, descriptive, user-friendly title for the structure definition.
     */
    var title: StringType? = null



    /**
     * A Boolean value to indicate that this structure definition is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
     */
    var experimental: BooleanType? = null



    /**
     * The date  (and optionally time) when the structure definition was published. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the structure definition changes.
     */
    var date: DateTimeType? = null



    /**
     * The name of the organization or individual that published the structure definition.
     */
    var publisher: StringType? = null



    /**
     * Contact details to assist a user in finding and communicating with the publisher.
     */
    var contact: List<ContactDetail>? = null



    /**
     * A free text natural language description of the structure definition from a consumer's perspective.
     */
    var description: MarkdownType? = null



    /**
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate structure definition instances.
     */
    var useContext: List<UsageContext>? = null



    /**
     * A legal or geographic region in which the structure definition is intended to be used.
     */
    var jurisdiction: List<CodeableConcept>? = null



    /**
     * Explanation of why this structure definition is needed and why it has been designed as it has.
     */
    var purpose: MarkdownType? = null



    /**
     * A copyright statement relating to the structure definition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the structure definition.
     */
    var copyright: MarkdownType? = null



    /**
     * A set of key words or terms from external terminologies that may be used to assist with indexing and searching of templates nby describing the use of this structure definition, or the content it describes.
     */
    var keyword: List<Coding>? = null



    /**
     * The version of the FHIR specification on which this StructureDefinition is based - this is the formal version of the specification, without the revision number, e.g. [publication].[major].[minor], which is 4.0.1. for this version.
     */
    var fhirVersion: FHIRVersion? = null



    /**
     * An external specification that the content is mapped to.
     */
    var mapping: List<StructureDefinitionMapping>? = null



    /**
     * Identifies the types of resource or data type elements to which the extension can be applied.
     */
    var context: List<StructureDefinitionContext>? = null



    /**
     * A set of rules as FHIRPath Invariants about when the extension can be used (e.g. co-occurrence variants for the extension). All the rules must be true.
     */
    var contextInvariant: List<StringType>? = null



    /**
     * An absolute URI that is the base structure from which this type is derived, either by specialization or constraint.
     */
    var baseDefinition: CanonicalType? = null



    /**
     * How the type relates to the baseDefinition.
     */
    var derivation: TypeDerivationRule? = null



    /**
     * A snapshot view is expressed in a standalone form that can be used and interpreted without considering the base StructureDefinition.
     */
    var snapshot: StructureDefinitionSnapshot? = null



    /**
     * A differential view is expressed relative to the base StructureDefinition - a statement of differences that it applies.
     */
    var differential: StructureDefinitionDifferential? = null




}

/**
 * A definition of a FHIR structure. This resource is used to describe the underlying resources, data types defined in FHIR, and also for describing extensions and constraints on resources and data types.
 */
class StructureDefinitionContext(
    val type: ExtensionContextType,
    val expression: StringType): BackboneElement()

/**
 * A definition of a FHIR structure. This resource is used to describe the underlying resources, data types defined in FHIR, and also for describing extensions and constraints on resources and data types.
 */
class StructureDefinitionDifferential(
    val element: List<ElementDefinition>): BackboneElement()

/**
 * Defines the type of structure that a definition is describing.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class StructureDefinitionKind(
    @JsonValue val text: String) {
    PRIMITIVE_TYPE("primitive-type"),
    COMPLEX_TYPE("complex-type"),
    RESOURCE("resource"),
    LOGICAL("logical")
}




/**
 * A definition of a FHIR structure. This resource is used to describe the underlying resources, data types defined in FHIR, and also for describing extensions and constraints on resources and data types.
 */
class StructureDefinitionMapping(
    val identity: IdType): BackboneElement() {


    /**
     * An absolute URI that identifies the specification that this mapping is expressed to.
     */
    var uri: UriType? = null



    /**
     * A name for the specification that is being mapped to.
     */
    var name: StringType? = null



    /**
     * Comments about this mapping, including version notes, issues, scope limitations, and other important notes for usage.
     */
    var comment: StringType? = null




}

/**
 * A definition of a FHIR structure. This resource is used to describe the underlying resources, data types defined in FHIR, and also for describing extensions and constraints on resources and data types.
 */
class StructureDefinitionSnapshot(
    val element: List<ElementDefinition>): BackboneElement()

/**
 * A Map of relationships between 2 structures that can be used to transform data.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class StructureMap(
    val url: UriType,
    val name: StringType,
    val status: PublicationStatus,
    val group: List<StructureMapGroup>): DomainResource() {


    /**
     * A formal identifier that is used to identify this structure map when it is represented in other formats, or referenced in a specification, model, design or an instance.
     */
    var identifier: List<Identifier>? = null



    /**
     * The identifier that is used to identify this version of the structure map when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the structure map author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
     */
    var version: StringType? = null



    /**
     * A short, descriptive, user-friendly title for the structure map.
     */
    var title: StringType? = null



    /**
     * A Boolean value to indicate that this structure map is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
     */
    var experimental: BooleanType? = null



    /**
     * The date  (and optionally time) when the structure map was published. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the structure map changes.
     */
    var date: DateTimeType? = null



    /**
     * The name of the organization or individual that published the structure map.
     */
    var publisher: StringType? = null



    /**
     * Contact details to assist a user in finding and communicating with the publisher.
     */
    var contact: List<ContactDetail>? = null



    /**
     * A free text natural language description of the structure map from a consumer's perspective.
     */
    var description: MarkdownType? = null



    /**
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate structure map instances.
     */
    var useContext: List<UsageContext>? = null



    /**
     * A legal or geographic region in which the structure map is intended to be used.
     */
    var jurisdiction: List<CodeableConcept>? = null



    /**
     * Explanation of why this structure map is needed and why it has been designed as it has.
     */
    var purpose: MarkdownType? = null



    /**
     * A copyright statement relating to the structure map and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the structure map.
     */
    var copyright: MarkdownType? = null



    /**
     * A structure definition used by this map. The structure definition may describe instances that are converted, or the instances that are produced.
     */
    var structure: List<StructureMapStructure>? = null



    /**
     * Other maps used by this map (canonical URLs).
     */
    var import: List<CanonicalType>? = null




}

/**
 * How to interpret the context.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class StructureMapContextType(
    @JsonValue val text: String) {
    TYPE("type"),
    VARIABLE("variable")
}




/**
 * A Map of relationships between 2 structures that can be used to transform data.
 */
class StructureMapDependent(
    val name: IdType,
    val variable: List<StringType>): BackboneElement()

/**
 * A Map of relationships between 2 structures that can be used to transform data.
 */
class StructureMapGroup(
    val name: IdType,
    val typeMode: StructureMapGroupTypeMode,
    val input: List<StructureMapInput>,
    val rule: List<StructureMapRule>): BackboneElement() {


    /**
     * Another group that this group adds rules to.
     */
    var extends: IdType? = null



    /**
     * Additional supporting documentation that explains the purpose of the group and the types of mappings within it.
     */
    var documentation: StringType? = null




}

/**
 * If this is the default rule set to apply for the source type, or this combination of types.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class StructureMapGroupTypeMode(
    @JsonValue val text: String) {
    NONE("none"),
    TYPES("types"),
    TYPE_AND_TYPES("type-and-types")
}




/**
 * A Map of relationships between 2 structures that can be used to transform data.
 */
class StructureMapInput(
    val name: IdType,
    val mode: StructureMapInputMode): BackboneElement() {


    /**
     * Type for this instance of data.
     */
    var type: StringType? = null



    /**
     * Documentation for this instance of data.
     */
    var documentation: StringType? = null




}

/**
 * Mode for this instance of data.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class StructureMapInputMode(
    @JsonValue val text: String) {
    SOURCE("source"),
    TARGET("target")
}




/**
 * How the referenced structure is used in this mapping.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class StructureMapModelMode(
    @JsonValue val text: String) {
    SOURCE("source"),
    QUERIED("queried"),
    TARGET("target"),
    PRODUCED("produced")
}




/**
 * A Map of relationships between 2 structures that can be used to transform data.
 */
class StructureMapParameter: BackboneElement()
{


    /**
     *
     */
    var valueId: IdType? = null



    /**
     *
     */
    var valueString: StringType? = null



    /**
     *
     */
    var valueBoolean: BooleanType? = null



    /**
     *
     */
    var valueInteger: IntegerType? = null



    /**
     *
     */
    var valueDecimal: DecimalType? = null




}

/**
 * A Map of relationships between 2 structures that can be used to transform data.
 */
class StructureMapRule(
    val name: IdType,
    val source: List<StructureMapSource>): BackboneElement() {


    /**
     * Content to create because of this mapping rule.
     */
    var target: List<StructureMapTarget>? = null



    /**
     * Rules contained in this rule.
     */
    var rule: List<StructureMapRule>? = null



    /**
     * Which other rules to apply in the context of this rule.
     */
    var dependent: List<StructureMapDependent>? = null



    /**
     * Documentation for this instance of data.
     */
    var documentation: StringType? = null




}

/**
 * A Map of relationships between 2 structures that can be used to transform data.
 */
class StructureMapSource(
    val context: IdType): BackboneElement() {


    /**
     * Specified minimum cardinality for the element. This is optional; if present, it acts an implicit check on the input content.
     */
    var min: IntegerType? = null



    /**
     * Specified maximum cardinality for the element - a number or a "*". This is optional; if present, it acts an implicit check on the input content (* just serves as documentation; it's the default value).
     */
    var max: StringType? = null



    /**
     * Specified type for the element. This works as a condition on the mapping - use for polymorphic elements.
     */
    var type: StringType? = null



    /**
     *
     */
    var defaultValueBase64Binary: Base64BinaryType? = null



    /**
     *
     */
    var defaultValueBoolean: BooleanType? = null



    /**
     *
     */
    var defaultValueCanonical: CanonicalType? = null



    /**
     *
     */
    var defaultValueCode: CodeType? = null



    /**
     *
     */
    var defaultValueDate: DateType? = null



    /**
     *
     */
    var defaultValueDateTime: DateTimeType? = null



    /**
     *
     */
    var defaultValueDecimal: DecimalType? = null



    /**
     *
     */
    var defaultValueId: IdType? = null



    /**
     *
     */
    var defaultValueInstant: InstantType? = null



    /**
     *
     */
    var defaultValueInteger: IntegerType? = null



    /**
     *
     */
    var defaultValueMarkdown: MarkdownType? = null



    /**
     *
     */
    var defaultValueOid: OidType? = null



    /**
     *
     */
    var defaultValuePositiveInt: PositiveIntType? = null



    /**
     *
     */
    var defaultValueString: StringType? = null



    /**
     *
     */
    var defaultValueTime: TimeType? = null



    /**
     *
     */
    var defaultValueUnsignedInt: UnsignedIntType? = null



    /**
     *
     */
    var defaultValueUri: UriType? = null



    /**
     *
     */
    var defaultValueUrl: UrlType? = null



    /**
     *
     */
    var defaultValueUuid: UuidType? = null



    /**
     *
     */
    var defaultValueAddress: Address? = null



    /**
     *
     */
    var defaultValueAge: Age? = null



    /**
     *
     */
    var defaultValueAnnotation: Annotation? = null



    /**
     *
     */
    var defaultValueAttachment: Attachment? = null



    /**
     *
     */
    var defaultValueCodeableConcept: CodeableConcept? = null



    /**
     *
     */
    var defaultValueCoding: Coding? = null



    /**
     *
     */
    var defaultValueContactPoint: ContactPoint? = null



    /**
     *
     */
    var defaultValueCount: Count? = null



    /**
     *
     */
    var defaultValueDistance: Distance? = null



    /**
     *
     */
    var defaultValueDuration: Duration? = null



    /**
     *
     */
    var defaultValueHumanName: HumanName? = null



    /**
     *
     */
    var defaultValueIdentifier: Identifier? = null



    /**
     *
     */
    var defaultValueMoney: Money? = null



    /**
     *
     */
    var defaultValuePeriod: Period? = null



    /**
     *
     */
    var defaultValueQuantity: Quantity? = null



    /**
     *
     */
    var defaultValueRange: Range? = null



    /**
     *
     */
    var defaultValueRatio: Ratio? = null



    /**
     *
     */
    var defaultValueReference: Reference? = null

    @JsonIgnore
    var defaultValueReferenceTarget: Resource? = null

    /**
     *
     */
    var defaultValueSampledData: SampledData? = null



    /**
     *
     */
    var defaultValueSignature: Signature? = null



    /**
     *
     */
    var defaultValueTiming: Timing? = null



    /**
     *
     */
    var defaultValueContactDetail: ContactDetail? = null



    /**
     *
     */
    var defaultValueContributor: Contributor? = null



    /**
     *
     */
    var defaultValueDataRequirement: DataRequirement? = null



    /**
     *
     */
    var defaultValueExpression: Expression? = null



    /**
     *
     */
    var defaultValueParameterDefinition: ParameterDefinition? = null



    /**
     *
     */
    var defaultValueRelatedArtifact: RelatedArtifact? = null



    /**
     *
     */
    var defaultValueTriggerDefinition: TriggerDefinition? = null



    /**
     *
     */
    var defaultValueUsageContext: UsageContext? = null



    /**
     *
     */
    var defaultValueDosage: Dosage? = null



    /**
     *
     */
    var defaultValueMeta: Meta? = null



    /**
     * Optional field for this source.
     */
    var element: StringType? = null



    /**
     * How to handle the list mode for this element.
     */
    var listMode: StructureMapSourceListMode? = null



    /**
     * Named context for field, if a field is specified.
     */
    var variable: IdType? = null



    /**
     * FHIRPath expression  - must be true or the rule does not apply.
     */
    var condition: StringType? = null



    /**
     * FHIRPath expression  - must be true or the mapping engine throws an error instead of completing.
     */
    var check: StringType? = null



    /**
     * A FHIRPath expression which specifies a message to put in the transform log when content matching the source rule is found.
     */
    var logMessage: StringType? = null




}

/**
 * If field is a list, how to manage the source.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class StructureMapSourceListMode(
    @JsonValue val text: String) {
    FIRST("first"),
    NOT_FIRST("not_first"),
    LAST("last"),
    NOT_LAST("not_last"),
    ONLY_ONE("only_one")
}




/**
 * A Map of relationships between 2 structures that can be used to transform data.
 */
class StructureMapStructure(
    val url: CanonicalType,
    val mode: StructureMapModelMode): BackboneElement() {


    /**
     * The name used for this type in the map.
     */
    var alias: StringType? = null



    /**
     * Documentation that describes how the structure is used in the mapping.
     */
    var documentation: StringType? = null




}

/**
 * A Map of relationships between 2 structures that can be used to transform data.
 */
class StructureMapTarget: BackboneElement()
{


    /**
     * Type or variable this rule applies to.
     */
    var context: IdType? = null



    /**
     * How to interpret the context.
     */
    var contextType: StructureMapContextType? = null



    /**
     * Field to create in the context.
     */
    var element: StringType? = null



    /**
     * Named context for field, if desired, and a field is specified.
     */
    var variable: IdType? = null



    /**
     * If field is a list, how to manage the list.
     */
    var listMode: List<StructureMapTargetListMode>? = null



    /**
     * Internal rule reference for shared list items.
     */
    var listRuleId: IdType? = null



    /**
     * How the data is copied / created.
     */
    var transform: StructureMapTransform? = null



    /**
     * Parameters to the transform.
     */
    var parameter: List<StructureMapParameter>? = null




}

/**
 * If field is a list, how to manage the production.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class StructureMapTargetListMode(
    @JsonValue val text: String) {
    FIRST("first"),
    SHARE("share"),
    LAST("last"),
    COLLATE("collate")
}




/**
 * How data is copied/created.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class StructureMapTransform(
    @JsonValue val text: String) {
    CREATE("create"),
    COPY("copy"),
    TRUNCATE("truncate"),
    ESCAPE("escape"),
    CAST("cast"),
    APPEND("append"),
    TRANSLATE("translate"),
    REFERENCE("reference"),
    DATE_OP("dateOp"),
    UUID("uuid"),
    POINTER("pointer"),
    EVALUATE("evaluate"),
    CC("cc"),
    C("c"),
    QTY("qty"),
    ID("id"),
    CP("cp")
}




/**
 * The subscription resource is used to define a push-based subscription from a server to another system. Once a subscription is registered with the server, the server checks every resource that is created or updated, and if the resource matches the given criteria, it sends a message on the defined "channel" so that another system can take an appropriate action.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class Subscription(
    val status: SubscriptionStatus,
    val reason: StringType,
    val criteria: StringType,
    val channel: SubscriptionChannel): DomainResource() {


    /**
     * Contact details for a human to contact about the subscription. The primary use of this for system administrator troubleshooting.
     */
    var contact: List<ContactPoint>? = null



    /**
     * The time for the server to turn the subscription off.
     */
    var end: InstantType? = null



    /**
     * A record of the last error that occurred when the server processed a notification.
     */
    var error: StringType? = null




}

/**
 * The subscription resource is used to define a push-based subscription from a server to another system. Once a subscription is registered with the server, the server checks every resource that is created or updated, and if the resource matches the given criteria, it sends a message on the defined "channel" so that another system can take an appropriate action.
 */
class SubscriptionChannel(
    val type: SubscriptionChannelType): BackboneElement() {


    /**
     * The url that describes the actual end-point to send messages to.
     */
    var endpoint: UrlType? = null



    /**
     * The mime type to send the payload in - either application/fhir+xml, or application/fhir+json. If the payload is not present, then there is no payload in the notification, just a notification. The mime type "text/plain" may also be used for Email and SMS subscriptions.
     */
    var payload: CodeType? = null



    /**
     * Additional headers / information to send as part of the notification.
     */
    var header: List<StringType>? = null




}

/**
 * The type of method used to execute a subscription.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class SubscriptionChannelType(
    @JsonValue val text: String) {
    REST_HOOK("rest-hook"),
    WEBSOCKET("websocket"),
    EMAIL("email"),
    SMS("sms"),
    MESSAGE("message")
}




/**
 * The status of a subscription.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class SubscriptionStatus(
    @JsonValue val text: String) {
    REQUESTED("requested"),
    ACTIVE("active"),
    ERROR("error"),
    OFF("off")
}




/**
 * A homogeneous material with a definite composition.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class Substance(
    val code: CodeableConcept): DomainResource() {


    /**
     * Unique identifier for the substance.
     */
    var identifier: List<Identifier>? = null



    /**
     * A code to indicate if the substance is actively used.
     */
    var status: FHIRSubstanceStatus? = null



    /**
     * A code that classifies the general type of substance.  This is used  for searching, sorting and display purposes.
     */
    var category: List<CodeableConcept>? = null



    /**
     * A description of the substance - its appearance, handling requirements, and other usage notes.
     */
    var description: StringType? = null



    /**
     * Substance may be used to describe a kind of substance, or a specific package/container of the substance: an instance.
     */
    var instance: List<SubstanceInstance>? = null



    /**
     * A substance can be composed of other substances.
     */
    var ingredient: List<SubstanceIngredient>? = null




}

/**
 * Chemical substances are a single substance type whose primary defining element is the molecular structure. Chemical substances shall be defined on the basis of their complete covalent molecular structure; the presence of a salt (counter-ion) and/or solvates (water, alcohols) is also captured. Purity, grade, physical form or particle size are not taken into account in the definition of a chemical substance or in the assignment of a Substance ID.
 * If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions
 */
class SubstanceAmount: BackboneElement()
{


    /**
     *
     */
    var amountQuantity: Quantity? = null



    /**
     *
     */
    var amountRange: Range? = null



    /**
     *
     */
    var amountString: StringType? = null



    /**
     * Most elements that require a quantitative value will also have a field called amount type. Amount type should always be specified because the actual value of the amount is often dependent on it. EXAMPLE: In capturing the actual relative amounts of substances or molecular fragments it is essential to indicate whether the amount refers to a mole ratio or weight ratio. For any given element an effort should be made to use same the amount type for all related definitional elements.
     */
    var amountType: CodeableConcept? = null



    /**
     * A textual comment on a numeric value.
     */
    var amountText: StringType? = null



    /**
     * Reference range of possible or expected values.
     */
    var referenceRange: SubstanceAmountReferenceRange? = null




}

/**
 * Chemical substances are a single substance type whose primary defining element is the molecular structure. Chemical substances shall be defined on the basis of their complete covalent molecular structure; the presence of a salt (counter-ion) and/or solvates (water, alcohols) is also captured. Purity, grade, physical form or particle size are not taken into account in the definition of a chemical substance or in the assignment of a Substance ID.
 * If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions
 */
class SubstanceAmountReferenceRange: BackboneElement()
{


    /**
     * Lower limit possible or expected.
     */
    var lowLimit: Quantity? = null



    /**
     * Upper limit possible or expected.
     */
    var highLimit: Quantity? = null




}

/**
 * A homogeneous material with a definite composition.
 */
class SubstanceIngredient: BackboneElement()
{


    /**
     * The amount of the ingredient in the substance - a concentration ratio.
     */
    var quantity: Ratio? = null



    /**
     *
     */
    var substanceCodeableConcept: CodeableConcept? = null



    /**
     *
     */
    var substanceReference: Reference? = null

    @JsonIgnore
    var substanceReferenceTarget: Resource? = null


}

/**
 * A homogeneous material with a definite composition.
 */
class SubstanceInstance: BackboneElement()
{


    /**
     * Identifier associated with the package/container (usually a label affixed directly).
     */
    var identifier: Identifier? = null



    /**
     * When the substance is no longer valid to use. For some substances, a single arbitrary date is used for expiry.
     */
    var expiry: DateTimeType? = null



    /**
     * The amount of the substance.
     */
    var quantity: Quantity? = null




}

/**
 * Nucleic acids are defined by three distinct elements: the base, sugar and linkage. Individual substance/moiety IDs will be created for each of these elements. The nucleotide sequence will be always entered in the 5’-3’ direction.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class SubstanceNucleicAcid: DomainResource()
{


    /**
     * The type of the sequence shall be specified based on a controlled vocabulary.
     */
    var sequenceType: CodeableConcept? = null



    /**
     * The number of linear sequences of nucleotides linked through phosphodiester bonds shall be described. Subunits would be strands of nucleic acids that are tightly associated typically through Watson-Crick base pairing. NOTE: If not specified in the reference source, the assumption is that there is 1 subunit.
     */
    var numberOfSubunits: IntegerType? = null



    /**
     * The area of hybridisation shall be described if applicable for double stranded RNA or DNA. The number associated with the subunit followed by the number associated to the residue shall be specified in increasing order. The underscore “” shall be used as separator as follows: “Subunitnumber Residue”.
     */
    var areaOfHybridisation: StringType? = null



    /**
     * (TBC).
     */
    var oligoNucleotideType: CodeableConcept? = null



    /**
     * Subunits are listed in order of decreasing length; sequences of the same length will be ordered by molecular weight; subunits that have identical sequences will be repeated multiple times.
     */
    var subunit: List<SubstanceNucleicAcidSubunit>? = null




}

/**
 * Nucleic acids are defined by three distinct elements: the base, sugar and linkage. Individual substance/moiety IDs will be created for each of these elements. The nucleotide sequence will be always entered in the 5’-3’ direction.
 */
class SubstanceNucleicAcidLinkage: BackboneElement()
{


    /**
     * The entity that links the sugar residues together should also be captured for nearly all naturally occurring nucleic acid the linkage is a phosphate group. For many synthetic oligonucleotides phosphorothioate linkages are often seen. Linkage connectivity is assumed to be 3’-5’. If the linkage is either 3’-3’ or 5’-5’ this should be specified.
     */
    var connectivity: StringType? = null



    /**
     * Each linkage will be registered as a fragment and have an ID.
     */
    var identifier: Identifier? = null



    /**
     * Each linkage will be registered as a fragment and have at least one name. A single name shall be assigned to each linkage.
     */
    var name: StringType? = null



    /**
     * Residues shall be captured as described in 5.3.6.8.3.
     */
    var residueSite: StringType? = null




}

/**
 * Nucleic acids are defined by three distinct elements: the base, sugar and linkage. Individual substance/moiety IDs will be created for each of these elements. The nucleotide sequence will be always entered in the 5’-3’ direction.
 */
class SubstanceNucleicAcidSubunit: BackboneElement()
{


    /**
     * Index of linear sequences of nucleic acids in order of decreasing length. Sequences of the same length will be ordered by molecular weight. Subunits that have identical sequences will be repeated and have sequential subscripts.
     */
    var subunit: IntegerType? = null



    /**
     * Actual nucleotide sequence notation from 5' to 3' end using standard single letter codes. In addition to the base sequence, sugar and type of phosphate or non-phosphate linkage should also be captured.
     */
    var sequence: StringType? = null



    /**
     * The length of the sequence shall be captured.
     */
    var length: IntegerType? = null



    /**
     * (TBC).
     */
    var sequenceAttachment: Attachment? = null



    /**
     * The nucleotide present at the 5’ terminal shall be specified based on a controlled vocabulary. Since the sequence is represented from the 5' to the 3' end, the 5’ prime nucleotide is the letter at the first position in the sequence. A separate representation would be redundant.
     */
    var fivePrime: CodeableConcept? = null



    /**
     * The nucleotide present at the 3’ terminal shall be specified based on a controlled vocabulary. Since the sequence is represented from the 5' to the 3' end, the 5’ prime nucleotide is the letter at the last position in the sequence. A separate representation would be redundant.
     */
    var threePrime: CodeableConcept? = null



    /**
     * The linkages between sugar residues will also be captured.
     */
    var linkage: List<SubstanceNucleicAcidLinkage>? = null



    /**
     * 5.3.6.8.1 Sugar ID (Mandatory).
     */
    var sugar: List<SubstanceNucleicAcidSugar>? = null




}

/**
 * Nucleic acids are defined by three distinct elements: the base, sugar and linkage. Individual substance/moiety IDs will be created for each of these elements. The nucleotide sequence will be always entered in the 5’-3’ direction.
 */
class SubstanceNucleicAcidSugar: BackboneElement()
{


    /**
     * The Substance ID of the sugar or sugar-like component that make up the nucleotide.
     */
    var identifier: Identifier? = null



    /**
     * The name of the sugar or sugar-like component that make up the nucleotide.
     */
    var name: StringType? = null



    /**
     * The residues that contain a given sugar will be captured. The order of given residues will be captured in the 5‘-3‘direction consistent with the base sequences listed above.
     */
    var residueSite: StringType? = null




}

/**
 * Todo.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class SubstancePolymer: DomainResource()
{


    /**
     * Todo.
     */
    var `class`: CodeableConcept? = null



    /**
     * Todo.
     */
    var geometry: CodeableConcept? = null



    /**
     * Todo.
     */
    var copolymerConnectivity: List<CodeableConcept>? = null



    /**
     * Todo.
     */
    var modification: List<StringType>? = null



    /**
     * Todo.
     */
    var monomerSet: List<SubstancePolymerMonomerSet>? = null



    /**
     * Todo.
     */
    var repeat: List<SubstancePolymerRepeat>? = null




}

/**
 * Todo.
 */
class SubstancePolymerDegreeOfPolymerisation: BackboneElement()
{


    /**
     * Todo.
     */
    var degree: CodeableConcept? = null



    /**
     * Todo.
     */
    var amount: SubstanceAmount? = null




}

/**
 * Todo.
 */
class SubstancePolymerMonomerSet: BackboneElement()
{


    /**
     * Todo.
     */
    var ratioType: CodeableConcept? = null



    /**
     * Todo.
     */
    var startingMaterial: List<SubstancePolymerStartingMaterial>? = null




}

/**
 * Todo.
 */
class SubstancePolymerRepeat: BackboneElement()
{


    /**
     * Todo.
     */
    var numberOfUnits: IntegerType? = null



    /**
     * Todo.
     */
    var averageMolecularFormula: StringType? = null



    /**
     * Todo.
     */
    var repeatUnitAmountType: CodeableConcept? = null



    /**
     * Todo.
     */
    var repeatUnit: List<SubstancePolymerRepeatUnit>? = null




}

/**
 * Todo.
 */
class SubstancePolymerRepeatUnit: BackboneElement()
{


    /**
     * Todo.
     */
    var orientationOfPolymerisation: CodeableConcept? = null



    /**
     * Todo.
     */
    var repeatUnit: StringType? = null



    /**
     * Todo.
     */
    var amount: SubstanceAmount? = null



    /**
     * Todo.
     */
    var degreeOfPolymerisation: List<SubstancePolymerDegreeOfPolymerisation>? = null



    /**
     * Todo.
     */
    var structuralRepresentation: List<SubstancePolymerStructuralRepresentation>? = null




}

/**
 * Todo.
 */
class SubstancePolymerStartingMaterial: BackboneElement()
{


    /**
     * Todo.
     */
    var material: CodeableConcept? = null



    /**
     * Todo.
     */
    var type: CodeableConcept? = null



    /**
     * Todo.
     */
    var isDefining: BooleanType? = null



    /**
     * Todo.
     */
    var amount: SubstanceAmount? = null




}

/**
 * Todo.
 */
class SubstancePolymerStructuralRepresentation: BackboneElement()
{


    /**
     * Todo.
     */
    var type: CodeableConcept? = null



    /**
     * Todo.
     */
    var representation: StringType? = null



    /**
     * Todo.
     */
    var attachment: Attachment? = null




}

/**
 * A SubstanceProtein is defined as a single unit of a linear amino acid sequence, or a combination of subunits that are either covalently linked or have a defined invariant stoichiometric relationship. This includes all synthetic, recombinant and purified SubstanceProteins of defined sequence, whether the use is therapeutic or prophylactic. This set of elements will be used to describe albumins, coagulation factors, cytokines, growth factors, peptide/SubstanceProtein hormones, enzymes, toxins, toxoids, recombinant vaccines, and immunomodulators.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class SubstanceProtein: DomainResource()
{


    /**
     * The SubstanceProtein descriptive elements will only be used when a complete or partial amino acid sequence is available or derivable from a nucleic acid sequence.
     */
    var sequenceType: CodeableConcept? = null



    /**
     * Number of linear sequences of amino acids linked through peptide bonds. The number of subunits constituting the SubstanceProtein shall be described. It is possible that the number of subunits can be variable.
     */
    var numberOfSubunits: IntegerType? = null



    /**
     * The disulphide bond between two cysteine residues either on the same subunit or on two different subunits shall be described. The position of the disulfide bonds in the SubstanceProtein shall be listed in increasing order of subunit number and position within subunit followed by the abbreviation of the amino acids involved. The disulfide linkage positions shall actually contain the amino acid Cysteine at the respective positions.
     */
    var disulfideLinkage: List<StringType>? = null



    /**
     * This subclause refers to the description of each subunit constituting the SubstanceProtein. A subunit is a linear sequence of amino acids linked through peptide bonds. The Subunit information shall be provided when the finished SubstanceProtein is a complex of multiple sequences; subunits are not used to delineate domains within a single sequence. Subunits are listed in order of decreasing length; sequences of the same length will be ordered by decreasing molecular weight; subunits that have identical sequences will be repeated multiple times.
     */
    var subunit: List<SubstanceProteinSubunit>? = null




}

/**
 * A SubstanceProtein is defined as a single unit of a linear amino acid sequence, or a combination of subunits that are either covalently linked or have a defined invariant stoichiometric relationship. This includes all synthetic, recombinant and purified SubstanceProteins of defined sequence, whether the use is therapeutic or prophylactic. This set of elements will be used to describe albumins, coagulation factors, cytokines, growth factors, peptide/SubstanceProtein hormones, enzymes, toxins, toxoids, recombinant vaccines, and immunomodulators.
 */
class SubstanceProteinSubunit: BackboneElement()
{


    /**
     * Index of primary sequences of amino acids linked through peptide bonds in order of decreasing length. Sequences of the same length will be ordered by molecular weight. Subunits that have identical sequences will be repeated and have sequential subscripts.
     */
    var subunit: IntegerType? = null



    /**
     * The sequence information shall be provided enumerating the amino acids from N- to C-terminal end using standard single-letter amino acid codes. Uppercase shall be used for L-amino acids and lowercase for D-amino acids. Transcribed SubstanceProteins will always be described using the translated sequence; for synthetic peptide containing amino acids that are not represented with a single letter code an X should be used within the sequence. The modified amino acids will be distinguished by their position in the sequence.
     */
    var sequence: StringType? = null



    /**
     * Length of linear sequences of amino acids contained in the subunit.
     */
    var length: IntegerType? = null



    /**
     * The sequence information shall be provided enumerating the amino acids from N- to C-terminal end using standard single-letter amino acid codes. Uppercase shall be used for L-amino acids and lowercase for D-amino acids. Transcribed SubstanceProteins will always be described using the translated sequence; for synthetic peptide containing amino acids that are not represented with a single letter code an X should be used within the sequence. The modified amino acids will be distinguished by their position in the sequence.
     */
    var sequenceAttachment: Attachment? = null



    /**
     * Unique identifier for molecular fragment modification based on the ISO 11238 Substance ID.
     */
    var nTerminalModificationId: Identifier? = null



    /**
     * The name of the fragment modified at the N-terminal of the SubstanceProtein shall be specified.
     */
    var nTerminalModification: StringType? = null



    /**
     * Unique identifier for molecular fragment modification based on the ISO 11238 Substance ID.
     */
    var cTerminalModificationId: Identifier? = null



    /**
     * The modification at the C-terminal shall be specified.
     */
    var cTerminalModification: StringType? = null




}

/**
 * Todo.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class SubstanceReferenceInformation: DomainResource()
{


    /**
     * Todo.
     */
    var comment: StringType? = null



    /**
     * Todo.
     */
    var gene: List<SubstanceReferenceInformationGene>? = null



    /**
     * Todo.
     */
    var geneElement: List<SubstanceReferenceInformationGeneElement>? = null



    /**
     * Todo.
     */
    var classification: List<SubstanceReferenceInformationClassification>? = null



    /**
     * Todo.
     */
    var target: List<SubstanceReferenceInformationTarget>? = null




}

/**
 * Todo.
 */
class SubstanceReferenceInformationClassification: BackboneElement()
{


    /**
     * Todo.
     */
    var domain: CodeableConcept? = null



    /**
     * Todo.
     */
    var classification: CodeableConcept? = null



    /**
     * Todo.
     */
    var subtype: List<CodeableConcept>? = null



    /**
     * Todo.
     */
    var source: List<Reference>? = null

    @JsonIgnore
    var sourceTarget: List<Resource>? = null


}

/**
 * Todo.
 */
class SubstanceReferenceInformationGene: BackboneElement()
{


    /**
     * Todo.
     */
    var geneSequenceOrigin: CodeableConcept? = null



    /**
     * Todo.
     */
    var gene: CodeableConcept? = null



    /**
     * Todo.
     */
    var source: List<Reference>? = null

    @JsonIgnore
    var sourceTarget: List<Resource>? = null


}

/**
 * Todo.
 */
class SubstanceReferenceInformationGeneElement: BackboneElement()
{


    /**
     * Todo.
     */
    var type: CodeableConcept? = null



    /**
     * Todo.
     */
    var element: Identifier? = null



    /**
     * Todo.
     */
    var source: List<Reference>? = null

    @JsonIgnore
    var sourceTarget: List<Resource>? = null


}

/**
 * Todo.
 */
class SubstanceReferenceInformationTarget: BackboneElement()
{


    /**
     * Todo.
     */
    var target: Identifier? = null



    /**
     * Todo.
     */
    var type: CodeableConcept? = null



    /**
     * Todo.
     */
    var interaction: CodeableConcept? = null



    /**
     * Todo.
     */
    var organism: CodeableConcept? = null



    /**
     * Todo.
     */
    var organismType: CodeableConcept? = null



    /**
     *
     */
    var amountQuantity: Quantity? = null



    /**
     *
     */
    var amountRange: Range? = null



    /**
     *
     */
    var amountString: StringType? = null



    /**
     * Todo.
     */
    var amountType: CodeableConcept? = null



    /**
     * Todo.
     */
    var source: List<Reference>? = null

    @JsonIgnore
    var sourceTarget: List<Resource>? = null


}

/**
 * Source material shall capture information on the taxonomic and anatomical origins as well as the fraction of a material that can result in or can be modified to form a substance. This set of data elements shall be used to define polymer substances isolated from biological matrices. Taxonomic and anatomical origins shall be described using a controlled vocabulary as required. This information is captured for naturally derived polymers ( . starch) and structurally diverse substances. For Organisms belonging to the Kingdom Plantae the Substance level defines the fresh material of a single species or infraspecies, the Herbal Drug and the Herbal preparation. For Herbal preparations, the fraction information will be captured at the Substance information level and additional information for herbal extracts will be captured at the Specified Substance Group 1 information level. See for further explanation the Substance Class: Structurally Diverse and the herbal annex.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class SubstanceSourceMaterial: DomainResource()
{


    /**
     * General high level classification of the source material specific to the origin of the material.
     */
    var sourceMaterialClass: CodeableConcept? = null



    /**
     * The type of the source material shall be specified based on a controlled vocabulary. For vaccines, this subclause refers to the class of infectious agent.
     */
    var sourceMaterialType: CodeableConcept? = null



    /**
     * The state of the source material when extracted.
     */
    var sourceMaterialState: CodeableConcept? = null



    /**
     * The unique identifier associated with the source material parent organism shall be specified.
     */
    var organismId: Identifier? = null



    /**
     * The organism accepted Scientific name shall be provided based on the organism taxonomy.
     */
    var organismName: StringType? = null



    /**
     * The parent of the herbal drug Ginkgo biloba, Leaf is the substance ID of the substance (fresh) of Ginkgo biloba L. or Ginkgo biloba L. (Whole plant).
     */
    var parentSubstanceId: List<Identifier>? = null



    /**
     * The parent substance of the Herbal Drug, or Herbal preparation.
     */
    var parentSubstanceName: List<StringType>? = null



    /**
     * The country where the plant material is harvested or the countries where the plasma is sourced from as laid down in accordance with the Plasma Master File. For “Plasma-derived substances” the attribute country of origin provides information about the countries used for the manufacturing of the Cryopoor plama or Crioprecipitate.
     */
    var countryOfOrigin: List<CodeableConcept>? = null



    /**
     * The place/region where the plant is harvested or the places/regions where the animal source material has its habitat.
     */
    var geographicalLocation: List<StringType>? = null



    /**
     * Stage of life for animals, plants, insects and microorganisms. This information shall be provided only when the substance is significantly different in these stages (e.g. foetal bovine serum).
     */
    var developmentStage: CodeableConcept? = null



    /**
     * Many complex materials are fractions of parts of plants, animals, or minerals. Fraction elements are often necessary to define both Substances and Specified Group 1 Substances. For substances derived from Plants, fraction information will be captured at the Substance information level ( . Oils, Juices and Exudates). Additional information for Extracts, such as extraction solvent composition, will be captured at the Specified Substance Group 1 information level. For plasma-derived products fraction information will be captured at the Substance and the Specified Substance Group 1 levels.
     */
    var fractionDescription: List<SubstanceSourceMaterialFractionDescription>? = null



    /**
     * This subclause describes the organism which the substance is derived from. For vaccines, the parent organism shall be specified based on these subclause elements. As an example, full taxonomy will be described for the Substance Name: ., Leaf.
     */
    var organism: SubstanceSourceMaterialOrganism? = null



    /**
     * To do.
     */
    var partDescription: List<SubstanceSourceMaterialPartDescription>? = null




}

/**
 * Source material shall capture information on the taxonomic and anatomical origins as well as the fraction of a material that can result in or can be modified to form a substance. This set of data elements shall be used to define polymer substances isolated from biological matrices. Taxonomic and anatomical origins shall be described using a controlled vocabulary as required. This information is captured for naturally derived polymers ( . starch) and structurally diverse substances. For Organisms belonging to the Kingdom Plantae the Substance level defines the fresh material of a single species or infraspecies, the Herbal Drug and the Herbal preparation. For Herbal preparations, the fraction information will be captured at the Substance information level and additional information for herbal extracts will be captured at the Specified Substance Group 1 information level. See for further explanation the Substance Class: Structurally Diverse and the herbal annex.
 */
class SubstanceSourceMaterialAuthor: BackboneElement()
{


    /**
     * The type of author of an organism species shall be specified. The parenthetical author of an organism species refers to the first author who published the plant/animal name (of any rank). The primary author of an organism species refers to the first author(s), who validly published the plant/animal name.
     */
    var authorType: CodeableConcept? = null



    /**
     * The author of an organism species shall be specified. The author year of an organism shall also be specified when applicable; refers to the year in which the first author(s) published the infraspecific plant/animal name (of any rank).
     */
    var authorDescription: StringType? = null




}

/**
 * Source material shall capture information on the taxonomic and anatomical origins as well as the fraction of a material that can result in or can be modified to form a substance. This set of data elements shall be used to define polymer substances isolated from biological matrices. Taxonomic and anatomical origins shall be described using a controlled vocabulary as required. This information is captured for naturally derived polymers ( . starch) and structurally diverse substances. For Organisms belonging to the Kingdom Plantae the Substance level defines the fresh material of a single species or infraspecies, the Herbal Drug and the Herbal preparation. For Herbal preparations, the fraction information will be captured at the Substance information level and additional information for herbal extracts will be captured at the Specified Substance Group 1 information level. See for further explanation the Substance Class: Structurally Diverse and the herbal annex.
 */
class SubstanceSourceMaterialFractionDescription: BackboneElement()
{


    /**
     * This element is capturing information about the fraction of a plant part, or human plasma for fractionation.
     */
    var fraction: StringType? = null



    /**
     * The specific type of the material constituting the component. For Herbal preparations the particulars of the extracts (liquid/dry) is described in Specified Substance Group 1.
     */
    var materialType: CodeableConcept? = null




}

/**
 * Source material shall capture information on the taxonomic and anatomical origins as well as the fraction of a material that can result in or can be modified to form a substance. This set of data elements shall be used to define polymer substances isolated from biological matrices. Taxonomic and anatomical origins shall be described using a controlled vocabulary as required. This information is captured for naturally derived polymers ( . starch) and structurally diverse substances. For Organisms belonging to the Kingdom Plantae the Substance level defines the fresh material of a single species or infraspecies, the Herbal Drug and the Herbal preparation. For Herbal preparations, the fraction information will be captured at the Substance information level and additional information for herbal extracts will be captured at the Specified Substance Group 1 information level. See for further explanation the Substance Class: Structurally Diverse and the herbal annex.
 */
class SubstanceSourceMaterialHybrid: BackboneElement()
{


    /**
     * The identifier of the maternal species constituting the hybrid organism shall be specified based on a controlled vocabulary. For plants, the parents aren’t always known, and it is unlikely that it will be known which is maternal and which is paternal.
     */
    var maternalOrganismId: StringType? = null



    /**
     * The name of the maternal species constituting the hybrid organism shall be specified. For plants, the parents aren’t always known, and it is unlikely that it will be known which is maternal and which is paternal.
     */
    var maternalOrganismName: StringType? = null



    /**
     * The identifier of the paternal species constituting the hybrid organism shall be specified based on a controlled vocabulary.
     */
    var paternalOrganismId: StringType? = null



    /**
     * The name of the paternal species constituting the hybrid organism shall be specified.
     */
    var paternalOrganismName: StringType? = null



    /**
     * The hybrid type of an organism shall be specified.
     */
    var hybridType: CodeableConcept? = null




}

/**
 * Source material shall capture information on the taxonomic and anatomical origins as well as the fraction of a material that can result in or can be modified to form a substance. This set of data elements shall be used to define polymer substances isolated from biological matrices. Taxonomic and anatomical origins shall be described using a controlled vocabulary as required. This information is captured for naturally derived polymers ( . starch) and structurally diverse substances. For Organisms belonging to the Kingdom Plantae the Substance level defines the fresh material of a single species or infraspecies, the Herbal Drug and the Herbal preparation. For Herbal preparations, the fraction information will be captured at the Substance information level and additional information for herbal extracts will be captured at the Specified Substance Group 1 information level. See for further explanation the Substance Class: Structurally Diverse and the herbal annex.
 */
class SubstanceSourceMaterialOrganism: BackboneElement()
{


    /**
     * The family of an organism shall be specified.
     */
    var family: CodeableConcept? = null



    /**
     * The genus of an organism shall be specified; refers to the Latin epithet of the genus element of the plant/animal scientific name; it is present in names for genera, species and infraspecies.
     */
    var genus: CodeableConcept? = null



    /**
     * The species of an organism shall be specified; refers to the Latin epithet of the species of the plant/animal; it is present in names for species and infraspecies.
     */
    var species: CodeableConcept? = null



    /**
     * The Intraspecific type of an organism shall be specified.
     */
    var intraspecificType: CodeableConcept? = null



    /**
     * The intraspecific description of an organism shall be specified based on a controlled vocabulary. For Influenza Vaccine, the intraspecific description shall contain the syntax of the antigen in line with the WHO convention.
     */
    var intraspecificDescription: StringType? = null



    /**
     * 4.9.13.6.1 Author type (Conditional).
     */
    var author: List<SubstanceSourceMaterialAuthor>? = null



    /**
     * 4.9.13.8.1 Hybrid species maternal organism ID (Optional).
     */
    var hybrid: SubstanceSourceMaterialHybrid? = null



    /**
     * 4.9.13.7.1 Kingdom (Conditional).
     */
    var organismGeneral: SubstanceSourceMaterialOrganismGeneral? = null




}

/**
 * Source material shall capture information on the taxonomic and anatomical origins as well as the fraction of a material that can result in or can be modified to form a substance. This set of data elements shall be used to define polymer substances isolated from biological matrices. Taxonomic and anatomical origins shall be described using a controlled vocabulary as required. This information is captured for naturally derived polymers ( . starch) and structurally diverse substances. For Organisms belonging to the Kingdom Plantae the Substance level defines the fresh material of a single species or infraspecies, the Herbal Drug and the Herbal preparation. For Herbal preparations, the fraction information will be captured at the Substance information level and additional information for herbal extracts will be captured at the Specified Substance Group 1 information level. See for further explanation the Substance Class: Structurally Diverse and the herbal annex.
 */
class SubstanceSourceMaterialOrganismGeneral: BackboneElement()
{


    /**
     * The kingdom of an organism shall be specified.
     */
    var kingdom: CodeableConcept? = null



    /**
     * The phylum of an organism shall be specified.
     */
    var phylum: CodeableConcept? = null



    /**
     * The class of an organism shall be specified.
     */
    var `class`: CodeableConcept? = null



    /**
     * The order of an organism shall be specified,.
     */
    var order: CodeableConcept? = null




}

/**
 * Source material shall capture information on the taxonomic and anatomical origins as well as the fraction of a material that can result in or can be modified to form a substance. This set of data elements shall be used to define polymer substances isolated from biological matrices. Taxonomic and anatomical origins shall be described using a controlled vocabulary as required. This information is captured for naturally derived polymers ( . starch) and structurally diverse substances. For Organisms belonging to the Kingdom Plantae the Substance level defines the fresh material of a single species or infraspecies, the Herbal Drug and the Herbal preparation. For Herbal preparations, the fraction information will be captured at the Substance information level and additional information for herbal extracts will be captured at the Specified Substance Group 1 information level. See for further explanation the Substance Class: Structurally Diverse and the herbal annex.
 */
class SubstanceSourceMaterialPartDescription: BackboneElement()
{


    /**
     * Entity of anatomical origin of source material within an organism.
     */
    var part: CodeableConcept? = null



    /**
     * The detailed anatomic location when the part can be extracted from different anatomical locations of the organism. Multiple alternative locations may apply.
     */
    var partLocation: CodeableConcept? = null




}

/**
 * The detailed description of a substance, typically at a level beyond what is used for prescribing.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class SubstanceSpecification: DomainResource()
{


    /**
     * Identifier by which this substance is known.
     */
    var identifier: Identifier? = null



    /**
     * High level categorization, e.g. polymer or nucleic acid.
     */
    var type: CodeableConcept? = null



    /**
     * Status of substance within the catalogue e.g. approved.
     */
    var status: CodeableConcept? = null



    /**
     * If the substance applies to only human or veterinary use.
     */
    var domain: CodeableConcept? = null



    /**
     * Textual description of the substance.
     */
    var description: StringType? = null



    /**
     * Supporting literature.
     */
    var source: List<Reference>? = null

    @JsonIgnore
    var sourceTarget: List<Resource>? = null

    /**
     * Textual comment about this record of a substance.
     */
    var comment: StringType? = null



    /**
     * Moiety, for structural modifications.
     */
    var moiety: List<SubstanceSpecificationMoiety>? = null



    /**
     * General specifications for this substance, including how it is related to other substances.
     */
    var property: List<SubstanceSpecificationProperty>? = null



    /**
     * General information detailing this substance.
     */
    var referenceInformation: Reference? = null

    @JsonIgnore
    var referenceInformationTarget: Resource? = null

    /**
     * Structural information.
     */
    var structure: SubstanceSpecificationStructure? = null



    /**
     * Codes associated with the substance.
     */
    var code: List<SubstanceSpecificationCode>? = null



    /**
     * Names applicable to this substance.
     */
    var name: List<SubstanceSpecificationName>? = null



    /**
     * The molecular weight or weight range (for proteins, polymers or nucleic acids).
     */
    var molecularWeight: List<SubstanceSpecificationMolecularWeight>? = null



    /**
     * A link between this substance and another, with details of the relationship.
     */
    var relationship: List<SubstanceSpecificationRelationship>? = null



    /**
     * Data items specific to nucleic acids.
     */
    var nucleicAcid: Reference? = null

    @JsonIgnore
    var nucleicAcidTarget: Resource? = null

    /**
     * Data items specific to polymers.
     */
    var polymer: Reference? = null

    @JsonIgnore
    var polymerTarget: Resource? = null

    /**
     * Data items specific to proteins.
     */
    var protein: Reference? = null

    @JsonIgnore
    var proteinTarget: Resource? = null

    /**
     * Material or taxonomic/anatomical source for the substance.
     */
    var sourceMaterial: Reference? = null

    @JsonIgnore
    var sourceMaterialTarget: Resource? = null


}

/**
 * The detailed description of a substance, typically at a level beyond what is used for prescribing.
 */
class SubstanceSpecificationCode: BackboneElement()
{


    /**
     * The specific code.
     */
    var code: CodeableConcept? = null



    /**
     * Status of the code assignment.
     */
    var status: CodeableConcept? = null



    /**
     * The date at which the code status is changed as part of the terminology maintenance.
     */
    var statusDate: DateTimeType? = null



    /**
     * Any comment can be provided in this field, if necessary.
     */
    var comment: StringType? = null



    /**
     * Supporting literature.
     */
    var source: List<Reference>? = null

    @JsonIgnore
    var sourceTarget: List<Resource>? = null


}

/**
 * The detailed description of a substance, typically at a level beyond what is used for prescribing.
 */
class SubstanceSpecificationIsotope: BackboneElement()
{


    /**
     * Substance identifier for each non-natural or radioisotope.
     */
    var identifier: Identifier? = null



    /**
     * Substance name for each non-natural or radioisotope.
     */
    var name: CodeableConcept? = null



    /**
     * The type of isotopic substitution present in a single substance.
     */
    var substitution: CodeableConcept? = null



    /**
     * Half life - for a non-natural nuclide.
     */
    var halfLife: Quantity? = null



    /**
     * The molecular weight or weight range (for proteins, polymers or nucleic acids).
     */
    var molecularWeight: SubstanceSpecificationMolecularWeight? = null




}

/**
 * The detailed description of a substance, typically at a level beyond what is used for prescribing.
 */
class SubstanceSpecificationMoiety: BackboneElement()
{


    /**
     * Role that the moiety is playing.
     */
    var role: CodeableConcept? = null



    /**
     * Identifier by which this moiety substance is known.
     */
    var identifier: Identifier? = null



    /**
     * Textual name for this moiety substance.
     */
    var name: StringType? = null



    /**
     * Stereochemistry type.
     */
    var stereochemistry: CodeableConcept? = null



    /**
     * Optical activity type.
     */
    var opticalActivity: CodeableConcept? = null



    /**
     * Molecular formula.
     */
    var molecularFormula: StringType? = null



    /**
     *
     */
    var amountQuantity: Quantity? = null



    /**
     *
     */
    var amountString: StringType? = null




}

/**
 * The detailed description of a substance, typically at a level beyond what is used for prescribing.
 */
class SubstanceSpecificationMolecularWeight: BackboneElement()
{


    /**
     * The method by which the molecular weight was determined.
     */
    var method: CodeableConcept? = null



    /**
     * Type of molecular weight such as exact, average (also known as. number average), weight average.
     */
    var type: CodeableConcept? = null



    /**
     * Used to capture quantitative values for a variety of elements. If only limits are given, the arithmetic mean would be the average. If only a single definite value for a given element is given, it would be captured in this field.
     */
    var amount: Quantity? = null




}

/**
 * The detailed description of a substance, typically at a level beyond what is used for prescribing.
 */
class SubstanceSpecificationName(
    val name: StringType): BackboneElement() {


    /**
     * Name type.
     */
    var type: CodeableConcept? = null



    /**
     * The status of the name.
     */
    var status: CodeableConcept? = null



    /**
     * If this is the preferred name for this substance.
     */
    var preferred: BooleanType? = null



    /**
     * Language of the name.
     */
    var language: List<CodeableConcept>? = null



    /**
     * The use context of this name for example if there is a different name a drug active ingredient as opposed to a food colour additive.
     */
    var domain: List<CodeableConcept>? = null



    /**
     * The jurisdiction where this name applies.
     */
    var jurisdiction: List<CodeableConcept>? = null



    /**
     * A synonym of this name.
     */
    var synonym: List<SubstanceSpecificationName>? = null



    /**
     * A translation for this name.
     */
    var translation: List<SubstanceSpecificationName>? = null



    /**
     * Details of the official nature of this name.
     */
    var official: List<SubstanceSpecificationOfficial>? = null



    /**
     * Supporting literature.
     */
    var source: List<Reference>? = null

    @JsonIgnore
    var sourceTarget: List<Resource>? = null


}

/**
 * The detailed description of a substance, typically at a level beyond what is used for prescribing.
 */
class SubstanceSpecificationOfficial: BackboneElement()
{


    /**
     * Which authority uses this official name.
     */
    var authority: CodeableConcept? = null



    /**
     * The status of the official name.
     */
    var status: CodeableConcept? = null



    /**
     * Date of official name change.
     */
    var date: DateTimeType? = null




}

/**
 * The detailed description of a substance, typically at a level beyond what is used for prescribing.
 */
class SubstanceSpecificationProperty: BackboneElement()
{


    /**
     * A category for this property, e.g. Physical, Chemical, Enzymatic.
     */
    var category: CodeableConcept? = null



    /**
     * Property type e.g. viscosity, pH, isoelectric point.
     */
    var code: CodeableConcept? = null



    /**
     * Parameters that were used in the measurement of a property (e.g. for viscosity: measured at 20C with a pH of 7.1).
     */
    var parameters: StringType? = null



    /**
     *
     */
    var definingSubstanceReference: Reference? = null

    @JsonIgnore
    var definingSubstanceReferenceTarget: Resource? = null

    /**
     *
     */
    var definingSubstanceCodeableConcept: CodeableConcept? = null



    /**
     *
     */
    var amountQuantity: Quantity? = null



    /**
     *
     */
    var amountString: StringType? = null




}

/**
 * The detailed description of a substance, typically at a level beyond what is used for prescribing.
 */
class SubstanceSpecificationRelationship: BackboneElement()
{


    /**
     *
     */
    var substanceReference: Reference? = null

    @JsonIgnore
    var substanceReferenceTarget: Resource? = null

    /**
     *
     */
    var substanceCodeableConcept: CodeableConcept? = null



    /**
     * For example "salt to parent", "active moiety", "starting material".
     */
    var relationship: CodeableConcept? = null



    /**
     * For example where an enzyme strongly bonds with a particular substance, this is a defining relationship for that enzyme, out of several possible substance relationships.
     */
    var isDefining: BooleanType? = null



    /**
     *
     */
    var amountQuantity: Quantity? = null



    /**
     *
     */
    var amountRange: Range? = null



    /**
     *
     */
    var amountRatio: Ratio? = null



    /**
     *
     */
    var amountString: StringType? = null



    /**
     * For use when the numeric.
     */
    var amountRatioLowLimit: Ratio? = null



    /**
     * An operator for the amount, for example "average", "approximately", "less than".
     */
    var amountType: CodeableConcept? = null



    /**
     * Supporting literature.
     */
    var source: List<Reference>? = null

    @JsonIgnore
    var sourceTarget: List<Resource>? = null


}

/**
 * The detailed description of a substance, typically at a level beyond what is used for prescribing.
 */
class SubstanceSpecificationRepresentation: BackboneElement()
{


    /**
     * The type of structure (e.g. Full, Partial, Representative).
     */
    var type: CodeableConcept? = null



    /**
     * The structural representation as text string in a format e.g. InChI, SMILES, MOLFILE, CDX.
     */
    var representation: StringType? = null



    /**
     * An attached file with the structural representation.
     */
    var attachment: Attachment? = null




}

/**
 * The detailed description of a substance, typically at a level beyond what is used for prescribing.
 */
class SubstanceSpecificationStructure: BackboneElement()
{


    /**
     * Stereochemistry type.
     */
    var stereochemistry: CodeableConcept? = null



    /**
     * Optical activity type.
     */
    var opticalActivity: CodeableConcept? = null



    /**
     * Molecular formula.
     */
    var molecularFormula: StringType? = null



    /**
     * Specified per moiety according to the Hill system, i.e. first C, then H, then alphabetical, each moiety separated by a dot.
     */
    var molecularFormulaByMoiety: StringType? = null



    /**
     * Applicable for single substances that contain a radionuclide or a non-natural isotopic ratio.
     */
    var isotope: List<SubstanceSpecificationIsotope>? = null



    /**
     * The molecular weight or weight range (for proteins, polymers or nucleic acids).
     */
    var molecularWeight: SubstanceSpecificationMolecularWeight? = null



    /**
     * Supporting literature.
     */
    var source: List<Reference>? = null

    @JsonIgnore
    var sourceTarget: List<Resource>? = null

    /**
     * Molecular structural representation.
     */
    var representation: List<SubstanceSpecificationRepresentation>? = null




}

/**
 * Record of delivery of what is supplied.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class SupplyDelivery: DomainResource()
{


    /**
     * Identifier for the supply delivery event that is used to identify it across multiple disparate systems.
     */
    var identifier: List<Identifier>? = null



    /**
     * A plan, proposal or order that is fulfilled in whole or in part by this event.
     */
    var basedOn: List<Reference>? = null

    @JsonIgnore
    var basedOnTarget: List<Resource>? = null

    /**
     * A larger event of which this particular event is a component or step.
     */
    var partOf: List<Reference>? = null

    @JsonIgnore
    var partOfTarget: List<Resource>? = null

    /**
     * A code specifying the state of the dispense event.
     */
    var status: SupplyDeliveryStatus? = null



    /**
     * A link to a resource representing the person whom the delivered item is for.
     */
    var patient: Reference? = null

    @JsonIgnore
    var patientTarget: Resource? = null

    /**
     * Indicates the type of dispensing event that is performed. Examples include: Trial Fill, Completion of Trial, Partial Fill, Emergency Fill, Samples, etc.
     */
    var type: CodeableConcept? = null



    /**
     * The item that is being delivered or has been supplied.
     */
    var suppliedItem: SupplyDeliverySuppliedItem? = null



    /**
     *
     */
    var occurrenceDateTime: DateTimeType? = null



    /**
     *
     */
    var occurrencePeriod: Period? = null



    /**
     *
     */
    var occurrenceTiming: Timing? = null



    /**
     * The individual responsible for dispensing the medication, supplier or device.
     */
    var supplier: Reference? = null

    @JsonIgnore
    var supplierTarget: Resource? = null

    /**
     * Identification of the facility/location where the Supply was shipped to, as part of the dispense event.
     */
    var destination: Reference? = null

    @JsonIgnore
    var destinationTarget: Resource? = null

    /**
     * Identifies the person who picked up the Supply.
     */
    var receiver: List<Reference>? = null

    @JsonIgnore
    var receiverTarget: List<Resource>? = null


}

/**
 * Status of the supply delivery.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class SupplyDeliveryStatus(
    @JsonValue val text: String) {
    IN_PROGRESS("in-progress"),
    COMPLETED("completed"),
    ABANDONED("abandoned"),
    ENTERED_IN_ERROR("entered-in-error")
}




/**
 * Record of delivery of what is supplied.
 */
class SupplyDeliverySuppliedItem: BackboneElement()
{


    /**
     * The amount of supply that has been dispensed. Includes unit of measure.
     */
    var quantity: Quantity? = null



    /**
     *
     */
    var itemCodeableConcept: CodeableConcept? = null



    /**
     *
     */
    var itemReference: Reference? = null

    @JsonIgnore
    var itemReferenceTarget: Resource? = null


}

/**
 * A record of a request for a medication, substance or device used in the healthcare setting.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class SupplyRequest(
    val quantity: Quantity): DomainResource() {


    /**
     * Business identifiers assigned to this SupplyRequest by the author and/or other systems. These identifiers remain constant as the resource is updated and propagates from server to server.
     */
    var identifier: List<Identifier>? = null



    /**
     * Status of the supply request.
     */
    var status: SupplyRequestStatus? = null



    /**
     * Category of supply, e.g.  central, non-stock, etc. This is used to support work flows associated with the supply process.
     */
    var category: CodeableConcept? = null



    /**
     * Indicates how quickly this SupplyRequest should be addressed with respect to other requests.
     */
    var priority: RequestPriority? = null



    /**
     *
     */
    var itemCodeableConcept: CodeableConcept? = null



    /**
     *
     */
    var itemReference: Reference? = null

    @JsonIgnore
    var itemReferenceTarget: Resource? = null

    /**
     * Specific parameters for the ordered item.  For example, the size of the indicated item.
     */
    var parameter: List<SupplyRequestParameter>? = null



    /**
     *
     */
    var occurrenceDateTime: DateTimeType? = null



    /**
     *
     */
    var occurrencePeriod: Period? = null



    /**
     *
     */
    var occurrenceTiming: Timing? = null



    /**
     * When the request was made.
     */
    var authoredOn: DateTimeType? = null



    /**
     * The device, practitioner, etc. who initiated the request.
     */
    var requester: Reference? = null

    @JsonIgnore
    var requesterTarget: Resource? = null

    /**
     * Who is intended to fulfill the request.
     */
    var supplier: List<Reference>? = null

    @JsonIgnore
    var supplierTarget: List<Resource>? = null

    /**
     * The reason why the supply item was requested.
     */
    var reasonCode: List<CodeableConcept>? = null



    /**
     * The reason why the supply item was requested.
     */
    var reasonReference: List<Reference>? = null

    @JsonIgnore
    var reasonReferenceTarget: List<Resource>? = null

    /**
     * Where the supply is expected to come from.
     */
    var deliverFrom: Reference? = null

    @JsonIgnore
    var deliverFromTarget: Resource? = null

    /**
     * Where the supply is destined to go.
     */
    var deliverTo: Reference? = null

    @JsonIgnore
    var deliverToTarget: Resource? = null


}

/**
 * A record of a request for a medication, substance or device used in the healthcare setting.
 */
class SupplyRequestParameter: BackboneElement()
{


    /**
     * A code or string that identifies the device detail being asserted.
     */
    var code: CodeableConcept? = null



    /**
     *
     */
    var valueCodeableConcept: CodeableConcept? = null



    /**
     *
     */
    var valueQuantity: Quantity? = null



    /**
     *
     */
    var valueRange: Range? = null



    /**
     *
     */
    var valueBoolean: BooleanType? = null




}

/**
 * Status of the supply request.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class SupplyRequestStatus(
    @JsonValue val text: String) {
    DRAFT("draft"),
    ACTIVE("active"),
    SUSPENDED("suspended"),
    CANCELLED("cancelled"),
    COMPLETED("completed"),
    ENTERED_IN_ERROR("entered-in-error"),
    UNKNOWN("unknown")
}




/**
 * Operations supported by REST at the system level.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class SystemRestfulInteraction(
    @JsonValue val text: String) {
    TRANSACTION("transaction"),
    BATCH("batch"),
    SEARCH_SYSTEM("search-system"),
    HISTORY_SYSTEM("history-system")
}




/**
 * A task to be performed.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class Task(
    val status: TaskStatus,
    val intent: TaskIntent): DomainResource() {


    /**
     * The business identifier for this task.
     */
    var identifier: List<Identifier>? = null



    /**
     * The URL pointing to a *FHIR*-defined protocol, guideline, orderset or other definition that is adhered to in whole or in part by this Task.
     */
    var instantiatesCanonical: CanonicalType? = null



    /**
     * The URL pointing to an *externally* maintained  protocol, guideline, orderset or other definition that is adhered to in whole or in part by this Task.
     */
    var instantiatesUri: UriType? = null



    /**
     * BasedOn refers to a higher-level authorization that triggered the creation of the task.  It references a "request" resource such as a ServiceRequest, MedicationRequest, ServiceRequest, CarePlan, etc. which is distinct from the "request" resource the task is seeking to fulfill.  This latter resource is referenced by FocusOn.  For example, based on a ServiceRequest (= BasedOn), a task is created to fulfill a procedureRequest ( = FocusOn ) to collect a specimen from a patient.
     */
    var basedOn: List<Reference>? = null

    @JsonIgnore
    var basedOnTarget: List<Resource>? = null

    /**
     * An identifier that links together multiple tasks and other requests that were created in the same context.
     */
    var groupIdentifier: Identifier? = null



    /**
     * Task that this particular task is part of.
     */
    var partOf: List<Reference>? = null

    @JsonIgnore
    var partOfTarget: List<Resource>? = null

    /**
     * An explanation as to why this task is held, failed, was refused, etc.
     */
    var statusReason: CodeableConcept? = null



    /**
     * Contains business-specific nuances of the business state.
     */
    var businessStatus: CodeableConcept? = null



    /**
     * Indicates how quickly the Task should be addressed with respect to other requests.
     */
    var priority: RequestPriority? = null



    /**
     * A name or code (or both) briefly describing what the task involves.
     */
    var code: CodeableConcept? = null



    /**
     * A free-text description of what is to be performed.
     */
    var description: StringType? = null



    /**
     * The request being actioned or the resource being manipulated by this task.
     */
    var focus: Reference? = null

    @JsonIgnore
    var focusTarget: Resource? = null

    /**
     * The entity who benefits from the performance of the service specified in the task (e.g., the patient).
     */
    var `for`: Reference? = null

    @JsonIgnore
    var forTarget: Resource? = null

    /**
     * The healthcare event  (e.g. a patient and healthcare provider interaction) during which this task was created.
     */
    var encounter: Reference? = null

    @JsonIgnore
    var encounterTarget: Resource? = null

    /**
     * Identifies the time action was first taken against the task (start) and/or the time final action was taken against the task prior to marking it as completed (end).
     */
    var executionPeriod: Period? = null



    /**
     * The date and time this task was created.
     */
    var authoredOn: DateTimeType? = null



    /**
     * The date and time of last modification to this task.
     */
    var lastModified: DateTimeType? = null



    /**
     * The creator of the task.
     */
    var requester: Reference? = null

    @JsonIgnore
    var requesterTarget: Resource? = null

    /**
     * The kind of participant that should perform the task.
     */
    var performerType: List<CodeableConcept>? = null



    /**
     * Individual organization or Device currently responsible for task execution.
     */
    var owner: Reference? = null

    @JsonIgnore
    var ownerTarget: Resource? = null

    /**
     * Principal physical location where the this task is performed.
     */
    var location: Reference? = null

    @JsonIgnore
    var locationTarget: Resource? = null

    /**
     * A description or code indicating why this task needs to be performed.
     */
    var reasonCode: CodeableConcept? = null



    /**
     * A resource reference indicating why this task needs to be performed.
     */
    var reasonReference: Reference? = null

    @JsonIgnore
    var reasonReferenceTarget: Resource? = null

    /**
     * Insurance plans, coverage extensions, pre-authorizations and/or pre-determinations that may be relevant to the Task.
     */
    var insurance: List<Reference>? = null

    @JsonIgnore
    var insuranceTarget: List<Resource>? = null

    /**
     * Free-text information captured about the task as it progresses.
     */
    var note: List<Annotation>? = null



    /**
     * Links to Provenance records for past versions of this Task that identify key state transitions or updates that are likely to be relevant to a user looking at the current version of the task.
     */
    var relevantHistory: List<Reference>? = null

    @JsonIgnore
    var relevantHistoryTarget: List<Resource>? = null

    /**
     * If the Task.focus is a request resource and the task is seeking fulfillment (i.e. is asking for the request to be actioned), this element identifies any limitations on what parts of the referenced request should be actioned.
     */
    var restriction: TaskRestriction? = null



    /**
     * Additional information that may be needed in the execution of the task.
     */
    var input: List<TaskInput>? = null



    /**
     * Outputs produced by the Task.
     */
    var output: List<TaskOutput>? = null




}

/**
 * A task to be performed.
 */
class TaskInput(
    val type: CodeableConcept): BackboneElement() {


    /**
     *
     */
    var valueBase64Binary: Base64BinaryType? = null



    /**
     *
     */
    var valueBoolean: BooleanType? = null



    /**
     *
     */
    var valueCanonical: CanonicalType? = null



    /**
     *
     */
    var valueCode: CodeType? = null



    /**
     *
     */
    var valueDate: DateType? = null



    /**
     *
     */
    var valueDateTime: DateTimeType? = null



    /**
     *
     */
    var valueDecimal: DecimalType? = null



    /**
     *
     */
    var valueId: IdType? = null



    /**
     *
     */
    var valueInstant: InstantType? = null



    /**
     *
     */
    var valueInteger: IntegerType? = null



    /**
     *
     */
    var valueMarkdown: MarkdownType? = null



    /**
     *
     */
    var valueOid: OidType? = null



    /**
     *
     */
    var valuePositiveInt: PositiveIntType? = null



    /**
     *
     */
    var valueString: StringType? = null



    /**
     *
     */
    var valueTime: TimeType? = null



    /**
     *
     */
    var valueUnsignedInt: UnsignedIntType? = null



    /**
     *
     */
    var valueUri: UriType? = null



    /**
     *
     */
    var valueUrl: UrlType? = null



    /**
     *
     */
    var valueUuid: UuidType? = null



    /**
     *
     */
    var valueAddress: Address? = null



    /**
     *
     */
    var valueAge: Age? = null



    /**
     *
     */
    var valueAnnotation: Annotation? = null



    /**
     *
     */
    var valueAttachment: Attachment? = null



    /**
     *
     */
    var valueCodeableConcept: CodeableConcept? = null



    /**
     *
     */
    var valueCoding: Coding? = null



    /**
     *
     */
    var valueContactPoint: ContactPoint? = null



    /**
     *
     */
    var valueCount: Count? = null



    /**
     *
     */
    var valueDistance: Distance? = null



    /**
     *
     */
    var valueDuration: Duration? = null



    /**
     *
     */
    var valueHumanName: HumanName? = null



    /**
     *
     */
    var valueIdentifier: Identifier? = null



    /**
     *
     */
    var valueMoney: Money? = null



    /**
     *
     */
    var valuePeriod: Period? = null



    /**
     *
     */
    var valueQuantity: Quantity? = null



    /**
     *
     */
    var valueRange: Range? = null



    /**
     *
     */
    var valueRatio: Ratio? = null



    /**
     *
     */
    var valueReference: Reference? = null

    @JsonIgnore
    var valueReferenceTarget: Resource? = null

    /**
     *
     */
    var valueSampledData: SampledData? = null



    /**
     *
     */
    var valueSignature: Signature? = null



    /**
     *
     */
    var valueTiming: Timing? = null



    /**
     *
     */
    var valueContactDetail: ContactDetail? = null



    /**
     *
     */
    var valueContributor: Contributor? = null



    /**
     *
     */
    var valueDataRequirement: DataRequirement? = null



    /**
     *
     */
    var valueExpression: Expression? = null



    /**
     *
     */
    var valueParameterDefinition: ParameterDefinition? = null



    /**
     *
     */
    var valueRelatedArtifact: RelatedArtifact? = null



    /**
     *
     */
    var valueTriggerDefinition: TriggerDefinition? = null



    /**
     *
     */
    var valueUsageContext: UsageContext? = null



    /**
     *
     */
    var valueDosage: Dosage? = null



    /**
     *
     */
    var valueMeta: Meta? = null




}

/**
 * Distinguishes whether the task is a proposal, plan or full order.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class TaskIntent(
    @JsonValue val text: String) {
    UNKNOWN("unknown"),
    PROPOSAL("proposal"),
    PLAN("plan"),
    ORDER("order"),
    ORIGINAL_ORDER("original-order"),
    REFLEX_ORDER("reflex-order"),
    FILLER_ORDER("filler-order"),
    INSTANCE_ORDER("instance-order"),
    OPTION("option")
}




/**
 * A task to be performed.
 */
class TaskOutput(
    val type: CodeableConcept): BackboneElement() {


    /**
     *
     */
    var valueBase64Binary: Base64BinaryType? = null



    /**
     *
     */
    var valueBoolean: BooleanType? = null



    /**
     *
     */
    var valueCanonical: CanonicalType? = null



    /**
     *
     */
    var valueCode: CodeType? = null



    /**
     *
     */
    var valueDate: DateType? = null



    /**
     *
     */
    var valueDateTime: DateTimeType? = null



    /**
     *
     */
    var valueDecimal: DecimalType? = null



    /**
     *
     */
    var valueId: IdType? = null



    /**
     *
     */
    var valueInstant: InstantType? = null



    /**
     *
     */
    var valueInteger: IntegerType? = null



    /**
     *
     */
    var valueMarkdown: MarkdownType? = null



    /**
     *
     */
    var valueOid: OidType? = null



    /**
     *
     */
    var valuePositiveInt: PositiveIntType? = null



    /**
     *
     */
    var valueString: StringType? = null



    /**
     *
     */
    var valueTime: TimeType? = null



    /**
     *
     */
    var valueUnsignedInt: UnsignedIntType? = null



    /**
     *
     */
    var valueUri: UriType? = null



    /**
     *
     */
    var valueUrl: UrlType? = null



    /**
     *
     */
    var valueUuid: UuidType? = null



    /**
     *
     */
    var valueAddress: Address? = null



    /**
     *
     */
    var valueAge: Age? = null



    /**
     *
     */
    var valueAnnotation: Annotation? = null



    /**
     *
     */
    var valueAttachment: Attachment? = null



    /**
     *
     */
    var valueCodeableConcept: CodeableConcept? = null



    /**
     *
     */
    var valueCoding: Coding? = null



    /**
     *
     */
    var valueContactPoint: ContactPoint? = null



    /**
     *
     */
    var valueCount: Count? = null



    /**
     *
     */
    var valueDistance: Distance? = null



    /**
     *
     */
    var valueDuration: Duration? = null



    /**
     *
     */
    var valueHumanName: HumanName? = null



    /**
     *
     */
    var valueIdentifier: Identifier? = null



    /**
     *
     */
    var valueMoney: Money? = null



    /**
     *
     */
    var valuePeriod: Period? = null



    /**
     *
     */
    var valueQuantity: Quantity? = null



    /**
     *
     */
    var valueRange: Range? = null



    /**
     *
     */
    var valueRatio: Ratio? = null



    /**
     *
     */
    var valueReference: Reference? = null

    @JsonIgnore
    var valueReferenceTarget: Resource? = null

    /**
     *
     */
    var valueSampledData: SampledData? = null



    /**
     *
     */
    var valueSignature: Signature? = null



    /**
     *
     */
    var valueTiming: Timing? = null



    /**
     *
     */
    var valueContactDetail: ContactDetail? = null



    /**
     *
     */
    var valueContributor: Contributor? = null



    /**
     *
     */
    var valueDataRequirement: DataRequirement? = null



    /**
     *
     */
    var valueExpression: Expression? = null



    /**
     *
     */
    var valueParameterDefinition: ParameterDefinition? = null



    /**
     *
     */
    var valueRelatedArtifact: RelatedArtifact? = null



    /**
     *
     */
    var valueTriggerDefinition: TriggerDefinition? = null



    /**
     *
     */
    var valueUsageContext: UsageContext? = null



    /**
     *
     */
    var valueDosage: Dosage? = null



    /**
     *
     */
    var valueMeta: Meta? = null




}

/**
 * A task to be performed.
 */
class TaskRestriction: BackboneElement()
{


    /**
     * Indicates the number of times the requested action should occur.
     */
    var repetitions: PositiveIntType? = null



    /**
     * Over what time-period is fulfillment sought.
     */
    var period: Period? = null



    /**
     * For requests that are targeted to more than on potential recipient/target, for whom is fulfillment sought?
     */
    var recipient: List<Reference>? = null

    @JsonIgnore
    var recipientTarget: List<Resource>? = null


}

/**
 * The current status of the task.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class TaskStatus(
    @JsonValue val text: String) {
    DRAFT("draft"),
    REQUESTED("requested"),
    RECEIVED("received"),
    ACCEPTED("accepted"),
    REJECTED("rejected"),
    READY("ready"),
    CANCELLED("cancelled"),
    IN_PROGRESS("in-progress"),
    ON_HOLD("on-hold"),
    FAILED("failed"),
    COMPLETED("completed"),
    ENTERED_IN_ERROR("entered-in-error")
}




/**
 * A TerminologyCapabilities resource documents a set of capabilities (behaviors) of a FHIR Terminology Server that may be used as a statement of actual server functionality or a statement of required or desired server implementation.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class TerminologyCapabilities(
    val status: PublicationStatus,
    val date: DateTimeType,
    val kind: CapabilityStatementKind): DomainResource() {


    /**
     * An absolute URI that is used to identify this terminology capabilities when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which at which an authoritative instance of this terminology capabilities is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the terminology capabilities is stored on different servers.
     */
    var url: UriType? = null



    /**
     * The identifier that is used to identify this version of the terminology capabilities when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the terminology capabilities author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
     */
    var version: StringType? = null



    /**
     * A natural language name identifying the terminology capabilities. This name should be usable as an identifier for the module by machine processing applications such as code generation.
     */
    var name: StringType? = null



    /**
     * A short, descriptive, user-friendly title for the terminology capabilities.
     */
    var title: StringType? = null



    /**
     * A Boolean value to indicate that this terminology capabilities is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
     */
    var experimental: BooleanType? = null



    /**
     * The name of the organization or individual that published the terminology capabilities.
     */
    var publisher: StringType? = null



    /**
     * Contact details to assist a user in finding and communicating with the publisher.
     */
    var contact: List<ContactDetail>? = null



    /**
     * A free text natural language description of the terminology capabilities from a consumer's perspective. Typically, this is used when the capability statement describes a desired rather than an actual solution, for example as a formal expression of requirements as part of an RFP.
     */
    var description: MarkdownType? = null



    /**
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate terminology capabilities instances.
     */
    var useContext: List<UsageContext>? = null



    /**
     * A legal or geographic region in which the terminology capabilities is intended to be used.
     */
    var jurisdiction: List<CodeableConcept>? = null



    /**
     * Explanation of why this terminology capabilities is needed and why it has been designed as it has.
     */
    var purpose: MarkdownType? = null



    /**
     * A copyright statement relating to the terminology capabilities and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the terminology capabilities.
     */
    var copyright: MarkdownType? = null



    /**
     * Software that is covered by this terminology capability statement.  It is used when the statement describes the capabilities of a particular software version, independent of an installation.
     */
    var software: TerminologyCapabilitiesSoftware? = null



    /**
     * Identifies a specific implementation instance that is described by the terminology capability statement - i.e. a particular installation, rather than the capabilities of a software program.
     */
    var implementation: TerminologyCapabilitiesImplementation? = null



    /**
     * Whether the server supports lockedDate.
     */
    var lockedDate: BooleanType? = null



    /**
     * Identifies a code system that is supported by the server. If there is a no code system URL, then this declares the general assumptions a client can make about support for any CodeSystem resource.
     */
    var codeSystem: List<TerminologyCapabilitiesCodeSystem>? = null



    /**
     * Information about the [ValueSet/$expand](valueset-operation-expand.html) operation.
     */
    var expansion: TerminologyCapabilitiesExpansion? = null



    /**
     * The degree to which the server supports the code search parameter on ValueSet, if it is supported.
     */
    var codeSearch: CodeSearchSupport? = null



    /**
     * Information about the [ValueSet/$validate-code](valueset-operation-validate-code.html) operation.
     */
    var validateCode: TerminologyCapabilitiesValidateCode? = null



    /**
     * Information about the [ConceptMap/$translate](conceptmap-operation-translate.html) operation.
     */
    var translation: TerminologyCapabilitiesTranslation? = null



    /**
     * Whether the $closure operation is supported.
     */
    var closure: TerminologyCapabilitiesClosure? = null




}

/**
 * A TerminologyCapabilities resource documents a set of capabilities (behaviors) of a FHIR Terminology Server that may be used as a statement of actual server functionality or a statement of required or desired server implementation.
 */
class TerminologyCapabilitiesClosure: BackboneElement()
{


    /**
     * If cross-system closure is supported.
     */
    var translation: BooleanType? = null




}

/**
 * A TerminologyCapabilities resource documents a set of capabilities (behaviors) of a FHIR Terminology Server that may be used as a statement of actual server functionality or a statement of required or desired server implementation.
 */
class TerminologyCapabilitiesCodeSystem: BackboneElement()
{


    /**
     * URI for the Code System.
     */
    var uri: CanonicalType? = null



    /**
     * For the code system, a list of versions that are supported by the server.
     */
    var version: List<TerminologyCapabilitiesVersion>? = null



    /**
     * True if subsumption is supported for this version of the code system.
     */
    var subsumption: BooleanType? = null




}

/**
 * A TerminologyCapabilities resource documents a set of capabilities (behaviors) of a FHIR Terminology Server that may be used as a statement of actual server functionality or a statement of required or desired server implementation.
 */
class TerminologyCapabilitiesExpansion: BackboneElement()
{


    /**
     * Whether the server can return nested value sets.
     */
    var hierarchical: BooleanType? = null



    /**
     * Whether the server supports paging on expansion.
     */
    var paging: BooleanType? = null



    /**
     * Allow request for incomplete expansions?
     */
    var incomplete: BooleanType? = null



    /**
     * Supported expansion parameter.
     */
    var parameter: List<TerminologyCapabilitiesParameter>? = null



    /**
     * Documentation about text searching works.
     */
    var textFilter: MarkdownType? = null




}

/**
 * A TerminologyCapabilities resource documents a set of capabilities (behaviors) of a FHIR Terminology Server that may be used as a statement of actual server functionality or a statement of required or desired server implementation.
 */
class TerminologyCapabilitiesFilter(
    val code: CodeType,
    val op: List<CodeType>): BackboneElement()

/**
 * A TerminologyCapabilities resource documents a set of capabilities (behaviors) of a FHIR Terminology Server that may be used as a statement of actual server functionality or a statement of required or desired server implementation.
 */
class TerminologyCapabilitiesImplementation(
    val description: StringType): BackboneElement() {


    /**
     * An absolute base URL for the implementation.
     */
    var url: UrlType? = null




}

/**
 * A TerminologyCapabilities resource documents a set of capabilities (behaviors) of a FHIR Terminology Server that may be used as a statement of actual server functionality or a statement of required or desired server implementation.
 */
class TerminologyCapabilitiesParameter(
    val name: CodeType): BackboneElement() {


    /**
     * Description of support for parameter.
     */
    var documentation: StringType? = null




}

/**
 * A TerminologyCapabilities resource documents a set of capabilities (behaviors) of a FHIR Terminology Server that may be used as a statement of actual server functionality or a statement of required or desired server implementation.
 */
class TerminologyCapabilitiesSoftware(
    val name: StringType): BackboneElement() {


    /**
     * The version identifier for the software covered by this statement.
     */
    var version: StringType? = null




}

/**
 * A TerminologyCapabilities resource documents a set of capabilities (behaviors) of a FHIR Terminology Server that may be used as a statement of actual server functionality or a statement of required or desired server implementation.
 */
class TerminologyCapabilitiesTranslation(
    val needsMap: BooleanType): BackboneElement()

/**
 * A TerminologyCapabilities resource documents a set of capabilities (behaviors) of a FHIR Terminology Server that may be used as a statement of actual server functionality or a statement of required or desired server implementation.
 */
class TerminologyCapabilitiesValidateCode(
    val translations: BooleanType): BackboneElement()

/**
 * A TerminologyCapabilities resource documents a set of capabilities (behaviors) of a FHIR Terminology Server that may be used as a statement of actual server functionality or a statement of required or desired server implementation.
 */
class TerminologyCapabilitiesVersion: BackboneElement()
{


    /**
     * For version-less code systems, there should be a single version with no identifier.
     */
    var code: StringType? = null



    /**
     * If this is the default version for this code system.
     */
    var isDefault: BooleanType? = null



    /**
     * If the compositional grammar defined by the code system is supported.
     */
    var compositional: BooleanType? = null



    /**
     * Language Displays supported.
     */
    var language: List<CodeType>? = null



    /**
     * Filter Properties supported.
     */
    var filter: List<TerminologyCapabilitiesFilter>? = null



    /**
     * Properties supported for $lookup.
     */
    var property: List<CodeType>? = null




}

/**
 * A summary of information based on the results of executing a TestScript.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class TestReport(
    val status: TestReportStatus,
    val testScript: Reference,
    val result: TestReportResult): DomainResource() {


    /**
     * Identifier for the TestScript assigned for external purposes outside the context of FHIR.
     */
    var identifier: Identifier? = null



    /**
     * A free text natural language name identifying the executed TestScript.
     */
    var name: StringType? = null



    /**
     * The final score (percentage of tests passed) resulting from the execution of the TestScript.
     */
    var score: DecimalType? = null



    /**
     * Name of the tester producing this report (Organization or individual).
     */
    var tester: StringType? = null



    /**
     * When the TestScript was executed and this TestReport was generated.
     */
    var issued: DateTimeType? = null



    /**
     * A participant in the test execution, either the execution engine, a client, or a server.
     */
    var participant: List<TestReportParticipant>? = null



    /**
     * The results of the series of required setup operations before the tests were executed.
     */
    var setup: TestReportSetup? = null



    /**
     * A test executed from the test script.
     */
    var test: List<TestReportTest>? = null



    /**
     * The results of the series of operations required to clean up after all the tests were executed (successfully or otherwise).
     */
    var teardown: TestReportTeardown? = null




}

/**
 * A summary of information based on the results of executing a TestScript.
 */
class TestReportAction: BackboneElement()
{


    /**
     * The operation performed.
     */
    var operation: TestReportOperation? = null



    /**
     * The results of the assertion performed on the previous operations.
     */
    var assert: TestReportAssert? = null




}

/**
 * A summary of information based on the results of executing a TestScript.
 */
class TestReportAction1: BackboneElement()
{


    /**
     * An operation would involve a REST request to a server.
     */
    var operation: TestReportOperation? = null



    /**
     * The results of the assertion performed on the previous operations.
     */
    var assert: TestReportAssert? = null




}

/**
 * A summary of information based on the results of executing a TestScript.
 */
class TestReportAction2(
    val operation: TestReportOperation): BackboneElement()

/**
 * The results of executing an action.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class TestReportActionResult(
    @JsonValue val text: String) {
    PASS("pass"),
    SKIP("skip"),
    FAIL("fail"),
    WARNING("warning"),
    ERROR("error")
}




/**
 * A summary of information based on the results of executing a TestScript.
 */
class TestReportAssert(
    val result: TestReportActionResult): BackboneElement() {


    /**
     * An explanatory message associated with the result.
     */
    var message: MarkdownType? = null



    /**
     * A link to further details on the result.
     */
    var detail: StringType? = null




}

/**
 * A summary of information based on the results of executing a TestScript.
 */
class TestReportOperation(
    val result: TestReportActionResult): BackboneElement() {


    /**
     * An explanatory message associated with the result.
     */
    var message: MarkdownType? = null



    /**
     * A link to further details on the result.
     */
    var detail: UriType? = null




}

/**
 * A summary of information based on the results of executing a TestScript.
 */
class TestReportParticipant(
    val type: TestReportParticipantType,
    val uri: UriType): BackboneElement() {


    /**
     * The display name of the participant.
     */
    var display: StringType? = null




}

/**
 * The type of participant.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class TestReportParticipantType(
    @JsonValue val text: String) {
    TEST_ENGINE("test-engine"),
    CLIENT("client"),
    SERVER("server")
}




/**
 * The reported execution result.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class TestReportResult(
    @JsonValue val text: String) {
    PASS("pass"),
    FAIL("fail"),
    PENDING("pending")
}




/**
 * A summary of information based on the results of executing a TestScript.
 */
class TestReportSetup(
    val action: List<TestReportAction>): BackboneElement()

/**
 * The current status of the test report.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class TestReportStatus(
    @JsonValue val text: String) {
    COMPLETED("completed"),
    IN_PROGRESS("in-progress"),
    WAITING("waiting"),
    STOPPED("stopped"),
    ENTERED_IN_ERROR("entered-in-error")
}




/**
 * A summary of information based on the results of executing a TestScript.
 */
class TestReportTeardown(
    val action: List<TestReportAction2>): BackboneElement()

/**
 * A summary of information based on the results of executing a TestScript.
 */
class TestReportTest(
    val action: List<TestReportAction1>): BackboneElement() {


    /**
     * The name of this test used for tracking/logging purposes by test engines.
     */
    var name: StringType? = null



    /**
     * A short description of the test used by test engines for tracking and reporting purposes.
     */
    var description: StringType? = null




}

/**
 * A structured set of tests against a FHIR server or client implementation to determine compliance against the FHIR specification.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class TestScript(
    val url: UriType,
    val name: StringType,
    val status: PublicationStatus): DomainResource() {


    /**
     * A formal identifier that is used to identify this test script when it is represented in other formats, or referenced in a specification, model, design or an instance.
     */
    var identifier: Identifier? = null



    /**
     * The identifier that is used to identify this version of the test script when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the test script author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
     */
    var version: StringType? = null



    /**
     * A short, descriptive, user-friendly title for the test script.
     */
    var title: StringType? = null



    /**
     * A Boolean value to indicate that this test script is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
     */
    var experimental: BooleanType? = null



    /**
     * The date  (and optionally time) when the test script was published. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the test script changes.
     */
    var date: DateTimeType? = null



    /**
     * The name of the organization or individual that published the test script.
     */
    var publisher: StringType? = null



    /**
     * Contact details to assist a user in finding and communicating with the publisher.
     */
    var contact: List<ContactDetail>? = null



    /**
     * A free text natural language description of the test script from a consumer's perspective.
     */
    var description: MarkdownType? = null



    /**
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate test script instances.
     */
    var useContext: List<UsageContext>? = null



    /**
     * A legal or geographic region in which the test script is intended to be used.
     */
    var jurisdiction: List<CodeableConcept>? = null



    /**
     * Explanation of why this test script is needed and why it has been designed as it has.
     */
    var purpose: MarkdownType? = null



    /**
     * A copyright statement relating to the test script and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the test script.
     */
    var copyright: MarkdownType? = null



    /**
     * An abstract server used in operations within this test script in the origin element.
     */
    var origin: List<TestScriptOrigin>? = null



    /**
     * An abstract server used in operations within this test script in the destination element.
     */
    var destination: List<TestScriptDestination>? = null



    /**
     * The required capability must exist and are assumed to function correctly on the FHIR server being tested.
     */
    var metadata: TestScriptMetadata? = null



    /**
     * Fixture in the test script - by reference (uri). All fixtures are required for the test script to execute.
     */
    var fixture: List<TestScriptFixture>? = null



    /**
     * Reference to the profile to be used for validation.
     */
    var profile: List<Reference>? = null

    @JsonIgnore
    var profileTarget: List<Resource>? = null

    /**
     * Variable is set based either on element value in response body or on header field value in the response headers.
     */
    var variable: List<TestScriptVariable>? = null



    /**
     * A series of required setup operations before tests are executed.
     */
    var setup: TestScriptSetup? = null



    /**
     * A test in this script.
     */
    var test: List<TestScriptTest>? = null



    /**
     * A series of operations required to clean up after all the tests are executed (successfully or otherwise).
     */
    var teardown: TestScriptTeardown? = null




}

/**
 * A structured set of tests against a FHIR server or client implementation to determine compliance against the FHIR specification.
 */
class TestScriptAction: BackboneElement()
{


    /**
     * The operation to perform.
     */
    var operation: TestScriptOperation? = null



    /**
     * Evaluates the results of previous operations to determine if the server under test behaves appropriately.
     */
    var assert: TestScriptAssert? = null




}

/**
 * A structured set of tests against a FHIR server or client implementation to determine compliance against the FHIR specification.
 */
class TestScriptAction1: BackboneElement()
{


    /**
     * An operation would involve a REST request to a server.
     */
    var operation: TestScriptOperation? = null



    /**
     * Evaluates the results of previous operations to determine if the server under test behaves appropriately.
     */
    var assert: TestScriptAssert? = null




}

/**
 * A structured set of tests against a FHIR server or client implementation to determine compliance against the FHIR specification.
 */
class TestScriptAction2(
    val operation: TestScriptOperation): BackboneElement()

/**
 * A structured set of tests against a FHIR server or client implementation to determine compliance against the FHIR specification.
 */
class TestScriptAssert(
    val warningOnly: BooleanType): BackboneElement() {


    /**
     * The label would be used for tracking/logging purposes by test engines.
     */
    var label: StringType? = null



    /**
     * The description would be used by test engines for tracking and reporting purposes.
     */
    var description: StringType? = null



    /**
     * The direction to use for the assertion.
     */
    var direction: AssertionDirectionType? = null



    /**
     * Id of the source fixture used as the contents to be evaluated by either the "source/expression" or "sourceId/path" definition.
     */
    var compareToSourceId: StringType? = null



    /**
     * The FHIRPath expression to evaluate against the source fixture. When compareToSourceId is defined, either compareToSourceExpression or compareToSourcePath must be defined, but not both.
     */
    var compareToSourceExpression: StringType? = null



    /**
     * XPath or JSONPath expression to evaluate against the source fixture. When compareToSourceId is defined, either compareToSourceExpression or compareToSourcePath must be defined, but not both.
     */
    var compareToSourcePath: StringType? = null



    /**
     * The mime-type contents to compare against the request or response message 'Content-Type' header.
     */
    var contentType: CodeType? = null



    /**
     * The FHIRPath expression to be evaluated against the request or response message contents - HTTP headers and payload.
     */
    var expression: StringType? = null



    /**
     * The HTTP header field name e.g. 'Location'.
     */
    var headerField: StringType? = null



    /**
     * The ID of a fixture.  Asserts that the response contains at a minimum the fixture specified by minimumId.
     */
    var minimumId: StringType? = null



    /**
     * Whether or not the test execution performs validation on the bundle navigation links.
     */
    var navigationLinks: BooleanType? = null



    /**
     * The operator type defines the conditional behavior of the assert. If not defined, the default is equals.
     */
    var operator: AssertionOperatorType? = null



    /**
     * The XPath or JSONPath expression to be evaluated against the fixture representing the response received from server.
     */
    var path: StringType? = null



    /**
     * The request method or HTTP operation code to compare against that used by the client system under test.
     */
    var requestMethod: TestScriptRequestMethodCode? = null



    /**
     * The value to use in a comparison against the request URL path string.
     */
    var requestURL: StringType? = null



    /**
     * The type of the resource.  See http://build.fhir.org/resourcelist.html.
     */
    var resource: CodeType? = null



    /**
     * okay | created | noContent | notModified | bad | forbidden | notFound | methodNotAllowed | conflict | gone | preconditionFailed | unprocessable.
     */
    var response: AssertionResponseTypes? = null



    /**
     * The value of the HTTP response code to be tested.
     */
    var responseCode: StringType? = null



    /**
     * Fixture to evaluate the XPath/JSONPath expression or the headerField  against.
     */
    var sourceId: IdType? = null



    /**
     * The ID of the Profile to validate against.
     */
    var validateProfileId: IdType? = null



    /**
     * The value to compare to.
     */
    var value: StringType? = null




}

/**
 * A structured set of tests against a FHIR server or client implementation to determine compliance against the FHIR specification.
 */
class TestScriptCapability(
    val required: BooleanType,
    val validated: BooleanType,
    val capabilities: CanonicalType): BackboneElement() {


    /**
     * Description of the capabilities that this test script is requiring the server to support.
     */
    var description: StringType? = null



    /**
     * Which origin server these requirements apply to.
     */
    var origin: List<IntegerType>? = null



    /**
     * Which server these requirements apply to.
     */
    var destination: IntegerType? = null



    /**
     * Links to the FHIR specification that describes this interaction and the resources involved in more detail.
     */
    var link: List<UriType>? = null




}

/**
 * A structured set of tests against a FHIR server or client implementation to determine compliance against the FHIR specification.
 */
class TestScriptDestination(
    val index: IntegerType,
    val profile: Coding): BackboneElement()

/**
 * A structured set of tests against a FHIR server or client implementation to determine compliance against the FHIR specification.
 */
class TestScriptFixture(
    val autocreate: BooleanType,
    val autodelete: BooleanType): BackboneElement() {


    /**
     * Reference to the resource (containing the contents of the resource needed for operations).
     */
    var resource: Reference? = null

    @JsonIgnore
    var resourceTarget: Resource? = null


}

/**
 * A structured set of tests against a FHIR server or client implementation to determine compliance against the FHIR specification.
 */
class TestScriptLink(
    val url: UriType): BackboneElement() {


    /**
     * Short description of the link.
     */
    var description: StringType? = null




}

/**
 * A structured set of tests against a FHIR server or client implementation to determine compliance against the FHIR specification.
 */
class TestScriptMetadata(
    val capability: List<TestScriptCapability>): BackboneElement() {


    /**
     * A link to the FHIR specification that this test is covering.
     */
    var link: List<TestScriptLink>? = null




}

/**
 * A structured set of tests against a FHIR server or client implementation to determine compliance against the FHIR specification.
 */
class TestScriptOperation(
    val encodeRequestUrl: BooleanType): BackboneElement() {


    /**
     * Server interaction or operation type.
     */
    var type: Coding? = null



    /**
     * The type of the resource.  See http://build.fhir.org/resourcelist.html.
     */
    var resource: CodeType? = null



    /**
     * The label would be used for tracking/logging purposes by test engines.
     */
    var label: StringType? = null



    /**
     * The description would be used by test engines for tracking and reporting purposes.
     */
    var description: StringType? = null



    /**
     * The mime-type to use for RESTful operation in the 'Accept' header.
     */
    var accept: CodeType? = null



    /**
     * The mime-type to use for RESTful operation in the 'Content-Type' header.
     */
    var contentType: CodeType? = null



    /**
     * The server where the request message is destined for.  Must be one of the server numbers listed in TestScript.destination section.
     */
    var destination: IntegerType? = null



    /**
     * The HTTP method the test engine MUST use for this operation regardless of any other operation details.
     */
    var method: TestScriptRequestMethodCode? = null



    /**
     * The server where the request message originates from.  Must be one of the server numbers listed in TestScript.origin section.
     */
    var origin: IntegerType? = null



    /**
     * Path plus parameters after [type].  Used to set parts of the request URL explicitly.
     */
    var params: StringType? = null



    /**
     * Header elements would be used to set HTTP headers.
     */
    var requestHeader: List<TestScriptRequestHeader>? = null



    /**
     * The fixture id (maybe new) to map to the request.
     */
    var requestId: IdType? = null



    /**
     * The fixture id (maybe new) to map to the response.
     */
    var responseId: IdType? = null



    /**
     * The id of the fixture used as the body of a PUT or POST request.
     */
    var sourceId: IdType? = null



    /**
     * Id of fixture used for extracting the [id],  [type], and [vid] for GET requests.
     */
    var targetId: IdType? = null



    /**
     * Complete request URL.
     */
    var url: StringType? = null




}

/**
 * A structured set of tests against a FHIR server or client implementation to determine compliance against the FHIR specification.
 */
class TestScriptOrigin(
    val index: IntegerType,
    val profile: Coding): BackboneElement()

/**
 * A structured set of tests against a FHIR server or client implementation to determine compliance against the FHIR specification.
 */
class TestScriptRequestHeader(
    val field: StringType,
    val value: StringType): BackboneElement()

/**
 * The allowable request method or HTTP operation codes.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class TestScriptRequestMethodCode(
    @JsonValue val text: String) {
    DELETE("delete"),
    GET("get"),
    OPTIONS("options"),
    PATCH("patch"),
    POST("post"),
    PUT("put"),
    HEAD("head")
}




/**
 * A structured set of tests against a FHIR server or client implementation to determine compliance against the FHIR specification.
 */
class TestScriptSetup(
    val action: List<TestScriptAction>): BackboneElement()

/**
 * A structured set of tests against a FHIR server or client implementation to determine compliance against the FHIR specification.
 */
class TestScriptTeardown(
    val action: List<TestScriptAction2>): BackboneElement()

/**
 * A structured set of tests against a FHIR server or client implementation to determine compliance against the FHIR specification.
 */
class TestScriptTest(
    val action: List<TestScriptAction1>): BackboneElement() {


    /**
     * The name of this test used for tracking/logging purposes by test engines.
     */
    var name: StringType? = null



    /**
     * A short description of the test used by test engines for tracking and reporting purposes.
     */
    var description: StringType? = null




}

/**
 * A structured set of tests against a FHIR server or client implementation to determine compliance against the FHIR specification.
 */
class TestScriptVariable(
    val name: StringType): BackboneElement() {


    /**
     * A default, hard-coded, or user-defined value for this variable.
     */
    var defaultValue: StringType? = null



    /**
     * A free text natural language description of the variable and its purpose.
     */
    var description: StringType? = null



    /**
     * The FHIRPath expression to evaluate against the fixture body. When variables are defined, only one of either expression, headerField or path must be specified.
     */
    var expression: StringType? = null



    /**
     * Will be used to grab the HTTP header field value from the headers that sourceId is pointing to.
     */
    var headerField: StringType? = null



    /**
     * Displayable text string with hint help information to the user when entering a default value.
     */
    var hint: StringType? = null



    /**
     * XPath or JSONPath to evaluate against the fixture body.  When variables are defined, only one of either expression, headerField or path must be specified.
     */
    var path: StringType? = null



    /**
     * Fixture to evaluate the XPath/JSONPath expression or the headerField  against within this variable.
     */
    var sourceId: IdType? = null




}

/**
 * A time during the day, with no date specified
 * If the element is present, it must have either a @value, an @id, or extensions
 */
data class TimeType(@JsonValue val value: String) {
    companion object {
        @JvmStatic
        @JsonCreator
        fun create(value: String) = TimeType(value)
    }
}



/**
 * Specifies an event that may occur multiple times. Timing schedules are used to record when things are planned, expected or requested to occur. The most common usage is in dosage instructions for medications. They are also used when planning care of various kinds, and may be used for reporting the schedule to which past regular activities were carried out.
 * If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions
 */
class Timing: BackboneElement()
{


    /**
     * Identifies specific times when the event occurs.
     */
    var event: List<DateTimeType>? = null



    /**
     * A set of rules that describe when the event is scheduled.
     */
    var repeat: TimingRepeat? = null



    /**
     * A code for the timing schedule (or just text in code.text). Some codes such as BID are ubiquitous, but many institutions define their own additional codes. If a code is provided, the code is understood to be a complete statement of whatever is specified in the structured timing data, and either the code or the data may be used to interpret the Timing, with the exception that .repeat.bounds still applies over the code (and is not contained in the code).
     */
    var code: CodeableConcept? = null




}

/**
 * Specifies an event that may occur multiple times. Timing schedules are used to record when things are planned, expected or requested to occur. The most common usage is in dosage instructions for medications. They are also used when planning care of various kinds, and may be used for reporting the schedule to which past regular activities were carried out.
 * If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions
 */
class TimingRepeat: BackboneElement()
{


    /**
     *
     */
    var boundsDuration: Duration? = null



    /**
     *
     */
    var boundsRange: Range? = null



    /**
     *
     */
    var boundsPeriod: Period? = null



    /**
     * A total count of the desired number of repetitions across the duration of the entire timing specification. If countMax is present, this element indicates the lower bound of the allowed range of count values.
     */
    var count: PositiveIntType? = null



    /**
     * If present, indicates that the count is a range - so to perform the action between [count] and [countMax] times.
     */
    var countMax: PositiveIntType? = null



    /**
     * How long this thing happens for when it happens. If durationMax is present, this element indicates the lower bound of the allowed range of the duration.
     */
    var duration: DecimalType? = null



    /**
     * If present, indicates that the duration is a range - so to perform the action between [duration] and [durationMax] time length.
     */
    var durationMax: DecimalType? = null



    /**
     * The units of time for the duration, in UCUM units.
     */
    var durationUnit: UnitsOfTime? = null



    /**
     * The number of times to repeat the action within the specified period. If frequencyMax is present, this element indicates the lower bound of the allowed range of the frequency.
     */
    var frequency: PositiveIntType? = null



    /**
     * If present, indicates that the frequency is a range - so to repeat between [frequency] and [frequencyMax] times within the period or period range.
     */
    var frequencyMax: PositiveIntType? = null



    /**
     * Indicates the duration of time over which repetitions are to occur; e.g. to express "3 times per day", 3 would be the frequency and "1 day" would be the period. If periodMax is present, this element indicates the lower bound of the allowed range of the period length.
     */
    var period: DecimalType? = null



    /**
     * If present, indicates that the period is a range from [period] to [periodMax], allowing expressing concepts such as "do this once every 3-5 days.
     */
    var periodMax: DecimalType? = null



    /**
     * The units of time for the period in UCUM units.
     */
    var periodUnit: UnitsOfTime? = null



    /**
     * If one or more days of week is provided, then the action happens only on the specified day(s).
     */
    var dayOfWeek: List<CodeType>? = null



    /**
     * Specified time of day for action to take place.
     */
    var timeOfDay: List<TimeType>? = null



    /**
     * An approximate time period during the day, potentially linked to an event of daily living that indicates when the action should occur.
     */
    var `when`: List<EventTiming>? = null



    /**
     * The number of minutes from the event. If the event code does not indicate whether the minutes is before or after the event, then the offset is assumed to be after the event.
     */
    var offset: UnsignedIntType? = null




}

/**
 * A description of a triggering event. Triggering events can be named events, data events, or periodic, as determined by the type element.
 * If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions
 */
class TriggerDefinition(
    val type: TriggerType): Element() {


    /**
     * A formal name for the event. This may be an absolute URI that identifies the event formally (e.g. from a trigger registry), or a simple relative URI that identifies the event in a local context.
     */
    var name: StringType? = null



    /**
     *
     */
    var timingTiming: Timing? = null



    /**
     *
     */
    var timingReference: Reference? = null

    @JsonIgnore
    var timingReferenceTarget: Resource? = null

    /**
     *
     */
    var timingDate: DateType? = null



    /**
     *
     */
    var timingDateTime: DateTimeType? = null



    /**
     * The triggering data of the event (if this is a data trigger). If more than one data is requirement is specified, then all the data requirements must be true.
     */
    var data: List<DataRequirement>? = null



    /**
     * A boolean-valued expression that is evaluated in the context of the container of the trigger definition and returns whether or not the trigger fires.
     */
    var condition: Expression? = null




}

/**
 * The type of trigger.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class TriggerType(
    @JsonValue val text: String) {
    NAMED_EVENT("named-event"),
    PERIODIC("periodic"),
    DATA_CHANGED("data-changed"),
    DATA_ADDED("data-added"),
    DATA_MODIFIED("data-modified"),
    DATA_REMOVED("data-removed"),
    DATA_ACCESSED("data-accessed"),
    DATA_ACCESS_ENDED("data-access-ended")
}




/**
 * How a type relates to its baseDefinition.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class TypeDerivationRule(
    @JsonValue val text: String) {
    SPECIALIZATION("specialization"),
    CONSTRAINT("constraint")
}




/**
 * Operations supported by REST at the type or instance level.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class TypeRestfulInteraction(
    @JsonValue val text: String) {
    READ("read"),
    VREAD("vread"),
    UPDATE("update"),
    PATCH("patch"),
    DELETE("delete"),
    HISTORY_INSTANCE("history-instance"),
    HISTORY_TYPE("history-type"),
    CREATE("create"),
    SEARCH_TYPE("search-type")
}




/**
 * Codes to identify how UDI data was entered.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class UDIEntryType(
    @JsonValue val text: String) {
    BARCODE("barcode"),
    RFID("rfid"),
    MANUAL("manual"),
    CARD("card"),
    SELF_REPORTED("self-reported"),
    UNKNOWN("unknown")
}




/**
 * A unit of time (units from UCUM).
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class UnitsOfTime(
    @JsonValue val text: String) {
    S("s"),
    MIN("min"),
    H("h"),
    D("d"),
    WK("wk"),
    MO("mo"),
    A("a")
}




/**
 * An integer with a value that is not negative (e.g. >= 0)
 * If the element is present, it must have either a @value, an @id referenced from the Narrative, or extensions
 */
data class UnsignedIntType(@JsonValue val value: Int) {
    companion object {
        @JvmStatic
        @JsonCreator
        fun create(value: Int) = UnsignedIntType(value)
    }
}



/**
 * String of characters used to identify a name or a resource
 * see http://en.wikipedia.org/wiki/Uniform_resource_identifier
 * If the element is present, it must have either a @value, an @id, or extensions
 */
data class UriType(@JsonValue val value: String) {
    companion object {
        @JvmStatic
        @JsonCreator
        fun create(value: String) = UriType(value)
    }
}



/**
 * A URI that is a literal reference
 * If the element is present, it must have either a @value, an @id referenced from the Narrative, or extensions
 */
data class UrlType(@JsonValue val value: String) {
    companion object {
        @JvmStatic
        @JsonCreator
        fun create(value: String) = UrlType(value)
    }
}



/**
 * Specifies clinical/business/etc. metadata that can be used to retrieve, index and/or categorize an artifact. This metadata can either be specific to the applicable population (e.g., age category, DRG) or the specific context of care (e.g., venue, care setting, provider of care).
 * If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions
 */
class UsageContext(
    val code: Coding): Element() {


    /**
     *
     */
    var valueCodeableConcept: CodeableConcept? = null



    /**
     *
     */
    var valueQuantity: Quantity? = null



    /**
     *
     */
    var valueRange: Range? = null



    /**
     *
     */
    var valueReference: Reference? = null

    @JsonIgnore
    var valueReferenceTarget: Resource? = null


}

/**
 * The purpose of the Claim: predetermination, preauthorization, claim.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class Use(
    @JsonValue val text: String) {
    CLAIM("claim"),
    PREAUTHORIZATION("preauthorization"),
    PREDETERMINATION("predetermination")
}




/**
 * A UUID, represented as a URI
 * See The Open Group, CDE 1.1 Remote Procedure Call specification, Appendix A.
 * If the element is present, it must have either a @value, an @id referenced from the Narrative, or extensions
 */
data class UuidType(@JsonValue val value: String) {
    companion object {
        @JvmStatic
        @JsonCreator
        fun create(value: String) = UuidType(value)
    }
}



/**
 * A ValueSet resource instance specifies a set of codes drawn from one or more code systems, intended for use in a particular context. Value sets link between [[[CodeSystem]]] definitions and their use in [coded elements](terminologies.html).
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class ValueSet(
    val status: PublicationStatus): DomainResource() {


    /**
     * An absolute URI that is used to identify this value set when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which at which an authoritative instance of this value set is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the value set is stored on different servers.
     */
    var url: UriType? = null



    /**
     * A formal identifier that is used to identify this value set when it is represented in other formats, or referenced in a specification, model, design or an instance.
     */
    var identifier: List<Identifier>? = null



    /**
     * The identifier that is used to identify this version of the value set when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the value set author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
     */
    var version: StringType? = null



    /**
     * A natural language name identifying the value set. This name should be usable as an identifier for the module by machine processing applications such as code generation.
     */
    var name: StringType? = null



    /**
     * A short, descriptive, user-friendly title for the value set.
     */
    var title: StringType? = null



    /**
     * A Boolean value to indicate that this value set is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
     */
    var experimental: BooleanType? = null



    /**
     * The date (and optionally time) when the value set was created or revised (e.g. the 'content logical definition').
     */
    var date: DateTimeType? = null



    /**
     * The name of the organization or individual that published the value set.
     */
    var publisher: StringType? = null



    /**
     * Contact details to assist a user in finding and communicating with the publisher.
     */
    var contact: List<ContactDetail>? = null



    /**
     * A free text natural language description of the value set from a consumer's perspective. The textual description specifies the span of meanings for concepts to be included within the Value Set Expansion, and also may specify the intended use and limitations of the Value Set.
     */
    var description: MarkdownType? = null



    /**
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate value set instances.
     */
    var useContext: List<UsageContext>? = null



    /**
     * A legal or geographic region in which the value set is intended to be used.
     */
    var jurisdiction: List<CodeableConcept>? = null



    /**
     * If this is set to 'true', then no new versions of the content logical definition can be created.  Note: Other metadata might still change.
     */
    var immutable: BooleanType? = null



    /**
     * Explanation of why this value set is needed and why it has been designed as it has.
     */
    var purpose: MarkdownType? = null



    /**
     * A copyright statement relating to the value set and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the value set.
     */
    var copyright: MarkdownType? = null



    /**
     * A set of criteria that define the contents of the value set by including or excluding codes selected from the specified code system(s) that the value set draws from. This is also known as the Content Logical Definition (CLD).
     */
    var compose: ValueSetCompose? = null



    /**
     * A value set can also be "expanded", where the value set is turned into a simple collection of enumerated codes. This element holds the expansion, if it has been performed.
     */
    var expansion: ValueSetExpansion? = null




}

/**
 * A ValueSet resource instance specifies a set of codes drawn from one or more code systems, intended for use in a particular context. Value sets link between [[[CodeSystem]]] definitions and their use in [coded elements](terminologies.html).
 */
class ValueSetCompose(
    val include: List<ValueSetInclude>): BackboneElement() {


    /**
     * The Locked Date is  the effective date that is used to determine the version of all referenced Code Systems and Value Set Definitions included in the compose that are not already tied to a specific version.
     */
    var lockedDate: DateType? = null



    /**
     * Whether inactive codes - codes that are not approved for current use - are in the value set. If inactive = true, inactive codes are to be included in the expansion, if inactive = false, the inactive codes will not be included in the expansion. If absent, the behavior is determined by the implementation, or by the applicable $expand parameters (but generally, inactive codes would be expected to be included).
     */
    var inactive: BooleanType? = null



    /**
     * Exclude one or more codes from the value set based on code system filters and/or other value sets.
     */
    var exclude: List<ValueSetInclude>? = null




}

/**
 * A ValueSet resource instance specifies a set of codes drawn from one or more code systems, intended for use in a particular context. Value sets link between [[[CodeSystem]]] definitions and their use in [coded elements](terminologies.html).
 */
class ValueSetConcept(
    val code: CodeType): BackboneElement() {


    /**
     * The text to display to the user for this concept in the context of this valueset. If no display is provided, then applications using the value set use the display specified for the code by the system.
     */
    var display: StringType? = null



    /**
     * Additional representations for this concept when used in this value set - other languages, aliases, specialized purposes, used for particular purposes, etc.
     */
    var designation: List<ValueSetDesignation>? = null




}

/**
 * A ValueSet resource instance specifies a set of codes drawn from one or more code systems, intended for use in a particular context. Value sets link between [[[CodeSystem]]] definitions and their use in [coded elements](terminologies.html).
 */
class ValueSetContains: BackboneElement()
{


    /**
     * An absolute URI which is the code system in which the code for this item in the expansion is defined.
     */
    var system: UriType? = null



    /**
     * If true, this entry is included in the expansion for navigational purposes, and the user cannot select the code directly as a proper value.
     */
    var abstract: BooleanType? = null



    /**
     * If the concept is inactive in the code system that defines it. Inactive codes are those that are no longer to be used, but are maintained by the code system for understanding legacy data. It might not be known or specified whether an concept is inactive (and it may depend on the context of use).
     */
    var inactive: BooleanType? = null



    /**
     * The version of the code system from this code was taken. Note that a well-maintained code system does not need the version reported, because the meaning of codes is consistent across versions. However this cannot consistently be assured, and when the meaning is not guaranteed to be consistent, the version SHOULD be exchanged.
     */
    var version: StringType? = null



    /**
     * The code for this item in the expansion hierarchy. If this code is missing the entry in the hierarchy is a place holder (abstract) and does not represent a valid code in the value set.
     */
    var code: CodeType? = null



    /**
     * The recommended display for this item in the expansion.
     */
    var display: StringType? = null



    /**
     * Additional representations for this item - other languages, aliases, specialized purposes, used for particular purposes, etc. These are relevant when the conditions of the expansion do not fix to a single correct representation.
     */
    var designation: List<ValueSetDesignation>? = null



    /**
     * Other codes and entries contained under this entry in the hierarchy.
     */
    var contains: List<ValueSetContains>? = null




}

/**
 * A ValueSet resource instance specifies a set of codes drawn from one or more code systems, intended for use in a particular context. Value sets link between [[[CodeSystem]]] definitions and their use in [coded elements](terminologies.html).
 */
class ValueSetDesignation(
    val value: StringType): BackboneElement() {


    /**
     * The language this designation is defined for.
     */
    var language: CodeType? = null



    /**
     * A code that represents types of uses of designations.
     */
    var use: Coding? = null




}

/**
 * A ValueSet resource instance specifies a set of codes drawn from one or more code systems, intended for use in a particular context. Value sets link between [[[CodeSystem]]] definitions and their use in [coded elements](terminologies.html).
 */
class ValueSetExpansion(
    val timestamp: DateTimeType): BackboneElement() {


    /**
     * An identifier that uniquely identifies this expansion of the valueset, based on a unique combination of the provided parameters, the system default parameters, and the underlying system code system versions etc. Systems may re-use the same identifier as long as those factors remain the same, and the expansion is the same, but are not required to do so. This is a business identifier.
     */
    var identifier: UriType? = null



    /**
     * The total number of concepts in the expansion. If the number of concept nodes in this resource is less than the stated number, then the server can return more using the offset parameter.
     */
    var total: IntegerType? = null



    /**
     * If paging is being used, the offset at which this resource starts.  I.e. this resource is a partial view into the expansion. If paging is not being used, this element SHALL NOT be present.
     */
    var offset: IntegerType? = null



    /**
     * A parameter that controlled the expansion process. These parameters may be used by users of expanded value sets to check whether the expansion is suitable for a particular purpose, or to pick the correct expansion.
     */
    var parameter: List<ValueSetParameter>? = null



    /**
     * The codes that are contained in the value set expansion.
     */
    var contains: List<ValueSetContains>? = null




}

/**
 * A ValueSet resource instance specifies a set of codes drawn from one or more code systems, intended for use in a particular context. Value sets link between [[[CodeSystem]]] definitions and their use in [coded elements](terminologies.html).
 */
class ValueSetFilter(
    val property: CodeType,
    val op: FilterOperator,
    val value: StringType): BackboneElement()

/**
 * A ValueSet resource instance specifies a set of codes drawn from one or more code systems, intended for use in a particular context. Value sets link between [[[CodeSystem]]] definitions and their use in [coded elements](terminologies.html).
 */
class ValueSetInclude: BackboneElement()
{


    /**
     * An absolute URI which is the code system from which the selected codes come from.
     */
    var system: UriType? = null



    /**
     * The version of the code system that the codes are selected from, or the special version '*' for all versions.
     */
    var version: StringType? = null



    /**
     * Specifies a concept to be included or excluded.
     */
    var concept: List<ValueSetConcept>? = null



    /**
     * Select concepts by specify a matching criterion based on the properties (including relationships) defined by the system, or on filters defined by the system. If multiple filters are specified, they SHALL all be true.
     */
    var filter: List<ValueSetFilter>? = null



    /**
     * Selects the concepts found in this value set (based on its value set definition). This is an absolute URI that is a reference to ValueSet.url.  If multiple value sets are specified this includes the union of the contents of all of the referenced value sets.
     */
    var valueSet: List<CanonicalType>? = null




}

/**
 * A ValueSet resource instance specifies a set of codes drawn from one or more code systems, intended for use in a particular context. Value sets link between [[[CodeSystem]]] definitions and their use in [coded elements](terminologies.html).
 */
class ValueSetParameter(
    val name: StringType): BackboneElement() {


    /**
     *
     */
    var valueString: StringType? = null



    /**
     *
     */
    var valueBoolean: BooleanType? = null



    /**
     *
     */
    var valueInteger: IntegerType? = null



    /**
     *
     */
    var valueDecimal: DecimalType? = null



    /**
     *
     */
    var valueUri: UriType? = null



    /**
     *
     */
    var valueCode: CodeType? = null



    /**
     *
     */
    var valueDateTime: DateTimeType? = null




}

/**
 * The possible types of variables for exposures or outcomes (E.g. Dichotomous, Continuous, Descriptive).
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class VariableType(
    @JsonValue val text: String) {
    DICHOTOMOUS("dichotomous"),
    CONTINUOUS("continuous"),
    DESCRIPTIVE("descriptive")
}




/**
 * Codes specifying the level of confidentiality of the composition.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class VConfidentialityClassification(
    @JsonValue val text: String) {
    U("U"),
    L("L"),
    M("M"),
    N("N"),
    R("R"),
    V("V")
}




/**
 * Describes validation requirements, source(s), status and dates for one or more elements.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class VerificationResult(
    val status: Status): DomainResource() {


    /**
     * A resource that was validated.
     */
    var target: List<Reference>? = null

    @JsonIgnore
    var targetTarget: List<Resource>? = null

    /**
     * The fhirpath location(s) within the resource that was validated.
     */
    var targetLocation: List<StringType>? = null



    /**
     * The frequency with which the target must be validated (none; initial; periodic).
     */
    var need: CodeableConcept? = null



    /**
     * When the validation status was updated.
     */
    var statusDate: DateTimeType? = null



    /**
     * What the target is validated against (nothing; primary source; multiple sources).
     */
    var validationType: CodeableConcept? = null



    /**
     * The primary process by which the target is validated (edit check; value set; primary source; multiple sources; standalone; in context).
     */
    var validationProcess: List<CodeableConcept>? = null



    /**
     * Frequency of revalidation.
     */
    var frequency: Timing? = null



    /**
     * The date/time validation was last completed (including failed validations).
     */
    var lastPerformed: DateTimeType? = null



    /**
     * The date when target is next validated, if appropriate.
     */
    var nextScheduled: DateType? = null



    /**
     * The result if validation fails (fatal; warning; record only; none).
     */
    var failureAction: CodeableConcept? = null



    /**
     * Information about the primary source(s) involved in validation.
     */
    var primarySource: List<VerificationResultPrimarySource>? = null



    /**
     * Information about the entity attesting to information.
     */
    var attestation: VerificationResultAttestation? = null



    /**
     * Information about the entity validating information.
     */
    var validator: List<VerificationResultValidator>? = null




}

/**
 * Describes validation requirements, source(s), status and dates for one or more elements.
 */
class VerificationResultAttestation: BackboneElement()
{


    /**
     * The individual or organization attesting to information.
     */
    var who: Reference? = null

    @JsonIgnore
    var whoTarget: Resource? = null

    /**
     * When the who is asserting on behalf of another (organization or individual).
     */
    var onBehalfOf: Reference? = null

    @JsonIgnore
    var onBehalfOfTarget: Resource? = null

    /**
     * The method by which attested information was submitted/retrieved (manual; API; Push).
     */
    var communicationMethod: CodeableConcept? = null



    /**
     * The date the information was attested to.
     */
    var date: DateType? = null



    /**
     * A digital identity certificate associated with the attestation source.
     */
    var sourceIdentityCertificate: StringType? = null



    /**
     * A digital identity certificate associated with the proxy entity submitting attested information on behalf of the attestation source.
     */
    var proxyIdentityCertificate: StringType? = null



    /**
     * Signed assertion by the proxy entity indicating that they have the right to submit attested information on behalf of the attestation source.
     */
    var proxySignature: Signature? = null



    /**
     * Signed assertion by the attestation source that they have attested to the information.
     */
    var sourceSignature: Signature? = null




}

/**
 * Describes validation requirements, source(s), status and dates for one or more elements.
 */
class VerificationResultPrimarySource: BackboneElement()
{


    /**
     * Reference to the primary source.
     */
    var who: Reference? = null

    @JsonIgnore
    var whoTarget: Resource? = null

    /**
     * Type of primary source (License Board; Primary Education; Continuing Education; Postal Service; Relationship owner; Registration Authority; legal source; issuing source; authoritative source).
     */
    var type: List<CodeableConcept>? = null



    /**
     * Method for communicating with the primary source (manual; API; Push).
     */
    var communicationMethod: List<CodeableConcept>? = null



    /**
     * Status of the validation of the target against the primary source (successful; failed; unknown).
     */
    var validationStatus: CodeableConcept? = null



    /**
     * When the target was validated against the primary source.
     */
    var validationDate: DateTimeType? = null



    /**
     * Ability of the primary source to push updates/alerts (yes; no; undetermined).
     */
    var canPushUpdates: CodeableConcept? = null



    /**
     * Type of alerts/updates the primary source can send (specific requested changes; any changes; as defined by source).
     */
    var pushTypeAvailable: List<CodeableConcept>? = null




}

/**
 * Describes validation requirements, source(s), status and dates for one or more elements.
 */
class VerificationResultValidator(
    val organization: Reference): BackboneElement() {


    /**
     * A digital identity certificate associated with the validator.
     */
    var identityCertificate: StringType? = null



    /**
     * Signed assertion by the validator that they have validated the information.
     */
    var attestationSignature: Signature? = null




}

/**
 * A coded concept listing the base codes.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class VisionBase(
    @JsonValue val text: String) {
    UP("up"),
    DOWN("down"),
    IN("in"),
    OUT("out")
}




/**
 * A coded concept listing the eye codes.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class VisionEyes(
    @JsonValue val text: String) {
    RIGHT("right"),
    LEFT("left")
}




/**
 * An authorization for the provision of glasses and/or contact lenses to a patient.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
class VisionPrescription(
    val status: FinancialResourceStatusCodes,
    val created: DateTimeType,
    val patient: Reference,
    val dateWritten: DateTimeType,
    val prescriber: Reference,
    val lensSpecification: List<VisionPrescriptionLensSpecification>): DomainResource() {


    /**
     * A unique identifier assigned to this vision prescription.
     */
    var identifier: List<Identifier>? = null



    /**
     * A reference to a resource that identifies the particular occurrence of contact between patient and health care provider during which the prescription was issued.
     */
    var encounter: Reference? = null

    @JsonIgnore
    var encounterTarget: Resource? = null


}

/**
 * An authorization for the provision of glasses and/or contact lenses to a patient.
 */
class VisionPrescriptionLensSpecification(
    val product: CodeableConcept,
    val eye: VisionEyes): BackboneElement() {


    /**
     * Lens power measured in dioptres (0.25 units).
     */
    var sphere: DecimalType? = null



    /**
     * Power adjustment for astigmatism measured in dioptres (0.25 units).
     */
    var cylinder: DecimalType? = null



    /**
     * Adjustment for astigmatism measured in integer degrees.
     */
    var axis: IntegerType? = null



    /**
     * Allows for adjustment on two axis.
     */
    var prism: List<VisionPrescriptionPrism>? = null



    /**
     * Power adjustment for multifocal lenses measured in dioptres (0.25 units).
     */
    var add: DecimalType? = null



    /**
     * Contact lens power measured in dioptres (0.25 units).
     */
    var power: DecimalType? = null



    /**
     * Back curvature measured in millimetres.
     */
    var backCurve: DecimalType? = null



    /**
     * Contact lens diameter measured in millimetres.
     */
    var diameter: DecimalType? = null



    /**
     * The recommended maximum wear period for the lens.
     */
    var duration: Quantity? = null



    /**
     * Special color or pattern.
     */
    var color: StringType? = null



    /**
     * Brand recommendations or restrictions.
     */
    var brand: StringType? = null



    /**
     * Notes for special requirements such as coatings and lens materials.
     */
    var note: List<Annotation>? = null




}

/**
 * An authorization for the provision of glasses and/or contact lenses to a patient.
 */
class VisionPrescriptionPrism(
    val amount: DecimalType,
    val base: VisionBase): BackboneElement()

/**
 * How a search parameter relates to the set of elements returned by evaluating its xpath query.
 * If the element is present, it must have either a @value, an @id, or extensions
 */
enum class XPathUsageType(
    @JsonValue val text: String) {
    NORMAL("normal"),
    PHONETIC("phonetic"),
    NEARBY("nearby"),
    DISTANCE("distance"),
    OTHER("other")
}




